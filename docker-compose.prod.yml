# 服务器正式环境配置（x86，有代理）
# 包含：PostgreSQL、Redis、Nginx、Flask应用
# 使用命名卷进行数据持久化

volumes:
  whalefall_postgres_data:
    driver: local
  whalefall_redis_data:
    driver: local
  whalefall_nginx_logs:
    driver: local
  whalefall_nginx_ssl:
    driver: local
  whalefall_app_data:
    driver: local

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: whalefall_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-whalefall_prod}
      - POSTGRES_USER=${POSTGRES_USER:-whalefall_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    ports:
      - "5432:5432"
    volumes:
      - whalefall_postgres_data:/var/lib/postgresql/data
    networks:
      - whalefall_prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-whalefall_user} -d ${POSTGRES_DB:-whalefall_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: whalefall_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - whalefall_redis_data:/data
    networks:
      - whalefall_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: whalefall_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - whalefall_nginx_logs:/var/log/nginx
      - whalefall_nginx_ssl:/etc/nginx/ssl
    networks:
      - whalefall_prod_network
    # depends_on: whalefall  # 注释掉，因为whalefall在profiles中
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Flask应用（生产环境）
  whalefall:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
      args:
        HTTP_PROXY: ${HTTP_PROXY:-}
        HTTPS_PROXY: ${HTTPS_PROXY:-}
        NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,::1}
        BUILDKIT_INLINE_CACHE: 1
    image: whalefall:prod
    container_name: whalefall_app_prod
    restart: unless-stopped
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5001
      - DATABASE_URL=${DATABASE_URL}
      - CACHE_TYPE=${CACHE_TYPE}
      - CACHE_REDIS_URL=${CACHE_REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BCRYPT_LOG_ROUNDS=${BCRYPT_LOG_ROUNDS:-12}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - APP_NAME=${APP_NAME:-鲸落}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - PERMANENT_SESSION_LIFETIME=${PERMANENT_SESSION_LIFETIME:-3600}
      # 运行时代理配置
      - HTTP_PROXY=${HTTP_PROXY:-}
      - HTTPS_PROXY=${HTTPS_PROXY:-}
      - NO_PROXY=${NO_PROXY:-localhost,127.0.0.1,::1}
    env_file:
      - .env
    volumes:
      - whalefall_app_data:/app/userdata
    networks:
      - whalefall_prod_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
    profiles:
      - flask

networks:
  whalefall_prod_network:
    driver: bridge
