# 鲸落 (TaifishV4) - Cursor AI 编程规则

## 项目概述
鲸落是一个基于Flask的DBA数据库管理Web应用，提供多数据库实例管理、账户管理、任务调度、日志监控等功能。支持PostgreSQL、MySQL、SQL Server、Oracle等主流数据库。

## 技术栈
- **后端**: Flask 3.0.3, SQLAlchemy 1.4.54, APScheduler 3.10.4
- **前端**: Bootstrap 5.3.2, jQuery 3.7.1, Chart.js 4.4.0
- **数据库**: PostgreSQL (主数据库), MySQL, SQL Server, Oracle
- **缓存**: Redis 5.0.7
- **任务调度**: APScheduler (替代Celery)
- **Python版本**: 3.13+

## 项目结构
```
TaifishV4/
├── app/                    # 应用主目录
│   ├── models/            # 数据模型 (SQLAlchemy)
│   ├── routes/            # 路由控制器 (Flask Blueprint)
│   ├── services/          # 业务服务层
│   ├── utils/             # 工具类
│   ├── templates/         # Jinja2模板文件
│   ├── blueprints/        # Flask蓝图模块
│   ├── middleware/        # 中间件
│   ├── static/            # 静态文件
│   ├── scheduler.py       # 定时任务调度器
│   └── tasks.py           # 任务定义
├── docs/                  # 项目文档
├── sql/                   # SQL脚本目录
├── tests/                 # 测试文件
├── userdata/              # 用户数据目录
├── migrations/            # 数据库迁移
├── config/                # 配置文件
└── requirements.txt       # Python依赖
```

## 编码规范

### Python代码规范
- 使用Python 3.13+语法特性
- 遵循PEP 8代码风格
- 使用类型提示 (Type Hints)
- 函数和类必须有详细的docstring
- 使用JSDoc风格的注释格式

### Flask应用规范
- 使用Flask Blueprint组织路由
- 所有路由必须包含认证检查 `@login_required`
- 使用Flask-WTF处理表单验证
- 使用Flask-SQLAlchemy进行数据库操作
- 使用Flask-Login进行用户认证

### 数据库规范
- 使用SQLAlchemy ORM，避免原生SQL
- 所有模型必须继承自`db.Model`
- 使用Alembic进行数据库迁移
- 表名使用复数形式，字段名使用下划线分隔
- 必须包含`created_at`和`updated_at`时间戳字段

### 前端规范
- 使用Bootstrap 5.3.2组件
- 使用jQuery进行DOM操作
- 所有AJAX请求必须包含CSRF token
- 使用Font Awesome 6.4.0图标
- 响应式设计，支持移动端

## 核心功能模块

### 1. 用户认证与权限管理
- 基于Flask-Login的会话管理
- JWT令牌认证支持
- 基于角色的访问控制
- 密码加密存储

### 2. 数据库实例管理
- 支持PostgreSQL、MySQL、SQL Server、Oracle
- 实例创建、编辑、删除、连接测试
- 实例状态监控和统计

### 3. 账户分类管理 (核心功能)
- 智能账户分类与权限规则管理
- 支持MySQL、SQL Server、PostgreSQL、Oracle权限规则
- 自动分类和权限扫描
- 多分类分配支持
- 分类统计和分配管理

### 4. 凭据管理
- 安全的数据库连接凭据存储
- 凭据与实例关联管理
- 密码加密存储

### 5. 定时任务管理
- 基于APScheduler的轻量级任务调度
- 支持内置任务和自定义任务
- 任务调度和监控
- 任务持久化存储 (PostgreSQL)
- 支持任务启用/禁用和立即执行

### 6. 日志监控
- 结构化日志记录
- 操作审计日志
- 系统监控和统计
- 日志聚合和过滤
- 定时任务日志追踪

### 7. 数据同步管理
- 账户数据同步
- 权限数据同步
- 同步记录管理
- 数据变更追踪

## 开发规范

### 文件命名规范
- Python文件使用下划线分隔: `account_classification_service.py`
- 模板文件使用下划线分隔: `account_classification/index.html`
- 配置文件使用下划线分隔: `account_classification.py`

### 函数命名规范
- 函数名使用下划线分隔: `get_account_permissions()`
- 私有方法使用单下划线前缀: `_validate_permissions()`
- 类名使用驼峰命名: `AccountClassificationService`

### 变量命名规范
- 变量名使用下划线分隔: `account_id`, `permission_list`
- 常量使用全大写: `MAX_RETRY_COUNT`
- 布尔变量使用is_前缀: `is_active`, `is_system`

### 注释规范
- 所有函数必须有docstring
- 使用JSDoc风格的注释格式
- 复杂逻辑必须有行内注释
- 类和方法必须有功能说明

## 数据库设计规范

### 表设计原则
- 每个表必须有主键 `id`
- 必须包含 `created_at` 和 `updated_at` 字段
- 软删除使用 `deleted_at` 字段
- 外键字段使用 `_id` 后缀
- 布尔字段使用 `is_` 前缀

### 关系设计
- 一对多关系使用外键
- 多对多关系使用中间表
- 复杂数据使用JSON字段存储
- 索引优化查询性能

## API设计规范

### RESTful API
- 使用标准HTTP方法: GET, POST, PUT, DELETE
- URL使用复数形式: `/accounts/`, `/classifications/`
- 状态码使用标准HTTP状态码
- 响应格式统一使用JSON

### 错误处理
- 使用Flask的异常处理机制
- 自定义异常类继承自Exception
- 错误信息使用中文
- 记录详细的错误日志

## 安全规范

### 认证安全
- 所有API接口必须验证用户身份
- 使用CSRF token防止跨站请求伪造
- 密码使用bcrypt加密
- 会话超时自动清理

### 数据安全
- 敏感数据加密存储
- 数据库连接使用连接池
- 输入数据验证和过滤
- SQL注入防护

## 测试规范

### 单元测试
- 使用pytest框架
- 测试覆盖率要求80%以上
- 每个函数必须有对应的测试用例
- 测试数据使用fixture

### 集成测试
- 测试API接口功能
- 测试数据库操作
- 测试用户认证流程
- 测试错误处理

## 部署规范

### 开发环境
- 使用PostgreSQL数据库
- 使用Redis作为缓存
- 使用Flask开发服务器
- 日志输出到控制台

### 生产环境
- 使用PostgreSQL数据库
- 使用Redis单机
- 使用Gunicorn WSGI服务器
- 日志输出到文件

## 代码审查规范

### 提交前检查
- 代码风格检查 (ruff)
- 类型检查 (mypy)
- 测试用例通过
- 文档更新

### 代码审查要点
- 代码逻辑正确性
- 性能优化建议
- 安全漏洞检查
- 代码可维护性

## 文档规范

### 代码文档
- 所有函数必须有docstring
- 复杂算法必须有注释说明
- 配置文件必须有注释
- 数据库表结构必须有说明

### 项目文档
- README.md包含项目概述和快速开始
- docs/目录包含所有项目文档
- 每个功能模块有独立的文档

## 特殊注意事项

### 账户分类管理
- 权限规则配置必须支持多种数据库类型
- 自动分类逻辑必须考虑权限优先级
- 分类分配支持多对多关系
- 权限扫描必须实时更新

### 数据库兼容性
- MySQL权限处理特殊考虑GRANT OPTION
- SQL Server权限包含服务器角色和数据库角色
- PostgreSQL权限包含角色属性
- Oracle权限包含系统权限和对象权限

### 性能优化
- 数据库查询使用索引优化
- 大量数据使用分页处理
- 缓存频繁访问的数据
- 异步处理耗时操作
- 定时任务使用轻量级APScheduler
- 日志聚合减少数据库压力

### 定时任务管理
- 使用APScheduler替代Celery，减少依赖复杂度
- 任务状态持久化存储在PostgreSQL数据库
- 支持任务的启用/禁用和立即执行
- 任务执行日志与系统日志集成
- 避免创建重复的同步记录

### 文档管理
- 所有Markdown文档统一存放在docs/目录
- 按功能模块分类组织文档
- SQL脚本统一存放在sql/目录
- 保持文档链接的准确性和一致性

## 开发工具配置

### IDE配置
- 使用Cursor AI编程助手
- 配置Python解释器路径
- 启用类型检查
- 配置代码格式化

### 调试配置
- 使用Flask调试模式
- 配置日志级别
- 使用断点调试
- 监控性能指标

## 项目维护规范

### 代码清理
- 定期清理临时文件和测试脚本
- 移除无用的导入和变量
- 保持代码库整洁
- 及时更新文档链接

### 文件组织
- 文档按功能分类存放在docs/目录
- SQL脚本统一存放在sql/目录
- 用户数据存放在userdata/目录
- 配置文件存放在config/目录

### 版本控制
- 使用清晰的提交信息
- 定期提交和推送代码
- 保持分支整洁
- 及时更新README和文档

## 错误处理规范

### JavaScript错误处理
- 添加try-catch块捕获JavaScript执行错误
- 在控制台输出详细的错误信息和堆栈跟踪
- 显示用户友好的错误提示
- 帮助诊断模态框显示失败的具体原因

### Python错误处理
- 使用适当的异常类型
- 记录详细的错误日志
- 提供有意义的错误信息
- 实现优雅的错误恢复机制

---

**注意**: 本规则文件会根据项目发展持续更新，请开发团队遵循最新规范。