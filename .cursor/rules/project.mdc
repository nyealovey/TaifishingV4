---
description:
globs:
alwaysApply: true
---

架构规划与文档生成

架构设计

根据需求确定系统架构与模块关系

规格文档生成

生成包含 UML 图表的详细 spec.md 文件

任务清单创建

创建可追踪的 todolist.md 文件，采用 GitHub Checklist 格式

持续更新

随项目进展更新文档与任务状态

架构规划是项目成功的基石，而完善的文档是团队协作的保障。在确定架构后，需生成两个核心文件：规格文档（spec.md）和任务清单（todolist.md）。规格文档应包含流程图、时序图和关联图等 UML 图表，清晰呈现系统架构与模块关系。

任务清单应采用 GitHub Checklist 格式，便于团队追踪进度。这些文档不仅是开发指南，也是后续维护的重要资源。

---

代码实现的最佳实践

规格确认

每次代码修改前，重新审阅 spec.md，确保符合设计意图

函数级注释

使用 JSDoc 或 Google Docstring 格式提供详细的函数注释，说明功能、参数和返回值

进度更新

完成任务后立即更新 todolist.md，反映最新状态

版本控制

使用清晰的命令式 commit 消息记录重要变更

数据存放

用户数据,包括数据库 全部放入 userdata 目录

文档存放

所有 生成的 文档 全部放入 doc 目录


代码实现阶段需遵循严格规范，确保输出高质量软件。开发前，开发者应先审阅 spec.md 文件，确保实现与设计一致。代码中必须包含函数级注释，详细说明每个函数的功能、参数和返回值。

在 Mac 环境中，完成重大任务后应立即提交 git commit，并使用清晰的命令式消息记录变更。Windows 环境同样需强调任务完成后及时更新进度状态。这种严谨的流程不仅提升代码质量，也便于团队协作与后续维护。

---

项目文档化与收尾

README.md

包含项目描述、架构说明、技术栈清单、安装与运行指南，是项目的门面与使用指南。

spec.md

详细的技术规格文档，包含所有 UML 图表、API 定义和模块关系，是开发者的参考手册。

report.md

项目开发过程的完整记录，包含所有子任务的完成情况、遇到的问题与解决方案。

todolist.md

任务清单与进度追踪，清晰展示已完成和待实现的功能，便于团队协作。

项目收尾阶段，完善的文档是确保项目可持续性的关键。README.md 作为项目门面，应包含简洁明了的项目描述、详细的安装与运行指南，以及技术栈概述。在 Mac 环境中，如需包含图形，可使用 mmdc 工具将 Mermaid 图表转换为 SVG 格式存储。

除 README 外，完整项目文档还应包括技术规格（spec.md）、开发报告（report.md）和任务清单（todolist.md）。这些文档不仅帮助新团队成员快速上手，也是项目维护和未来扩展的重要资源。良好的文档实践反映了团队的专业素养，是高质量软件开发的标志。

