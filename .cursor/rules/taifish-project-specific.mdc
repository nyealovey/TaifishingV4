---
alwaysApply: true
---

## TAIFISH_PROJECT

### Guidelines for PROJECT_SPECIFIC

#### 项目架构规范

- **分层架构**: 严格遵循MVC模式，分离模型、视图、控制器
- **服务层**: 业务逻辑封装在services目录中
- **工具类**: 通用功能封装在utils目录中
- **中间件**: 横切关注点封装在middleware目录中
- **蓝图**: 使用Flask Blueprint组织路由，按功能模块分组

#### 数据库操作规范

- **ORM优先**: 优先使用SQLAlchemy ORM，避免原生SQL
- **参数化查询**: 必须使用参数化查询，禁止字符串拼接
- **事务管理**: 使用数据库事务确保数据一致性
- **连接池**: 使用连接池管理数据库连接
- **迁移管理**: 使用Alembic管理数据库结构变更

#### 安全编码规范

- **SQL注入防护**: 所有数据库查询必须使用参数化查询
- **密码安全**: 使用bcrypt哈希密码，禁止硬编码
- **输入验证**: 使用Flask-WTF验证所有用户输入
- **CSRF保护**: 所有POST/PUT/DELETE请求必须包含CSRF令牌
- **XSS防护**: 使用Jinja2自动转义，手动转义特殊内容

#### 错误处理规范

- **异常分类**: 定义业务异常、系统异常、验证异常等类型
- **错误记录**: 使用结构化日志记录所有错误信息
- **用户友好**: 向用户显示友好的错误消息
- **错误恢复**: 实现适当的错误恢复机制
- **监控告警**: 关键错误触发告警通知

#### 代码质量规范

- **格式化**: 使用Black格式化，行长度88字符
- **类型提示**: 所有函数必须有类型注解
- **文档**: 使用Google风格docstring
- **导入排序**: 使用isort排序导入语句
- **Linting**: 使用Ruff检查代码质量

#### 测试规范

- **单元测试**: 每个服务类必须有单元测试
- **集成测试**: 关键业务流程有集成测试
- **测试数据**: 使用fixture管理测试数据
- **覆盖率**: 代码覆盖率不低于80%
- **测试隔离**: 每个测试独立运行，不依赖其他测试

#### 日志规范

- **结构化日志**: 使用JSON格式记录日志
- **日志级别**: 合理使用DEBUG、INFO、WARNING、ERROR、CRITICAL
- **敏感信息**: 不在日志中记录密码、令牌等敏感信息
- **日志轮转**: 配置日志文件轮转，防止文件过大
- **日志分析**: 实现日志聚合和分析

#### 配置管理规范

- **环境变量**: 敏感配置使用环境变量
- **配置文件**: 使用YAML或JSON配置文件
- **默认值**: 提供合理的默认配置
- **验证**: 启动时验证配置参数
- **文档**: 配置参数有详细说明

#### API设计规范

- **RESTful**: 遵循RESTful API设计原则
- **状态码**: 使用标准HTTP状态码
- **响应格式**: 使用统一的JSON响应格式
- **版本控制**: API版本通过URL路径控制
- **文档**: 使用Swagger生成API文档

#### 前端规范

- **Bootstrap**: 使用Bootstrap 5.3.2组件
- **jQuery**: 使用jQuery 3.7.1进行DOM操作
- **响应式**: 确保移动端兼容性
- **错误处理**: 前端错误处理使用try-catch
- **用户体验**: 提供加载状态和错误提示

#### 部署规范

- **容器化**: 使用Docker容器化部署
- **环境隔离**: 开发、测试、生产环境隔离
- **健康检查**: 实现应用健康检查接口
- **监控**: 配置应用监控和告警
- **备份**: 重要数据有备份策略

#### 性能优化规范

- **数据库优化**: 使用索引优化查询性能
- **缓存策略**: 合理使用Redis缓存
- **分页查询**: 大量数据使用分页查询
- **异步处理**: 耗时操作使用异步处理
- **资源限制**: 设置合理的超时和限制

#### 账户分类管理规范

- **权限规则**: 支持多种数据库类型的权限规则
- **自动分类**: 实现智能账户分类算法
- **分类分配**: 支持多对多分类分配
- **权限扫描**: 实时更新账户权限信息
- **统计报告**: 提供分类统计和分配报告

#### 定时任务规范

- **APScheduler**: 使用APScheduler替代Celery
- **任务持久化**: 任务状态存储在SQLite数据库
- **任务监控**: 实现任务执行监控和日志
- **错误处理**: 任务失败时记录错误并重试
- **资源管理**: 合理管理任务执行资源

#### 数据同步规范

- **增量同步**: 实现增量数据同步
- **冲突处理**: 处理数据同步冲突
- **回滚机制**: 同步失败时支持回滚
- **监控告警**: 同步异常时发送告警
- **性能优化**: 优化大数据量同步性能

#### 文档规范

- **README**: 项目根目录有完整README
- **API文档**: 使用Swagger生成API文档
- **代码注释**: 复杂逻辑有详细注释
- **变更日志**: 记录重要功能变更
- **部署指南**: 提供详细部署和配置指南

#### 版本控制规范

- **分支策略**: 使用Git Flow分支策略
- **提交信息**: 使用约定式提交信息格式
- **代码审查**: 所有代码变更需要代码审查
- **持续集成**: 使用CI/CD自动化测试和部署
- **标签管理**: 使用语义化版本标签

#### 监控运维规范

- **应用监控**: 监控应用性能和可用性
- **数据库监控**: 监控数据库性能和连接
- **日志监控**: 监控错误日志和异常
- **资源监控**: 监控CPU、内存、磁盘使用
- **告警通知**: 异常情况及时发送告警
