---
alwaysApply: true
---

## SECURITY

### Guidelines for PYTHON

#### SECURITY

- **SQL注入防护**: 禁止使用字符串拼接构建SQL查询，必须使用参数化查询或ORM方法
- **密码安全**: 禁止硬编码密码，使用环境变量或安全的密钥管理系统
- **输入验证**: 对所有用户输入进行严格验证和过滤，防止恶意输入
- **代码执行安全**: 禁止使用exec()、eval()等动态代码执行函数，除非有严格的安全控制
- **异常处理**: 避免使用裸露的except语句，必须记录具体错误信息
- **敏感信息**: 禁止在日志中记录密码、令牌等敏感信息
- **文件操作**: 验证文件路径，防止路径遍历攻击
- **网络请求**: 验证和过滤外部输入，使用HTTPS进行敏感数据传输
- **会话管理**: 使用安全的会话配置，设置适当的超时时间
- **CSRF防护**: 在所有状态改变操作中使用CSRF令牌

#### SQL_INJECTION_PREVENTION

- 使用SQLAlchemy ORM进行数据库操作，避免原生SQL
- 如需使用原生SQL，必须使用参数化查询
- 禁止使用f-string或%格式化构建SQL查询
- 验证和过滤所有用户输入，特别是数据库查询参数
- 使用白名单验证输入格式，拒绝不符合预期的输入

#### PASSWORD_SECURITY

- 使用bcrypt等安全的密码哈希算法
- 密码必须包含大小写字母、数字和特殊字符
- 最小密码长度8位，推荐12位以上
- 禁止在代码中硬编码密码或默认密码
- 使用环境变量存储数据库连接密码
- 定期轮换密码和API密钥

#### INPUT_VALIDATION

- 使用Flask-WTF进行表单验证
- 验证数据类型、长度、格式和范围
- 使用正则表达式验证复杂格式
- 对文件上传进行类型和大小限制
- 清理和转义HTML输出，防止XSS攻击

#### ERROR_HANDLING_SECURITY

- 记录详细错误信息用于调试，但不暴露给用户
- 使用通用错误消息避免信息泄露
- 记录安全相关事件和异常
- 避免在错误消息中暴露系统内部信息
- 实现适当的错误恢复机制

#### CODE_EXECUTION_SECURITY

- 禁止使用exec()、eval()等动态代码执行
- 如需执行用户代码，使用沙箱环境
- 验证和过滤所有可执行内容
- 限制代码执行权限和资源访问
- 记录所有代码执行操作

#### LOGGING_SECURITY

- 不在日志中记录敏感信息（密码、令牌、个人信息）
- 使用结构化日志记录安全事件
- 实现日志轮转和归档
- 保护日志文件访问权限
- 定期审查日志内容

#### FILE_OPERATION_SECURITY

- 验证文件路径，防止目录遍历攻击
- 限制文件上传类型和大小
- 使用安全的文件名生成策略
- 验证文件内容而不仅仅依赖扩展名
- 隔离用户上传的文件

#### NETWORK_SECURITY

- 使用HTTPS进行所有敏感数据传输
- 验证SSL证书有效性
- 实现适当的超时和重试机制
- 使用安全的HTTP头配置
- 限制外部网络请求的目标和频率

#### SESSION_SECURITY

- 使用安全的会话配置
- 设置适当的会话超时时间
- 使用HTTPS传输会话cookie
- 实现会话固定攻击防护
- 在用户登出时清除会话数据

#### CSRF_PROTECTION

- 在所有状态改变操作中使用CSRF令牌
- 验证CSRF令牌的有效性
- 使用SameSite cookie属性
- 实现双重提交cookie模式
- 定期轮换CSRF令牌
