version: '3.9'

# 本地开发环境配置（macOS，无代理）
# 包含：PostgreSQL、Redis、Nginx、Flask应用

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: whalefall_postgres_dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-whalefall_dev}
      - POSTGRES_USER=${POSTGRES_USER:-whalefall_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    ports:
      - "5432:5432"
    volumes:
      - ./userdata/postgres:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    networks:
      - whalefall_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-whalefall_user} -d ${POSTGRES_DB:-whalefall_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: whalefall_redis_dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./userdata/redis:/data
    networks:
      - whalefall_dev_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: whalefall_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/whalefall-docker.conf:/etc/nginx/conf.d/default.conf:ro
      - ./userdata/nginx/logs:/var/log/nginx
      - ./userdata/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - whalefall_dev_network
    depends_on:
      - whalefall
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Flask应用（开发环境）
  whalefall:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: whalefall:dev
    container_name: whalefall_app_dev
    restart: unless-stopped
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-whalefall_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-whalefall_dev}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BCRYPT_LOG_ROUNDS=${BCRYPT_LOG_ROUNDS:-12}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - APP_NAME=${APP_NAME:-鲸落}
      - APP_VERSION=${APP_VERSION:-4.0.0-dev}
      - PERMANENT_SESSION_LIFETIME=${PERMANENT_SESSION_LIFETIME:-3600}
    env_file:
      - .env
    volumes:
      - ./userdata:/app/userdata
      - ./app:/app/app:ro
      - ./migrations:/app/migrations:ro
      - ./sql:/app/sql:ro
    ports:
      - "5001:5001"
    networks:
      - whalefall_dev_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    profiles:
      - flask

networks:
  whalefall_dev_network:
    driver: bridge
