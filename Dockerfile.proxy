# 支持代理的Dockerfile
FROM ubuntu:22.04 as base
# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_APP=app.py
ENV FLASK_ENV=production

# 代理配置 - 构建时参数
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY

# 设置代理环境变量
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV NO_PROXY=${NO_PROXY}

# 设置小写代理环境变量（apt-get需要）
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
ENV no_proxy=${NO_PROXY}

# 设置工作目录
WORKDIR /app

# 安装系统依赖（使用代理）
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-distutils \
    python3.11-venv \
    python3.11-dev \
    build-essential \
    libpq-dev \
    pkg-config \
    libssl-dev \
    libffi-dev \
    curl \
    wget \
    git \
    supervisor \
    unzip \
    libaio1 \
    && rm -rf /var/lib/apt/lists/* \
    && ln -sf /usr/bin/python3.11 /usr/bin/python3 \
    && ln -sf /usr/bin/python3.11 /usr/bin/python

# 安装Oracle Instant Client
ENV ORACLE_CLIENT_VERSION=21.18.0.0.0
ENV ORACLE_HOME=/opt/oracle/instantclient_${ORACLE_CLIENT_VERSION//./_}

# 下载并安装Oracle Instant Client for Linux
RUN mkdir -p $ORACLE_HOME && \
    if [ -n "$HTTP_PROXY" ]; then \
        wget -q -e use_proxy=yes -e http_proxy="$HTTP_PROXY" https://download.oracle.com/otn_software/linux/instantclient/2118000/instantclient-basic-linux.x64-${ORACLE_CLIENT_VERSION}dbru.zip -O /tmp/instantclient-basic.zip && \
        wget -q -e use_proxy=yes -e http_proxy="$HTTP_PROXY" https://download.oracle.com/otn_software/linux/instantclient/2118000/instantclient-sdk-linux.x64-${ORACLE_CLIENT_VERSION}dbru.zip -O /tmp/instantclient-sdk.zip; \
    else \
        wget -q https://download.oracle.com/otn_software/linux/instantclient/2118000/instantclient-basic-linux.x64-${ORACLE_CLIENT_VERSION}dbru.zip -O /tmp/instantclient-basic.zip && \
        wget -q https://download.oracle.com/otn_software/linux/instantclient/2118000/instantclient-sdk-linux.x64-${ORACLE_CLIENT_VERSION}dbru.zip -O /tmp/instantclient-sdk.zip; \
    fi && \
    unzip -o /tmp/instantclient-basic.zip -d /opt/oracle && \
    unzip -o /tmp/instantclient-sdk.zip -d /opt/oracle && \
    rm /tmp/instantclient-basic.zip /tmp/instantclient-sdk.zip && \
    echo "$ORACLE_HOME" > /etc/ld.so.conf.d/oracle-instantclient.conf && \
    ldconfig

# 设置Oracle环境变量
ENV LD_LIBRARY_PATH=$ORACLE_HOME:$LD_LIBRARY_PATH
ENV PATH=$ORACLE_HOME:$PATH

# 安装uv（在root用户下安装）
RUN if [ -n "$HTTP_PROXY" ]; then \
        curl -LsSf --proxy "$HTTP_PROXY" https://astral.sh/uv/install.sh | sh; \
    else \
        curl -LsSf https://astral.sh/uv/install.sh | sh; \
    fi
ENV PATH="/root/.local/bin:$PATH"

# 复制uv到系统目录
RUN cp /root/.local/bin/uv /usr/local/bin/uv && \
    chmod +x /usr/local/bin/uv

# 创建虚拟环境
RUN uv venv /app/.venv
ENV PATH="/app/.venv/bin:$PATH"

# 配置uv代理（如果设置了代理）
# uv使用环境变量进行代理配置，不需要config命令

# 复制项目配置文件
COPY pyproject.toml uv.lock /app/

# 复制README.md文件（pyproject.toml需要）
COPY README.md /app/

# 安装Python依赖（使用代理）
RUN uv sync --frozen --no-dev

# 复制应用代码
COPY . /app/

# 创建必要的目录
RUN mkdir -p /app/userdata/logs /app/userdata/exports /app/userdata/backups /app/userdata/uploads

# 创建supervisor配置目录
RUN mkdir -p /etc/supervisor/conf.d

# 设置权限
RUN chmod -R 755 /app/userdata

# 创建Gunicorn配置文件
RUN cat > /app/gunicorn.conf.py << 'EOF'
# Gunicorn配置文件
import multiprocessing
import os

# 服务器套接字
bind = "0.0.0.0:5001"
backlog = 2048

# 工作进程
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = "gevent"
worker_connections = 1000
timeout = 30
keepalive = 2

# 重启
max_requests = 1000
max_requests_jitter = 50
preload_app = True

# 日志
accesslog = "/app/userdata/logs/gunicorn_access.log"
errorlog = "/app/userdata/logs/gunicorn_error.log"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# 进程名称
proc_name = "whalefall"

# 用户和组
user = "root"
group = "root"

# 环境变量
raw_env = [
    "FLASK_APP=app.py",
    "FLASK_ENV=production",
]

# 安全
limit_request_line = 4094
limit_request_fields = 100
limit_request_field_size = 8190
EOF

# 切换到root用户创建Supervisor配置文件
USER root
RUN cat > /etc/supervisor/conf.d/whalefall.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/

[program:whalefall]
command=/app/.venv/bin/gunicorn --config /app/gunicorn.conf.py app:app
directory=/app
user=root
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/userdata/logs/whalefall.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/app/userdata/logs/whalefall_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10

[program:whalefall-scheduler]
command=/app/.venv/bin/python -c "from app.scheduler import start_scheduler; start_scheduler()"
directory=/app
user=root
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/userdata/logs/scheduler.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stderr_logfile=/app/userdata/logs/scheduler_error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=10
EOF

# 暴露端口
EXPOSE 5001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# 开发环境阶段
FROM base as development

# 重新设置代理环境变量（继承自base阶段）
ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}
ENV NO_PROXY=${NO_PROXY}
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
ENV no_proxy=${NO_PROXY}

# 安装开发依赖
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 开发环境启动命令
CMD ["python", "app.py"]

# 生产环境阶段
FROM base as production

# 切换到root用户运行supervisor
USER root

# 启动命令 - 使用Supervisor管理多个进程
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
