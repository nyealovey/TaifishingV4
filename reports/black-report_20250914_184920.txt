错误: would reformat /Users/shiyijiufei/TaifishingV4/app/routes/account_classification.py
would reformat /Users/shiyijiufei/TaifishingV4/app/routes/instances.py

Oh no! 💥 💔 💥
2 files would be reformatted, 72 files would be left unchanged.


标准输出:
--- /Users/shiyijiufei/TaifishingV4/app/routes/account_classification.py	2025-09-14 03:29:20.536745+00:00
+++ /Users/shiyijiufei/TaifishingV4/app/routes/account_classification.py	2025-09-14 10:49:21.673880+00:00
@@ -489,16 +489,16 @@
     try:
         data = request.get_json()
 
         service = AccountClassificationService()
         result = service.classify_account(
-            data["account_id"], 
-            data["classification_id"], 
-            "manual", 
-            current_user.id, 
+            data["account_id"],
+            data["classification_id"],
+            "manual",
+            current_user.id,
             None,  # notes
-            None   # batch_id (手动分配不需要批次ID)
+            None,  # batch_id (手动分配不需要批次ID)
         )
 
         return jsonify({"success": True, "assignment_id": result})
 
     except Exception as e:
@@ -688,115 +688,112 @@
 @login_required
 @view_required
 def api_get_batch_matches(batch_id: str) -> "Response":
     """获取批次匹配详情"""
     try:
-        from app.models.account_classification import AccountClassificationAssignment, AccountClassification, ClassificationRule
+        from app.models.account_classification import (
+            AccountClassificationAssignment,
+            AccountClassification,
+            ClassificationRule,
+        )
         from app.models.account import Account
         from app.models.instance import Instance
         import json
-        
+
         # 获取批次信息
         from app.models.classification_batch import ClassificationBatch
+
         batch = ClassificationBatch.query.filter_by(batch_id=batch_id).first()
         if not batch:
             return jsonify({"success": False, "message": "批次不存在"})
-        
+
         # 获取该批次的所有匹配记录
-        assignments = db.session.query(
-            AccountClassificationAssignment,
-            Account,
-            Instance,
-            AccountClassification
-        ).join(
-            Account, AccountClassificationAssignment.account_id == Account.id
-        ).join(
-            Instance, Account.instance_id == Instance.id
-        ).join(
-            AccountClassification, AccountClassificationAssignment.classification_id == AccountClassification.id
-        ).filter(
-            AccountClassificationAssignment.batch_id == batch_id,
-            AccountClassificationAssignment.is_active == True  # 只显示正确匹配的记录
-        ).all()
+        assignments = (
+            db.session.query(AccountClassificationAssignment, Account, Instance, AccountClassification)
+            .join(Account, AccountClassificationAssignment.account_id == Account.id)
+            .join(Instance, Account.instance_id == Instance.id)
+            .join(AccountClassification, AccountClassificationAssignment.classification_id == AccountClassification.id)
+            .filter(
+                AccountClassificationAssignment.batch_id == batch_id,
+                AccountClassificationAssignment.is_active == True,  # 只显示正确匹配的记录
+            )
+            .all()
+        )
 
         matches = []
         for assignment, account, instance, classification in assignments:
             # 获取该分类的第一个规则（用于显示）
-            rule = ClassificationRule.query.filter_by(
-                classification_id=classification.id,
-                is_active=True
-            ).first()
+            rule = ClassificationRule.query.filter_by(classification_id=classification.id, is_active=True).first()
             # 解析账户权限信息
             account_permissions = []
             if account.permissions:
                 try:
                     permissions_data = json.loads(account.permissions)
                     if isinstance(permissions_data, dict):
                         for category, perms in permissions_data.items():
                             if isinstance(perms, list):
                                 for perm in perms:
-                                    if isinstance(perm, dict) and 'name' in perm:
-                                        account_permissions.append({
-                                            "category": category,
-                                            "name": perm['name'],
-                                            "description": perm.get('description', ''),
-                                            "granted": perm.get('granted', False)
-                                        })
+                                    if isinstance(perm, dict) and "name" in perm:
+                                        account_permissions.append(
+                                            {
+                                                "category": category,
+                                                "name": perm["name"],
+                                                "description": perm.get("description", ""),
+                                                "granted": perm.get("granted", False),
+                                            }
+                                        )
                                     elif isinstance(perm, str):
-                                        account_permissions.append({
-                                            "category": category,
-                                            "name": perm,
-                                            "description": "",
-                                            "granted": True
-                                        })
+                                        account_permissions.append(
+                                            {"category": category, "name": perm, "description": "", "granted": True}
+                                        )
                 except (json.JSONDecodeError, TypeError):
                     account_permissions = []
 
             # 解析规则表达式，获取匹配的权限
             matched_permissions = []
             if rule:
                 try:
                     rule_expression = json.loads(rule.rule_expression)
-                    if isinstance(rule_expression, dict) and 'permissions' in rule_expression:
-                        rule_perms = rule_expression['permissions']
+                    if isinstance(rule_expression, dict) and "permissions" in rule_expression:
+                        rule_perms = rule_expression["permissions"]
                         if isinstance(rule_perms, list):
                             for perm in rule_perms:
-                                if isinstance(perm, dict) and 'name' in perm:
-                                    matched_permissions.append({
-                                        "name": perm['name'],
-                                        "description": perm.get('description', ''),
-                                        "category": perm.get('category', '')
-                                    })
+                                if isinstance(perm, dict) and "name" in perm:
+                                    matched_permissions.append(
+                                        {
+                                            "name": perm["name"],
+                                            "description": perm.get("description", ""),
+                                            "category": perm.get("category", ""),
+                                        }
+                                    )
                                 elif isinstance(perm, str):
-                                    matched_permissions.append({
-                                        "name": perm,
-                                        "description": "",
-                                        "category": ""
-                                    })
+                                    matched_permissions.append({"name": perm, "description": "", "category": ""})
                 except (json.JSONDecodeError, TypeError):
                     matched_permissions = []
 
-            matches.append({
-                "assignment_id": assignment.id,
-                "account_id": account.id,
-                "account_name": account.username,
-                "account_host": account.host,
-                "instance_id": instance.id,
-                "instance_name": instance.name,
-                "instance_type": instance.db_type,
-                "classification_id": classification.id,
-                "classification_name": classification.name,
-                "rule_id": rule.id if rule else None,
-                "rule_name": rule.rule_name if rule else "无规则",
-                "rule_description": rule.rule_expression if rule else "无规则表达式",
-                "matched_at": batch.started_at.isoformat() if batch.started_at else None,
-                "confidence": getattr(assignment, 'confidence_score', None),
-                "account_permissions": account_permissions,
-                "matched_permissions": matched_permissions,
-                "is_superuser": account.is_superuser,
-                "can_grant": account.can_grant
-            })
+            matches.append(
+                {
+                    "assignment_id": assignment.id,
+                    "account_id": account.id,
+                    "account_name": account.username,
+                    "account_host": account.host,
+                    "instance_id": instance.id,
+                    "instance_name": instance.name,
+                    "instance_type": instance.db_type,
+                    "classification_id": classification.id,
+                    "classification_name": classification.name,
+                    "rule_id": rule.id if rule else None,
+                    "rule_name": rule.rule_name if rule else "无规则",
+                    "rule_description": rule.rule_expression if rule else "无规则表达式",
+                    "matched_at": batch.started_at.isoformat() if batch.started_at else None,
+                    "confidence": getattr(assignment, "confidence_score", None),
+                    "account_permissions": account_permissions,
+                    "matched_permissions": matched_permissions,
+                    "is_superuser": account.is_superuser,
+                    "can_grant": account.can_grant,
+                }
+            )
 
         return jsonify({"success": True, "matches": matches})
 
     except Exception as e:
         log_error("获取批次匹配详情失败", module="account_classification", batch_id=batch_id, error=str(e))
--- /Users/shiyijiufei/TaifishingV4/app/routes/instances.py	2025-09-14 03:34:45.800524+00:00
+++ /Users/shiyijiufei/TaifishingV4/app/routes/instances.py	2025-09-14 10:49:21.820237+00:00
@@ -1398,10 +1398,11 @@
     try:
         # 直接从本地数据库获取权限信息
         permissions = None
         if account.permissions:
             import json
+
             try:
                 permissions = json.loads(account.permissions)
             except json.JSONDecodeError:
                 permissions = {"error": "权限数据格式错误"}
         else:
