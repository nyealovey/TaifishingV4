错误: 

标准输出:
app/utils/safe_query_builder.py: note: In member "__init__" of class "SafeQueryBuilder":
app/utils/safe_query_builder.py:12:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/safe_query_builder.py:12:5: note: Use "-> None" if function does not return a value
app/utils/safe_query_builder.py: note: In function "build_safe_filter_conditions":
app/utils/safe_query_builder.py:97:15: error: Call to untyped function
"SafeQueryBuilder" in typed context  [no-untyped-call]
        builder = SafeQueryBuilder()
                  ^~~~~~~~~~~~~~~~~~
app/utils/logging_config.py: note: In class "LogConfig":
app/utils/logging_config.py:65:48: error: Incompatible types in assignment
(expression has type "None", variable has type "dict[LogType, dict[str, Any]]") 
[assignment]
        log_types: dict[LogType, dict[str, Any]] = None
                                                   ^~~~
app/utils/logging_config.py: note: In member "__post_init__" of class "LogConfig":
app/utils/logging_config.py:67:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
app/utils/logging_config.py:67:5: note: Use "-> None" if function does not return a value
app/utils/logging_config.py:69:13: error: Statement is unreachable 
[unreachable]
                self.log_types = {
                ^
app/utils/logging_config.py: note: In member "__init__" of class "LoggingConfigManager":
app/utils/logging_config.py:89:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/logging_config.py:89:5: note: Use "-> None" if function does not return a value
app/utils/logging_config.py: note: At top level:
app/utils/logging_config.py:172:18: error: Call to untyped function
"LoggingConfigManager" in typed context  [no-untyped-call]
    config_manager = LoggingConfigManager()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/utils/security.py: note: In function "sanitize_input":
app/utils/security.py:35:5: error: Returning Any from function declared to
return "str"  [no-any-return]
        return value.strip()
        ^~~~~~~~~~~~~~~~~~~~
app/utils/security.py: note: In function "sanitize_form_data":
app/utils/security.py:155:30: error: Incompatible types in assignment
(expression has type "int | float", target has type "str")  [assignment]
                sanitized[key] = value
                                 ^~~~~
app/services/database_filter_manager.py: note: In member "get_filter_rules" of class "DatabaseFilterManager":
app/services/database_filter_manager.py:224:47: error: Incompatible default for
argument "db_type" (default has type "None", argument has type "str") 
[assignment]
        def get_filter_rules(self, db_type: str = None) -> dict[str, Any]:
                                                  ^~~~
app/services/database_filter_manager.py:224:47: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_filter_manager.py:224:47: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/database_filter_manager.py: note: In member "get_filter_statistics" of class "DatabaseFilterManager":
app/services/database_filter_manager.py:290:52: error: Incompatible default for
argument "db_type" (default has type "None", argument has type "str") 
[assignment]
    ...  def get_filter_statistics(self, db_type: str = None) -> dict[str, An...
                                                        ^~~~
app/services/database_filter_manager.py:290:52: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_filter_manager.py:290:52: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/password_manager.py: note: In member "__init__" of class "PasswordManager":
app/utils/password_manager.py:15:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/password_manager.py:15:5: note: Use "-> None" if function does not return a value
app/utils/password_manager.py:16:20: error: Call to untyped function
"_get_or_create_key" in typed context  [no-untyped-call]
            self.key = self._get_or_create_key()
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/password_manager.py: note: In member "_get_or_create_key" of class "PasswordManager":
app/utils/password_manager.py:19:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _get_or_create_key(self):
        ^
app/utils/password_manager.py:24:19: error: Incompatible types in assignment
(expression has type "bytes", variable has type "str | None")  [assignment]
                key = Fernet.generate_key()
                      ^~~~~~~~~~~~~~~~~~~~~
app/utils/password_manager.py:26:48: error: Item "str" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
                print(f"   生成的临时密钥: {key.decode()}")
                                                   ^
app/utils/password_manager.py:26:48: error: Item "None" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
                print(f"   生成的临时密钥: {key.decode()}")
                                                   ^
app/utils/password_manager.py:27:80: error: Item "str" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
    ... print(f"   请设置环境变量: export PASSWORD_ENCRYPTION_KEY='{key.decode()}'")
                                                                           ^~
app/utils/password_manager.py:27:80: error: Item "None" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
    ... print(f"   请设置环境变量: export PASSWORD_ENCRYPTION_KEY='{key.decode()}'")
                                                                           ^~
app/utils/password_manager.py:29:19: error: Incompatible types in assignment
(expression has type "bytes", variable has type "str | None")  [assignment]
                key = key.encode()
                      ^~~~~~~~~~~~
app/utils/password_manager.py: note: At top level:
app/utils/password_manager.py:96:20: error: Call to untyped function
"PasswordManager" in typed context  [no-untyped-call]
    password_manager = PasswordManager()
                       ^~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In member "__init__" of class "RateLimiter":
app/utils/rate_limiter.py:18:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(self, redis_client=None):
        ^
app/utils/rate_limiter.py: note: In member "is_allowed" of class "RateLimiter":
app/utils/rate_limiter.py:30:96: error: Function "builtins.any" is not valid as
a type  [valid-type]
    ...ifier: str, endpoint: str, limit: int, window: int) -> dict[str, any]:
                                                                        ^
app/utils/rate_limiter.py:30:96: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "_check_redis" of class "RateLimiter":
app/utils/rate_limiter.py:64:20: error: Function "builtins.any" is not valid as
a type  [valid-type]
        ) -> dict[str, any]:
                       ^
app/utils/rate_limiter.py:64:20: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "_check_memory" of class "RateLimiter":
app/utils/rate_limiter.py:107:20: error: Function "builtins.any" is not valid
as a type  [valid-type]
        ) -> dict[str, any]:
                       ^
app/utils/rate_limiter.py:107:20: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "reset" of class "RateLimiter":
app/utils/rate_limiter.py:146:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def reset(self, identifier: str, endpoint: str):
        ^
app/utils/rate_limiter.py: note: At top level:
app/utils/rate_limiter.py:165:16: error: Call to untyped function "RateLimiter"
in typed context  [no-untyped-call]
    rate_limiter = RateLimiter()
                   ^~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "rate_limit":
app/utils/rate_limiter.py:168:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def rate_limit(
    ^
app/utils/rate_limiter.py:172:22: error: Missing type parameters for generic
type "Callable"  [type-arg]
        identifier_func: Callable | None = None,
                         ^
app/utils/rate_limiter.py:184:5: error: Function is missing a type annotation 
[no-untyped-def]
        def rate_limit_decorator(f):
        ^
app/utils/rate_limiter.py:186:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/rate_limiter.py: note: At top level:
app/utils/rate_limiter.py:191:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
                    from flask_login import current_user
    ^
app/utils/rate_limiter.py: note: In function "rate_limit":
app/utils/rate_limiter.py:201:17: error: Statement is unreachable 
[unreachable]
                    response = jsonify(
                    ^
app/utils/rate_limiter.py: note: In function "login_rate_limit":
app/utils/rate_limiter.py:229:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
    ^
app/utils/rate_limiter.py:229:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
    ^
app/utils/rate_limiter.py:229:49: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
                                                    ^~~~
app/utils/rate_limiter.py:229:49: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:229:49: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:229:69: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...login_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:234:9: error: Statement is unreachable  [unreachable]
            limit = SystemConstants.LOGIN_RATE_LIMIT
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py:236:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.LOGIN_RATE_WINDOW
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "api_rate_limit":
app/utils/rate_limiter.py:242:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
    ^
app/utils/rate_limiter.py:242:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
    ^
app/utils/rate_limiter.py:242:47: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
                                                  ^~~~
app/utils/rate_limiter.py:242:47: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:242:47: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:242:67: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...f api_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:247:9: error: Statement is unreachable  [unreachable]
            limit = SystemConstants.RATE_LIMIT_REQUESTS
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py:249:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.RATE_LIMIT_WINDOW
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "password_reset_rate_limit":
app/utils/rate_limiter.py:255:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def password_reset_rate_limit(func=None, *, limit: int = None, window:...
    ^
app/utils/rate_limiter.py:255:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def password_reset_rate_limit(func=None, *, limit: int = None, window:...
    ^
app/utils/rate_limiter.py:255:58: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    ...word_reset_rate_limit(func=None, *, limit: int = None, window: int = N...
                                                        ^~~~
app/utils/rate_limiter.py:255:58: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:255:58: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:255:78: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...reset_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:259:9: error: Statement is unreachable  [unreachable]
            limit = 3  # 密码重置限制
            ^~~~~~~~~
app/utils/rate_limiter.py:261:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.SESSION_LIFETIME  # 1小时
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "registration_rate_limit":
app/utils/rate_limiter.py:268:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def registration_rate_limit(func=None, *, limit: int = None, window: i...
    ^
app/utils/rate_limiter.py:268:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def registration_rate_limit(func=None, *, limit: int = None, window: i...
    ^
app/utils/rate_limiter.py:268:56: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    ...gistration_rate_limit(func=None, *, limit: int = None, window: int = N...
                                                        ^~~~
app/utils/rate_limiter.py:268:56: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:268:56: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:268:76: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...ation_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:272:9: error: Statement is unreachable  [unreachable]
            limit = 3  # 注册限制
            ^~~~~~~~~
app/utils/rate_limiter.py:274:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.SESSION_LIFETIME  # 1小时
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "task_execution_rate_limit":
app/utils/rate_limiter.py:281:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def task_execution_rate_limit(func=None, *, limit: int = 10, window: i...
    ^
app/utils/rate_limiter.py:281:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def task_execution_rate_limit(func=None, *, limit: int = 10, window: i...
    ^
app/utils/rate_limiter.py: note: In function "init_rate_limiter":
app/utils/rate_limiter.py:289:1: error: Function is missing a type annotation 
[no-untyped-def]
    def init_rate_limiter(redis_client=None):
    ^
app/utils/rate_limiter.py:292:20: error: Call to untyped function "RateLimiter"
in typed context  [no-untyped-call]
        rate_limiter = RateLimiter(redis_client)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "get_rate_limit_status":
app/utils/rate_limiter.py:297:97: error: Function "builtins.any" is not valid
as a type  [valid-type]
    ...ifier: str, endpoint: str, limit: int, window: int) -> dict[str, any]:
                                                                        ^
app/utils/rate_limiter.py:297:97: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In function "cleanup_rate_limits":
app/utils/rate_limiter.py:303:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def cleanup_rate_limits():
    ^
app/utils/rate_limiter.py:303:1: note: Use "-> None" if function does not return a value
app/utils/error_handler.py: note: In function "register_error_handlers":
app/utils/error_handler.py:14:1: error: Function is missing a type annotation 
[no-untyped-def]
    def register_error_handlers(app):
    ^
app/utils/error_handler.py:23:5: error: Function is missing a type annotation 
[no-untyped-def]
        def bad_request(error):
        ^
app/utils/error_handler.py:25:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 400, "请求参数错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:28:5: error: Function is missing a type annotation 
[no-untyped-def]
        def unauthorized(error):
        ^
app/utils/error_handler.py:30:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 401, "未授权访问")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:33:5: error: Function is missing a type annotation 
[no-untyped-def]
        def forbidden(error):
        ^
app/utils/error_handler.py:35:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 403, "禁止访问")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:38:5: error: Function is missing a type annotation 
[no-untyped-def]
        def not_found(error):
        ^
app/utils/error_handler.py:40:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 404, "页面不存在")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:43:5: error: Function is missing a type annotation 
[no-untyped-def]
        def too_many_requests(error):
        ^
app/utils/error_handler.py:45:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 429, "请求过于频繁")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:48:5: error: Function is missing a type annotation 
[no-untyped-def]
        def internal_server_error(error):
        ^
app/utils/error_handler.py:50:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "服务器内部错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:53:5: error: Function is missing a type annotation 
[no-untyped-def]
        def handle_sqlalchemy_error(error):
        ^
app/utils/error_handler.py:62:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 503, "数据库连接失败，请稍后重试")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:64:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 400, "数据约束错误，请检查输入数据")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:66:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 504, "数据库操作超时，请稍后重试")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:67:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "数据库操作错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:70:5: error: Function is missing a type annotation 
[no-untyped-def]
        def handle_generic_error(error):
        ^
app/utils/error_handler.py:74:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "系统错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "_handle_error":
app/utils/error_handler.py:77:1: error: Function is missing a type annotation 
[no-untyped-def]
    def _handle_error(error, status_code, message):
    ^
app/utils/error_handler.py:90:5: error: Call to untyped function "_log_error"
in typed context  [no-untyped-call]
        _log_error(error, status_code)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:99:34: error: Call to untyped function
"_get_timestamp" in typed context  [no-untyped-call]
                        "timestamp": _get_timestamp(),
                                     ^~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "_log_error":
app/utils/error_handler.py:110:1: error: Function is missing a type annotation 
[no-untyped-def]
    def _log_error(error, status_code):
    ^
app/utils/error_handler.py: note: In function "_get_timestamp":
app/utils/error_handler.py:140:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def _get_timestamp():
    ^
app/utils/error_handler.py: note: In function "safe_error_message":
app/utils/error_handler.py:151:1: error: Function is missing a type annotation 
[no-untyped-def]
    def safe_error_message(error):
    ^
app/utils/error_handler.py: note: In function "validate_error_response":
app/utils/error_handler.py:169:1: error: Function is missing a type annotation 
[no-untyped-def]
    def validate_error_response(response_data):
    ^
app/utils/error_handler.py: note: In function "handle_security_error":
app/utils/error_handler.py:195:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_security_error(error):
    ^
app/utils/error_handler.py:206:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 403, "安全验证失败")
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "handle_validation_error":
app/utils/error_handler.py:209:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_validation_error(error):
    ^
app/utils/error_handler.py:220:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 400, str(error))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "handle_business_logic_error":
app/utils/error_handler.py:223:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_business_logic_error(error):
    ^
app/utils/error_handler.py:234:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 422, str(error))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py:8:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user
    ^
app/utils/decorators.py: note: In function "admin_required":
app/utils/decorators.py:11:1: error: Function is missing a type annotation 
[no-untyped-def]
    def admin_required(f):
    ^
app/utils/decorators.py:23:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "scheduler_manage_required":
app/utils/decorators.py:45:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduler_manage_required(f):
    ^
app/utils/decorators.py:58:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "scheduler_view_required":
app/utils/decorators.py:83:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduler_view_required(f):
    ^
app/utils/decorators.py:96:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "login_required":
app/utils/decorators.py:110:1: error: Function is missing a type annotation 
[no-untyped-def]
    def login_required(f):
    ^
app/utils/decorators.py:122:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "login_required_json":
app/utils/decorators.py:136:1: error: Function is missing a type annotation 
[no-untyped-def]
    def login_required_json(f):
    ^
app/utils/decorators.py:148:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "rate_limit":
app/utils/decorators.py:157:1: error: Function is missing a type annotation 
[no-untyped-def]
    def rate_limit(requests_per_minute=60):
    ^
app/utils/decorators.py:168:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:170:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py: note: In function "validate_json":
app/utils/decorators.py:180:1: error: Function is missing a type annotation 
[no-untyped-def]
    def validate_json(required_fields=None):
    ^
app/utils/decorators.py:191:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:193:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py: note: In function "permission_required":
app/utils/decorators.py:222:1: error: Function is missing a type annotation 
[no-untyped-def]
    def permission_required(permission):
    ^
app/utils/decorators.py:233:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:235:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py:245:20: error: Call to untyped function
"has_permission" in typed context  [no-untyped-call]
                if not has_permission(current_user, permission):
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "has_permission":
app/utils/decorators.py:260:1: error: Function is missing a type annotation 
[no-untyped-def]
    def has_permission(user, permission):
    ^
app/utils/decorators.py: note: In function "view_required":
app/utils/decorators.py:288:1: error: Function is missing a type annotation 
[no-untyped-def]
    def view_required(f):
    ^
app/utils/decorators.py:290:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("view")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "create_required":
app/utils/decorators.py:293:1: error: Function is missing a type annotation 
[no-untyped-def]
    def create_required(f):
    ^
app/utils/decorators.py:295:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("create")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "update_required":
app/utils/decorators.py:298:1: error: Function is missing a type annotation 
[no-untyped-def]
    def update_required(f):
    ^
app/utils/decorators.py:300:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("update")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "delete_required":
app/utils/decorators.py:303:1: error: Function is missing a type annotation 
[no-untyped-def]
    def delete_required(f):
    ^
app/utils/decorators.py:305:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("delete")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/api_response.py: note: In member "success" of class "APIResponse":
app/utils/api_response.py:12:23: error: Name "Any" is not defined 
[name-defined]
        def success(data: "Any" = None, message: str = "操作成功") -> "Respons...
                          ^
app/utils/api_response.py:12:23: note: Did you forget to import it from "typing"? (Suggestion: "from typing import Any")
app/utils/api_response.py:12:71: error: Name "Response" is not defined 
[name-defined]
    ... def success(data: "Any" = None, message: str = "操作成功") -> "Response":
                                                                          ^
app/utils/api_response.py: note: In member "error" of class "APIResponse":
app/utils/api_response.py:29:69: error: Name "Any" is not defined 
[name-defined]
    ...age: str = "操作失败", code: int = 400, data: "Any" = None) -> "Response":
                                                         ^
app/utils/api_response.py:29:69: note: Did you forget to import it from "typing"? (Suggestion: "from typing import Any")
app/utils/api_response.py:29:86: error: Name "Response" is not defined 
[name-defined]
    ...age: str = "操作失败", code: int = 400, data: "Any" = None) -> "Response":
                                                                          ^
app/utils/api_response.py: note: In function "success_response":
app/utils/api_response.py:48:1: error: Function is missing a type annotation 
[no-untyped-def]
    def success_response(data=None, message="操作成功"):
    ^
app/utils/api_response.py: note: In function "error_response":
app/utils/api_response.py:53:1: error: Function is missing a type annotation 
[no-untyped-def]
    def error_response(message="操作失败", code=400, data=None):
    ^
app/routes/admin.py:31: error: Unused "type: ignore" comment  [unused-ignore]
                return APIResponse.error("请先登录", code=401)  # type: ignore
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/admin.py:34: error: Unused "type: ignore" comment  [unused-ignore]
                return APIResponse.error("需要管理员权限", code=403)  # type: ign...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "__init__" of class "TaskScheduler":
app/scheduler.py:21:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(self, app=None):
        ^
app/scheduler.py:24:9: error: Call to untyped function "_setup_scheduler" in
typed context  [no-untyped-call]
            self._setup_scheduler()
            ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "_setup_scheduler" of class "TaskScheduler":
app/scheduler.py:26:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def _setup_scheduler(self):
        ^
app/scheduler.py:26:5: note: Use "-> None" if function does not return a value
app/scheduler.py: note: In member "_job_executed" of class "TaskScheduler":
app/scheduler.py:50:5: error: Function is missing a type annotation 
[no-untyped-def]
        def _job_executed(self, event):
        ^
app/scheduler.py: note: In member "_job_error" of class "TaskScheduler":
app/scheduler.py:54:5: error: Function is missing a type annotation 
[no-untyped-def]
        def _job_error(self, event):
        ^
app/scheduler.py: note: In member "start" of class "TaskScheduler":
app/scheduler.py:58:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def start(self):
        ^
app/scheduler.py:58:5: note: Use "-> None" if function does not return a value
app/scheduler.py:60:16: error: Item "None" of "Any | None" has no attribute
"running"  [union-attr]
            if not self.scheduler.running:
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:61:13: error: Item "None" of "Any | None" has no attribute
"start"  [union-attr]
                self.scheduler.start()
                ^~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "stop" of class "TaskScheduler":
app/scheduler.py:64:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def stop(self):
        ^
app/scheduler.py:64:5: note: Use "-> None" if function does not return a value
app/scheduler.py:66:12: error: Item "None" of "Any | None" has no attribute
"running"  [union-attr]
            if self.scheduler.running:
               ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:67:13: error: Item "None" of "Any | None" has no attribute
"shutdown"  [union-attr]
                self.scheduler.shutdown()
                ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "add_job" of class "TaskScheduler":
app/scheduler.py:70:5: error: Function is missing a type annotation 
[no-untyped-def]
        def add_job(self, func, trigger, **kwargs):
        ^
app/scheduler.py:72:16: error: Item "None" of "Any | None" has no attribute
"add_job"  [union-attr]
            return self.scheduler.add_job(func, trigger, **kwargs)
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "remove_job" of class "TaskScheduler":
app/scheduler.py:74:5: error: Function is missing a type annotation 
[no-untyped-def]
        def remove_job(self, job_id):
        ^
app/scheduler.py:77:13: error: Item "None" of "Any | None" has no attribute
"remove_job"  [union-attr]
                self.scheduler.remove_job(job_id)
                ^~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "get_jobs" of class "TaskScheduler":
app/scheduler.py:82:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def get_jobs(self):
        ^
app/scheduler.py:84:16: error: Item "None" of "Any | None" has no attribute
"get_jobs"  [union-attr]
            return self.scheduler.get_jobs()
                   ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "get_job" of class "TaskScheduler":
app/scheduler.py:86:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_job(self, job_id):
        ^
app/scheduler.py:88:16: error: Item "None" of "Any | None" has no attribute
"get_job"  [union-attr]
            return self.scheduler.get_job(job_id)
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "pause_job" of class "TaskScheduler":
app/scheduler.py:90:5: error: Function is missing a type annotation 
[no-untyped-def]
        def pause_job(self, job_id):
        ^
app/scheduler.py:92:9: error: Item "None" of "Any | None" has no attribute
"pause_job"  [union-attr]
            self.scheduler.pause_job(job_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "resume_job" of class "TaskScheduler":
app/scheduler.py:95:5: error: Function is missing a type annotation 
[no-untyped-def]
        def resume_job(self, job_id):
        ^
app/scheduler.py:97:9: error: Item "None" of "Any | None" has no attribute
"resume_job"  [union-attr]
            self.scheduler.resume_job(job_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: At top level:
app/scheduler.py:102:13: error: Call to untyped function "TaskScheduler" in
typed context  [no-untyped-call]
    scheduler = TaskScheduler()
                ^~~~~~~~~~~~~~~
app/scheduler.py: note: In function "get_scheduler":
app/scheduler.py:106:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def get_scheduler():
    ^
app/scheduler.py: note: In function "init_scheduler":
app/scheduler.py:111:1: error: Function is missing a type annotation 
[no-untyped-def]
    def init_scheduler(app):
    ^
app/scheduler.py:114:5: error: Call to untyped function "start" in typed
context  [no-untyped-call]
        scheduler.start()
        ^~~~~~~~~~~~~~~~~
app/scheduler.py:117:5: error: Call to untyped function "_add_default_jobs" in
typed context  [no-untyped-call]
        _add_default_jobs()
        ^~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In function "_add_default_jobs":
app/scheduler.py:122:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _add_default_jobs():
    ^
app/scheduler.py:122:1: note: Use "-> None" if function does not return a value
app/scheduler.py:129:21: error: Call to untyped function "get_jobs" in typed
context  [no-untyped-call]
        existing_jobs = scheduler.get_jobs()
                        ^~~~~~~~~~~~~~~~~~~~
app/scheduler.py:163:13: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
                scheduler.add_job(func, trigger_type, id=task_id, name=tas...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/scheduler.py:170:9: error: Call to untyped function
"_add_hardcoded_default_jobs" in typed context  [no-untyped-call]
            _add_hardcoded_default_jobs()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:174:9: error: Call to untyped function
"_add_hardcoded_default_jobs" in typed context  [no-untyped-call]
            _add_hardcoded_default_jobs()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In function "_add_hardcoded_default_jobs":
app/scheduler.py:179:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _add_hardcoded_default_jobs():
    ^
app/scheduler.py:179:1: note: Use "-> None" if function does not return a value
app/scheduler.py:184:5: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
        scheduler.add_job(
        ^
app/scheduler.py:189:5: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
        scheduler.add_job(sync_accounts, "interval", minutes=30, id="sync_...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/scheduler.py: note: In function "scheduled_task":
app/scheduler.py:193:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduled_task(job_id=None, name=None):
    ^
app/scheduler.py:196:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(func):
        ^
app/utils/enhanced_logger.py:12:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user
    ^
app/utils/enhanced_logger.py:78: error: Unused "type: ignore" comment 
[unused-ignore]
                Log.log_operation(  # type: ignore
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/enhanced_logger.py:302: error: Unused "type: ignore" comment 
[unused-ignore]
            log_entry = Log(  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In member "_generate_key" of class "CacheManager":
app/utils/cache_manager.py:24:5: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def _generate_key(self, prefix: str, *args, **kwargs) -> str:
        ^
app/utils/cache_manager.py: note: In member "get_or_set" of class "CacheManager":
app/utils/cache_manager.py:71:5: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def get_or_set(self, key: str, func: Callable, timeout: int | None...
        ^
app/utils/cache_manager.py:71:42: error: Missing type parameters for generic
type "Callable"  [type-arg]
        def get_or_set(self, key: str, func: Callable, timeout: int | None...
                                             ^
app/utils/cache_manager.py: note: In member "invalidate_pattern" of class "CacheManager":
app/utils/cache_manager.py:85:17: error: Returning Any from function declared
to return "int"  [no-any-return]
                    return self.cache.cache.delete_pattern(pattern)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "cached":
app/utils/cache_manager.py:107:13: error: Missing type parameters for generic
type "Callable"  [type-arg]
        unless: Callable | None = None,
                ^
app/utils/cache_manager.py:108:15: error: Missing type parameters for generic
type "Callable"  [type-arg]
        key_func: Callable | None = None,
                  ^
app/utils/cache_manager.py:109:6: error: Missing type parameters for generic
type "Callable"  [type-arg]
    ) -> Callable:
         ^
app/utils/cache_manager.py:120:28: error: Missing type parameters for generic
type "Callable"  [type-arg]
        def cache_decorator(f: Callable) -> Callable:
                               ^
app/utils/cache_manager.py:131:29: error: Item "None" of "CacheManager | None"
has no attribute "_generate_key"  [union-attr]
                    cache_key = cache_manager._generate_key(f"{key_prefix}...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:134:28: error: Item "None" of "CacheManager | None"
has no attribute "get"  [union-attr]
                cached_value = cache_manager.get(cache_key)
                               ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:141:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(cache_key, result, timeout)
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "cache_invalidate":
app/utils/cache_manager.py:151:39: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def cache_invalidate(pattern: str) -> Callable:
                                          ^
app/utils/cache_manager.py:154:28: error: Missing type parameters for generic
type "Callable"  [type-arg]
        def cache_decorator(f: Callable) -> Callable:
                               ^
app/utils/cache_manager.py:158:13: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
                cache_manager.invalidate_pattern(pattern)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "user_cache":
app/utils/cache_manager.py:168:39: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def user_cache(timeout: int = 600) -> Callable:
                                          ^
app/utils/cache_manager.py: note: In function "instance_cache":
app/utils/cache_manager.py:173:43: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def instance_cache(timeout: int = 300) -> Callable:
                                              ^
app/utils/cache_manager.py: note: In function "task_cache":
app/utils/cache_manager.py:178:39: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def task_cache(timeout: int = 180) -> Callable:
                                          ^
app/utils/cache_manager.py: note: In function "dashboard_cache":
app/utils/cache_manager.py:183:43: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def dashboard_cache(timeout: int = 60) -> Callable:
                                              ^
app/utils/cache_manager.py: note: In function "api_cache":
app/utils/cache_manager.py:188:38: error: Missing type parameters for generic
type "Callable"  [type-arg]
    def api_cache(timeout: int = 300) -> Callable:
                                         ^
app/utils/cache_manager.py: note: In function "user_key_func":
app/utils/cache_manager.py:194:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def user_key_func(user_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "instance_key_func":
app/utils/cache_manager.py:199:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def instance_key_func(instance_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "task_key_func":
app/utils/cache_manager.py:204:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def task_key_func(task_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "dashboard_key_func":
app/utils/cache_manager.py:209:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def dashboard_key_func(*args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: At top level:
app/utils/cache_manager.py:211:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
        from flask_login import current_user
    ^
app/utils/cache_manager.py: note: In function "cache_dashboard_data":
app/utils/cache_manager.py:220:5: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
        cache_manager.set("dashboard_data", data, timeout)
        ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "get_cached_dashboard_data":
app/utils/cache_manager.py:225:12: error: Item "None" of "CacheManager | None"
has no attribute "get"  [union-attr]
        return cache_manager.get("dashboard_data")
               ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "invalidate_dashboard_cache":
app/utils/cache_manager.py:230:5: error: Item "None" of "CacheManager | None"
has no attribute "delete"  [union-attr]
        cache_manager.delete("dashboard_data")
        ^~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_user_cache":
app/utils/cache_manager.py:236:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"user:{user_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_instance_cache":
app/utils/cache_manager.py:241:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"instance:{instance_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_task_cache":
app/utils/cache_manager.py:246:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"task:{task_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_dashboard_cache":
app/utils/cache_manager.py:251:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern("dashboard:*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_all_cache":
app/utils/cache_manager.py:256:5: error: Item "None" of "CacheManager | None"
has no attribute "clear"  [union-attr]
        cache_manager.clear()
        ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "get_cache_stats":
app/utils/cache_manager.py:263:20: error: Item "None" of "CacheManager | None"
has no attribute "cache"  [union-attr]
            if hasattr(cache_manager.cache.cache, "info"):
                       ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:264:20: error: Item "None" of "CacheManager | None"
has no attribute "cache"  [union-attr]
                info = cache_manager.cache.cache.info()
                       ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "warm_up_cache":
app/utils/cache_manager.py:282:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"user:{user.id}", user.to_dict(), 600)
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:287:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"instance:{instance.id}", instance.to_d...
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:292:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"task:{task.id}", task.to_dict(), 180)
                ^~~~~~~~~~~~~~~~~
app/routes/scheduler.py:361: error: Unused "type: ignore" comment 
[unused-ignore]
                app = create_app()  # type: ignore
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:13:1: error: Skipping analyzing "flask_bcrypt": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_bcrypt import Bcrypt
    ^
app/__init__.py:15:1: error: Library stubs not installed for "flask_cors" 
[import-untyped]
    from flask_cors import CORS
    ^
app/__init__.py:15:1: note: Hint: "python3 -m pip install types-Flask-Cors"
app/__init__.py:15:1: note: (or run "mypy --install-types" to install all missing stub packages)
app/__init__.py:17:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import LoginManager
    ^
app/__init__.py:18:1: error: Library stubs not installed for "flask_migrate" 
[import-untyped]
    from flask_migrate import Migrate
    ^
app/__init__.py:18:1: note: Hint: "python3 -m pip install types-Flask-Migrate"
app/__init__.py:20:1: error: Skipping analyzing "flask_wtf.csrf": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_wtf.csrf import CSRFProtect
    ^
app/__init__.py:20:1: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
app/__init__.py: note: In function "create_app":
app/__init__.py:79:5: error: Call to untyped function "configure_structlog" in
typed context  [no-untyped-call]
        configure_structlog(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:84:5: error: Call to untyped function "register_error_handlers"
in typed context  [no-untyped-call]
        register_error_handlers(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:89:5: error: "Flask" has no attribute "advanced_error_handler" 
[attr-defined]
        app.advanced_error_handler = advanced_error_handler
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:108:16: error: Incompatible return value type (got
"tuple[Response, Any | int]", expected "tuple[str, int]")  [return-value]
            return jsonify(error_response), status_code
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py: note: In function "initialize_extensions":
app/__init__.py:287:6: error: Untyped decorator makes function "load_user"
untyped  [misc]
        @login_manager.user_loader
         ^~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:288:36: error: Name "User" is not defined  [name-defined]
        def load_user(user_id: str) -> "User | None":
                                       ^
app/__init__.py:315:24: error: Call to untyped function "from_url" in typed
context  [no-untyped-call]
            redis_client = redis.from_url(redis_url)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:320:9: error: Call to untyped function "init_rate_limiter" in
typed context  [no-untyped-call]
            init_rate_limiter(redis_client)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:328:5: error: "Flask" has no attribute "redis_client"; maybe
"test_client"?  [attr-defined]
        app.redis_client = redis_client
        ^~~~~~~~~~~~~~~~
app/__init__.py: note: In function "register_blueprints":
app/__init__.py:390:5: error: Call to untyped function "init_scheduler" in
typed context  [no-untyped-call]
        init_scheduler(app)
        ^~~~~~~~~~~~~~~~~~~
app/__init__.py: note: In function "configure_template_filters":
app/__init__.py:438:42: error: Name "datetime" is not defined  [name-defined]
        def china_time_filter(dt: Union[str, "datetime"], format_str: str ...
                                             ^
app/__init__.py:440:16: error: Incompatible return value type (got
"str | None", expected "str")  [return-value]
            return format_china_time(dt, format_str)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:443:42: error: Name "datetime" is not defined  [name-defined]
        def china_date_filter(dt: Union[str, "datetime"]) -> str:
                                             ^
app/__init__.py:445:16: error: Incompatible return value type (got
"str | None", expected "str")  [return-value]
            return format_china_time(dt, "%Y-%m-%d")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:448:46: error: Name "datetime" is not defined  [name-defined]
        def china_datetime_filter(dt: Union[str, "datetime"]) -> str:
                                                 ^
app/__init__.py:450:16: error: Incompatible return value type (got
"str | None", expected "str")  [return-value]
            return format_china_time(dt, "%Y-%m-%d %H:%M:%S")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/user.py:7:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import UserMixin
    ^
app/models/user.py: note: In class "User":
app/models/user.py:13:12: error: Class cannot subclass "UserMixin" (has type
"Any")  [misc]
    class User(UserMixin, db.Model):
               ^~~~~~~~~
app/models/user.py: note: At top level:
app/models/user.py:13:23: error: Name "db.Model" is not defined  [name-defined]
    class User(UserMixin, db.Model):
                          ^
app/models/user.py: note: In class "User":
app/models/user.py:13:23: error: Class cannot subclass "Model" (has type "Any")
 [misc]
    class User(UserMixin, db.Model):
                          ^~~~~~~~
app/models/user.py: note: In member "check_password" of class "User":
app/models/user.py:75:9: error: Returning Any from function declared to return
"bool"  [no-any-return]
            return bcrypt.check_password_hash(self.password, password)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/user.py: note: In member "is_admin" of class "User":
app/models/user.py:84:9: error: Returning Any from function declared to return
"bool"  [no-any-return]
            return self.role == "admin"
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/user.py: note: In member "to_dict" of class "User":
app/models/user.py:91:26: error: Missing type parameters for generic type
"dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/user.py: note: In member "create_admin" of class "User":
app/models/user.py:116:9: error: Returning Any from function declared to return
"User | None"  [no-any-return]
            return admin
            ^~~~~~~~~~~~
app/models/task.py:10:12: error: Name "db.Model" is not defined  [name-defined]
    class Task(db.Model):
               ^
app/models/task.py: note: In class "Task":
app/models/task.py:10:12: error: Class cannot subclass "Model" (has type "Any")
 [misc]
    class Task(db.Model):
               ^~~~~~~~
app/models/task.py: note: In member "to_dict" of class "Task":
app/models/task.py:72:26: error: Missing type parameters for generic type
"dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/task.py: note: In member "get_active_tasks" of class "Task":
app/models/task.py:104:31: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_active_tasks() -> list:
                                  ^
app/models/task.py:106:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Task.query.filter_by(is_active=True).all()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/task.py: note: In member "get_by_type" of class "Task":
app/models/task.py:109:40: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_type(task_type: str) -> list:
                                           ^
app/models/task.py:111:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Task.query.filter_by(task_type=task_type, is_active=Tru...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/task.py: note: In member "get_by_db_type" of class "Task":
app/models/task.py:114:41: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_db_type(db_type: str) -> list:
                                            ^
app/models/task.py:116:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Task.query.filter_by(db_type=db_type, is_active=True).a...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/task.py: note: In member "get_builtin_tasks" of class "Task":
app/models/task.py:119:32: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_builtin_tasks() -> list:
                                   ^
app/models/task.py:121:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Task.query.filter_by(is_builtin=True).all()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/task.py: note: In member "success_rate" of class "Task":
app/models/task.py:128:9: error: Returning Any from function declared to return
"float"  [no-any-return]
            return round((self.success_count / self.run_count * 100), 2)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/task.py: note: In member "get_matching_instances" of class "Task":
app/models/task.py:130:41: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_matching_instances(self) -> list:
                                            ^
app/models/task.py:134:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Instance.query.filter_by(db_type=self.db_type, is_activ...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py:10:11: error: Name "db.Model" is not defined  [name-defined]
    class Log(db.Model):
              ^
app/models/log.py: note: In class "Log":
app/models/log.py:10:11: error: Class cannot subclass "Model" (has type "Any") 
[misc]
    class Log(db.Model):
              ^~~~~~~~
app/models/log.py: note: In member "to_dict" of class "Log":
app/models/log.py:66:26: error: Missing type parameters for generic type "dict"
 [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/log.py: note: In member "get_by_level" of class "Log":
app/models/log.py:218:37: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_level(level: str) -> list:
                                        ^
app/models/log.py:220:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Log.query.filter_by(level=level).order_by(Log.created_a...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py: note: In member "get_by_type" of class "Log":
app/models/log.py:223:39: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_type(log_type: str) -> list:
                                          ^
app/models/log.py:225:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Log.query.filter_by(log_type=log_type).order_by(Log.cre...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py: note: In member "get_by_user" of class "Log":
app/models/log.py:228:38: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_user(user_id: int) -> list:
                                         ^
app/models/log.py:230:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Log.query.filter_by(user_id=user_id).order_by(Log.creat...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py: note: In member "get_recent_logs" of class "Log":
app/models/log.py:233:46: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_recent_logs(limit: int = 100) -> list:
                                                 ^
app/models/log.py:235:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Log.query.order_by(Log.created_at.desc()).limit(limit)....
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py: note: In member "get_error_logs" of class "Log":
app/models/log.py:238:44: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_error_logs(limit: int = 50) -> list:
                                               ^
app/models/log.py:240:9: error: Returning Any from function declared to return
"list[Any]"  [no-any-return]
            return Log.query.filter(Log.level.in_(["ERROR", "CRITICAL"]))....
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/instance.py:12:16: error: Name "db.Model" is not defined 
[name-defined]
    class Instance(db.Model):
                   ^
app/models/instance.py: note: In class "Instance":
app/models/instance.py:12:16: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Instance(db.Model):
                   ^~~~~~~~
app/models/instance.py: note: In member "test_connection" of class "Instance":
app/models/instance.py:79:34: error: Missing type parameters for generic type
"dict"  [type-arg]
        def test_connection(self) -> dict:
                                     ^
app/models/instance.py: note: In member "_test_sql_server_connection" of class "Instance":
app/models/instance.py:100:46: error: Missing type parameters for generic type
"dict"  [type-arg]
        def _test_sql_server_connection(self) -> dict:
                                                 ^
app/models/instance.py: note: In member "_test_mysql_connection" of class "Instance":
app/models/instance.py:117:41: error: Missing type parameters for generic type
"dict"  [type-arg]
        def _test_mysql_connection(self) -> dict:
                                            ^
app/models/instance.py: note: In member "_test_oracle_connection" of class "Instance":
app/models/instance.py:134:42: error: Missing type parameters for generic type
"dict"  [type-arg]
        def _test_oracle_connection(self) -> dict:
                                             ^
app/models/instance.py: note: In member "to_dict" of class "Instance":
app/models/instance.py:175:58: error: Missing type parameters for generic type
"dict"  [type-arg]
        def to_dict(self, include_password: bool = False) -> dict:
                                                             ^
app/models/instance.py: note: In member "get_active_instances" of class "Instance":
app/models/instance.py:237:35: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_active_instances() -> list:
                                      ^
app/models/instance.py:239:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Instance.query.filter_by(deleted_at=None, status="activ...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/instance.py: note: In member "get_by_db_type" of class "Instance":
app/models/instance.py:242:41: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_db_type(db_type: str) -> list:
                                            ^
app/models/instance.py:244:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Instance.query.filter_by(db_type=db_type, deleted_at=No...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/instance.py: note: In member "get_by_environment" of class "Instance":
app/models/instance.py:247:49: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_by_environment(environment: str) -> list:
                                                    ^
app/models/instance.py:249:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Instance.query.filter_by(environment=environment, delet...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/instance.py: note: In member "get_by_db_type_and_environment" of class "Instance":
app/models/instance.py:252:75: error: Missing type parameters for generic type
"list"  [type-arg]
    ...et_by_db_type_and_environment(db_type: str, environment: str) -> list:
                                                                        ^
app/models/instance.py:254:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Instance.query.filter_by(db_type=db_type, environment=e...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/instance.py: note: In member "get_environment_choices" of class "Instance":
app/models/instance.py:257:38: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_environment_choices() -> list:
                                         ^
app/models/database_type_config.py:13:26: error: Name "db.Model" is not defined
 [name-defined]
    class DatabaseTypeConfig(db.Model):
                             ^
app/models/database_type_config.py: note: In class "DatabaseTypeConfig":
app/models/database_type_config.py:13:26: error: Class cannot subclass "Model"
(has type "Any")  [misc]
    class DatabaseTypeConfig(db.Model):
                             ^~~~~~~~
app/models/database_type_config.py: note: In function "features_list":
app/models/database_type_config.py:43:17: error: Returning Any from function
declared to return "list[str]"  [no-any-return]
                    return json.loads(self.features)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/database_type_config.py: note: In member "get_active_types" of class "DatabaseTypeConfig":
app/models/database_type_config.py:77:9: error: Returning Any from function
declared to return "list[DatabaseTypeConfig]"  [no-any-return]
            return cls.query.filter_by(is_active=True).order_by(cls.sort_o...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/database_type_config.py: note: In member "get_by_name" of class "DatabaseTypeConfig":
app/models/database_type_config.py:82:9: error: Returning Any from function
declared to return "DatabaseTypeConfig"  [no-any-return]
            return cls.query.filter_by(name=name).first()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py:13:18: error: Name "db.Model" is not defined 
[name-defined]
    class Credential(db.Model):
                     ^
app/models/credential.py: note: In class "Credential":
app/models/credential.py:13:18: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Credential(db.Model):
                     ^~~~~~~~
app/models/credential.py: note: In member "__init__" of class "Credential":
app/models/credential.py:39:23: error: Missing type parameters for generic type
"list"  [type-arg]
            instance_ids: list | None = None,
                          ^
app/models/credential.py: note: In member "check_password" of class "Credential":
app/models/credential.py:87:13: error: Returning Any from function declared to
return "bool"  [no-any-return]
                return bcrypt.check_password_hash(self.password, password)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py:95:9: error: Returning Any from function declared to
return "bool"  [no-any-return]
            return self.password == password
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "get_password_masked" of class "Credential":
app/models/credential.py:105:13: error: Returning Any from function declared to
return "str"  [no-any-return]
                return "*" * (len(self.password) - 4) + self.password[-4:]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "get_plain_password" of class "Credential":
app/models/credential.py:129:9: error: Returning Any from function declared to
return "str"  [no-any-return]
            return self.password
            ^~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "to_dict" of class "Credential":
app/models/credential.py:131:58: error: Missing type parameters for generic
type "dict"  [type-arg]
        def to_dict(self, include_password: bool = False) -> dict:
                                                             ^
app/models/credential.py: note: In member "get_active_credentials" of class "Credential":
app/models/credential.py:173:37: error: Missing type parameters for generic
type "list"  [type-arg]
        def get_active_credentials() -> list:
                                        ^
app/models/credential.py:175:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Credential.query.filter_by(deleted_at=None).all()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "get_by_type" of class "Credential":
app/models/credential.py:178:46: error: Missing type parameters for generic
type "list"  [type-arg]
        def get_by_type(credential_type: str) -> list:
                                                 ^
app/models/credential.py:180:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Credential.query.filter_by(credential_type=credential_t...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/credential.py: note: In member "get_by_db_type" of class "Credential":
app/models/credential.py:183:41: error: Missing type parameters for generic
type "list"  [type-arg]
        def get_by_db_type(db_type: str) -> list:
                                            ^
app/models/credential.py:185:9: error: Returning Any from function declared to
return "list[Any]"  [no-any-return]
            return Credential.query.filter_by(db_type=db_type, deleted_at=...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/credential.py: note: In class "Credential":
app/models/credential.py:187:5: error: Name "to_dict" already defined on line
131  [no-redef]
        def to_dict(self) -> dict:
        ^
app/models/credential.py: note: In member "to_dict" of class "Credential":
app/models/credential.py:187:26: error: Missing type parameters for generic
type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/account.py:10:15: error: Name "db.Model" is not defined 
[name-defined]
    class Account(db.Model):
                  ^
app/models/account.py: note: In class "Account":
app/models/account.py:10:15: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Account(db.Model):
                  ^~~~~~~~
app/models/account.py: note: In member "to_dict" of class "Account":
app/models/account.py:50:26: error: Missing type parameters for generic type
"dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/utils/advanced_error_handler.py: note: In member "__init__" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:70:9: error: Need type annotation for
"error_handlers" (hint: "error_handlers: dict[<type>, <type>] = ...") 
[var-annotated]
            self.error_handlers = {}
            ^~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:71:9: error: Need type annotation for
"recovery_strategies" (hint: "recovery_strategies: dict[<type>, <type>] = ...") 
[var-annotated]
            self.recovery_strategies = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:72:9: error: Need type annotation for
"error_metrics" (hint: "error_metrics: dict[<type>, <type>] = ...") 
[var-annotated]
            self.error_metrics = {}
            ^~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "register_error_handler" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:75:65: error: Missing type parameters for
generic type "Callable"  [type-arg]
    ...ster_error_handler(self, error_type: type, handler: Callable) -> None:
                                                           ^
app/utils/advanced_error_handler.py: note: In member "register_recovery_strategy" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:79:73: error: Missing type parameters for
generic type "Callable"  [type-arg]
    ...overy_strategy(self, error_category: str, strategy: Callable) -> None:
                                                           ^
app/utils/advanced_error_handler.py: note: In member "handle_error" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:83:70: error: Incompatible default for
argument "context" (default has type "None", argument has type "ErrorContext") 
[assignment]
    ...(self, error: Exception, context: ErrorContext = None) -> dict[str, An...
                                                        ^~~~
app/utils/advanced_error_handler.py:83:70: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/advanced_error_handler.py:83:70: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/advanced_error_handler.py:86:13: error: Statement is unreachable 
[unreachable]
                context = ErrorContext(error)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_log_error" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:263:12: error: Non-overlapping equality
check (left operand type: "str", right operand type:
"Literal[LogLevel.CRITICAL]")  [comparison-overlap]
            if log_level == LogLevel.CRITICAL:
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:264:13: error: Statement is unreachable 
[unreachable]
                logger.critical(f"严重错误: {context.error_id}", extra=log_dat...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:265:14: error: Non-overlapping equality
check (left operand type: "str", right operand type: "Literal[LogLevel.ERROR]") 
[comparison-overlap]
            elif log_level == LogLevel.ERROR:
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:266:13: error: Statement is unreachable 
[unreachable]
                logger.error(f"错误: {context.error_id}", extra=log_data)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:267:14: error: Non-overlapping equality
check (left operand type: "str", right operand type:
"Literal[LogLevel.WARNING]")  [comparison-overlap]
            elif log_level == LogLevel.WARNING:
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:268:13: error: Statement is unreachable 
[unreachable]
                logger.warning(f"警告: {context.error_id}", extra=log_data)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_get_log_level" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:277:20: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
                return LogLevel.ERROR
                       ^~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:279:20: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
                return LogLevel.WARNING
                       ^~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:280:16: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
            return LogLevel.ERROR
                   ^~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_get_error_info" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:330:13: error: Returning Any from function
declared to return "dict[str, Any]"  [no-any-return]
                return handler(error, context)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In function "handle_advanced_errors":
app/utils/advanced_error_handler.py:378:34: error: Missing type parameters for
generic type "Callable"  [type-arg]
    def handle_advanced_errors(func: Callable) -> Callable:
                                     ^
app/utils/advanced_error_handler.py: note: In function "monitor_errors":
app/utils/advanced_error_handler.py:429:26: error: Missing type parameters for
generic type "Callable"  [type-arg]
    def monitor_errors(func: Callable) -> Callable:
                             ^
app/routes/user_management.py:8:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/user_management.py:20:2: error: Untyped decorator makes function
"index" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:21:2: error: Untyped decorator makes function
"index" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/user_management.py:40:2: error: Untyped decorator makes function
"api_get_users" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:41:2: error: Untyped decorator makes function
"api_get_users" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_get_users":
app/routes/user_management.py:42:24: error: Name "Response" is not defined 
[name-defined]
    def api_get_users() -> "Response":
                           ^
app/routes/user_management.py: note: At top level:
app/routes/user_management.py:99:2: error: Untyped decorator makes function
"api_create_user" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:100:2: error: Untyped decorator makes function
"api_create_user" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_create_user":
app/routes/user_management.py:101:26: error: Name "Response" is not defined 
[name-defined]
    def api_create_user() -> "Response":
                             ^
app/routes/user_management.py: note: At top level:
app/routes/user_management.py:145:2: error: Untyped decorator makes function
"api_update_user" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:146:2: error: Untyped decorator makes function
"api_update_user" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_update_user":
app/routes/user_management.py:147:38: error: Name "Response" is not defined 
[name-defined]
    def api_update_user(user_id: int) -> "Response":
                                         ^
app/routes/user_management.py: note: At top level:
app/routes/user_management.py:192:2: error: Untyped decorator makes function
"api_delete_user" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:193:2: error: Untyped decorator makes function
"api_delete_user" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_delete_user":
app/routes/user_management.py:194:38: error: Name "Response" is not defined 
[name-defined]
    def api_delete_user(user_id: int) -> "Response":
                                         ^
app/routes/user_management.py: note: At top level:
app/routes/user_management.py:220:2: error: Untyped decorator makes function
"api_toggle_user_status" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:221:2: error: Untyped decorator makes function
"api_toggle_user_status" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_toggle_user_status":
app/routes/user_management.py:222:45: error: Name "Response" is not defined 
[name-defined]
    def api_toggle_user_status(user_id: int) -> "Response":
                                                ^
app/routes/user_management.py: note: At top level:
app/routes/user_management.py:249:2: error: Untyped decorator makes function
"api_get_stats" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/user_management.py:250:2: error: Untyped decorator makes function
"api_get_stats" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_get_stats":
app/routes/user_management.py:251:24: error: Name "Response" is not defined 
[name-defined]
    def api_get_stats() -> "Response":
                           ^
app/routes/health.py: note: In function "health_check":
app/routes/health.py:21:23: error: Name "Response" is not defined 
[name-defined]
    def health_check() -> "Response":
                          ^
app/routes/health.py:30:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("健康检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "detailed_health_check":
app/routes/health.py:34:32: error: Name "Response" is not defined 
[name-defined]
    def detailed_health_check() -> "Response":
                                   ^
app/routes/health.py:75:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("详细健康检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "check_database_health":
app/routes/health.py:78:32: error: Missing type parameters for generic type
"dict"  [type-arg]
    def check_database_health() -> dict:
                                   ^
app/routes/health.py: note: In function "check_cache_health":
app/routes/health.py:95:29: error: Missing type parameters for generic type
"dict"  [type-arg]
    def check_cache_health() -> dict:
                                ^
app/routes/health.py: note: In function "check_system_health":
app/routes/health.py:113:30: error: Missing type parameters for generic type
"dict"  [type-arg]
    def check_system_health() -> dict:
                                 ^
app/routes/health.py: note: In function "readiness_check":
app/routes/health.py:149:26: error: Name "Response" is not defined 
[name-defined]
    def readiness_check() -> "Response":
                             ^
app/routes/health.py:161:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("就绪检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "liveness_check":
app/routes/health.py:165:25: error: Name "Response" is not defined 
[name-defined]
    def liveness_check() -> "Response":
                            ^
app/routes/health.py:172:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("存活检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/models/unified_log.py:27:18: error: Name "db.Model" is not defined 
[name-defined]
    class UnifiedLog(db.Model):
                     ^
app/models/unified_log.py: note: In class "UnifiedLog":
app/models/unified_log.py:27:18: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class UnifiedLog(db.Model):
                     ^~~~~~~~
app/models/unified_log.py: note: In member "get_recent_logs" of class "UnifiedLog":
app/models/unified_log.py:116:9: error: Returning Any from function declared to
return "list[UnifiedLog]"  [no-any-return]
            return query.order_by(cls.timestamp.desc()).limit(limit).all()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/unified_log.py: note: In member "get_error_logs" of class "UnifiedLog":
app/models/unified_log.py:121:9: error: Returning Any from function declared to
return "list[UnifiedLog]"  [no-any-return]
            return (
            ^
app/models/unified_log.py: note: In member "get_logs_by_module" of class "UnifiedLog":
app/models/unified_log.py:134:9: error: Returning Any from function declared to
return "list[UnifiedLog]"  [no-any-return]
            return (
            ^
app/models/unified_log.py: note: In member "search_logs" of class "UnifiedLog":
app/models/unified_log.py:163:9: error: Returning Any from function declared to
return "list[UnifiedLog]"  [no-any-return]
            return query.order_by(cls.timestamp.desc()).limit(limit).all()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/unified_log.py: note: In member "cleanup_old_logs" of class "UnifiedLog":
app/models/unified_log.py:248:9: error: Returning Any from function declared to
return "int"  [no-any-return]
            return deleted_count
            ^~~~~~~~~~~~~~~~~~~~
app/models/sync_data.py:10:16: error: Name "db.Model" is not defined 
[name-defined]
    class SyncData(db.Model):
                   ^
app/models/sync_data.py: note: In class "SyncData":
app/models/sync_data.py:10:16: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class SyncData(db.Model):
                   ^~~~~~~~
app/models/sync_data.py: note: In member "get_record_ids" of class "SyncData":
app/models/sync_data.py:75:33: error: Missing type parameters for generic type
"list"  [type-arg]
        def get_record_ids(self) -> list:
                                    ^
app/models/sync_data.py: note: In member "to_dict" of class "SyncData":
app/models/sync_data.py:84:26: error: Missing type parameters for generic type
"dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/sync_data.py: note: In member "get_latest_sync" of class "SyncData":
app/models/sync_data.py:124:9: error: Returning Any from function declared to
return "SyncData | None"  [no-any-return]
            return query.order_by(SyncData.sync_time.desc()).first()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/permission_config.py:10:24: error: Name "db.Model" is not defined 
[name-defined]
    class PermissionConfig(db.Model):
                           ^
app/models/permission_config.py: note: In class "PermissionConfig":
app/models/permission_config.py:10:24: error: Class cannot subclass "Model"
(has type "Any")  [misc]
    class PermissionConfig(db.Model):
                           ^~~~~~~~
app/models/permission_config.py: note: In member "to_dict" of class "PermissionConfig":
app/models/permission_config.py:37:26: error: Missing type parameters for
generic type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/permission_config.py: note: In member "get_permissions_by_db_type" of class "PermissionConfig":
app/models/permission_config.py:52:58: error: Missing type parameters for
generic type "dict"  [type-arg]
        def get_permissions_by_db_type(cls, db_type: str) -> dict:
                                                             ^
app/models/permission_config.py:61:9: error: Need type annotation for "result"
(hint: "result: dict[<type>, <type>] = ...")  [var-annotated]
            result = {}
            ^~~~~~
app/models/account_classification.py:11:29: error: Name "db.Model" is not
defined  [name-defined]
    class AccountClassification(db.Model):
                                ^
app/models/account_classification.py: note: In class "AccountClassification":
app/models/account_classification.py:11:29: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class AccountClassification(db.Model):
                                ^~~~~~~~
app/models/account_classification.py: note: In member "to_dict" of class "AccountClassification":
app/models/account_classification.py:44:26: error: Missing type parameters for
generic type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/account_classification.py: note: At top level:
app/models/account_classification.py:62:26: error: Name "db.Model" is not
defined  [name-defined]
    class ClassificationRule(db.Model):
                             ^
app/models/account_classification.py: note: In class "ClassificationRule":
app/models/account_classification.py:62:26: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class ClassificationRule(db.Model):
                             ^~~~~~~~
app/models/account_classification.py: note: In member "to_dict" of class "ClassificationRule":
app/models/account_classification.py:79:26: error: Missing type parameters for
generic type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/account_classification.py: note: In member "get_rule_expression" of class "ClassificationRule":
app/models/account_classification.py:92:38: error: Missing type parameters for
generic type "dict"  [type-arg]
        def get_rule_expression(self) -> dict:
                                         ^
app/models/account_classification.py:95:13: error: Returning Any from function
declared to return "dict[Any, Any]"  [no-any-return]
                return json.loads(self.rule_expression)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/account_classification.py: note: In member "set_rule_expression" of class "ClassificationRule":
app/models/account_classification.py:99:47: error: Missing type parameters for
generic type "dict"  [type-arg]
        def set_rule_expression(self, expression: dict) -> None:
                                                  ^
app/models/account_classification.py: note: At top level:
app/models/account_classification.py:104:39: error: Name "db.Model" is not
defined  [name-defined]
    class AccountClassificationAssignment(db.Model):
                                          ^
app/models/account_classification.py: note: In class "AccountClassificationAssignment":
app/models/account_classification.py:104:39: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class AccountClassificationAssignment(db.Model):
                                          ^~~~~~~~
app/models/account_classification.py: note: In member "to_dict" of class "AccountClassificationAssignment":
app/models/account_classification.py:126:26: error: Missing type parameters for
generic type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/account_change.py:10:21: error: Name "db.Model" is not defined 
[name-defined]
    class AccountChange(db.Model):
                        ^
app/models/account_change.py: note: In class "AccountChange":
app/models/account_change.py:10:21: error: Class cannot subclass "Model" (has
type "Any")  [misc]
    class AccountChange(db.Model):
                        ^~~~~~~~
app/models/account_change.py: note: In member "__init__" of class "AccountChange":
app/models/account_change.py:26:93: error: Missing type parameters for generic
type "dict"  [type-arg]
    ... int, instance_id: int, change_type: str, account_data: dict) -> None:
                                                               ^
app/models/account_change.py: note: In member "to_dict" of class "AccountChange":
app/models/account_change.py:41:26: error: Missing type parameters for generic
type "dict"  [type-arg]
        def to_dict(self) -> dict:
                             ^
app/models/account_change.py: note: In member "get_changes_by_sync" of class "AccountChange":
app/models/account_change.py:59:51: error: Missing type parameters for generic
type "list"  [type-arg]
        def get_changes_by_sync(sync_data_id: int) -> list:
                                                      ^
app/models/account_change.py:69:9: error: Returning Any from function declared
to return "list[Any]"  [no-any-return]
            return AccountChange.query.filter_by(sync_data_id=sync_data_id...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/account_change.py: note: In member "get_changes_by_instance" of class "AccountChange":
app/models/account_change.py:72:72: error: Missing type parameters for generic
type "list"  [type-arg]
    ...f get_changes_by_instance(instance_id: int, limit: int = 100) -> list:
                                                                        ^
app/models/account_change.py:83:9: error: Returning Any from function declared
to return "list[Any]"  [no-any-return]
            return (
            ^
app/utils/structlog_config.py:17:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user
    ^
app/utils/structlog_config.py: note: In member "_add_global_context" of class "StructlogConfig":
app/utils/structlog_config.py:31:1: error: Need type annotation for
"_global_context" (hint: "_global_context: dict[<type>, <type>] = ...") 
[var-annotated]
    _global_context = {}
    ^~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In member "__init__" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:40:26: error: Need type annotation for
"log_queue"  [var-annotated]
            self.log_queue = Queue()
                             ^~~~~~~
app/utils/structlog_config.py: note: In member "__call__" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:49:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __call__(self, logger, method_name, event_dict):
        ^
app/utils/structlog_config.py: note: In member "_build_log_entry" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:86:17: error: Statement is unreachable 
[unreachable]
                    if isinstance(event_dict, str):
                    ^
app/utils/structlog_config.py: note: In member "_process_logs" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:175:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _process_logs(self):
        ^
app/utils/structlog_config.py:175:5: note: Use "-> None" if function does not return a value
app/utils/structlog_config.py:193:21: error: Call to untyped function
"_flush_logs" in typed context  [no-untyped-call]
                        self._flush_logs()
                        ^~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In member "_flush_logs" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:199:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _flush_logs(self):
        ^
app/utils/structlog_config.py:199:5: note: Use "-> None" if function does not return a value
app/utils/structlog_config.py: note: In member "shutdown" of class "SQLAlchemyLogHandler":
app/utils/structlog_config.py:239:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def shutdown(self):
        ^
app/utils/structlog_config.py:239:5: note: Use "-> None" if function does not return a value
app/utils/structlog_config.py:244:13: error: Call to untyped function
"_flush_logs" in typed context  [no-untyped-call]
                self._flush_logs()
                ^~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In member "__init__" of class "StructlogConfig":
app/utils/structlog_config.py:251:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/structlog_config.py:251:5: note: Use "-> None" if function does not return a value
app/utils/structlog_config.py: note: In member "configure" of class "StructlogConfig":
app/utils/structlog_config.py:255:5: error: Function is missing a type
annotation  [no-untyped-def]
        def configure(self, app=None):
        ^
app/utils/structlog_config.py:278:17: error: Call to untyped function
"_get_handler" in typed context  [no-untyped-call]
                    self._get_handler(),
                    ^~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py:280:17: error: Call to untyped function
"_get_console_renderer" in typed context  [no-untyped-call]
                    self._get_console_renderer(),
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In member "_add_request_context" of class "StructlogConfig":
app/utils/structlog_config.py:292:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _add_request_context(self, logger, method_name, event_dict):
        ^
app/utils/structlog_config.py: note: In member "_add_user_context" of class "StructlogConfig":
app/utils/structlog_config.py:299:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _add_user_context(self, logger, method_name, event_dict):
        ^
app/utils/structlog_config.py: note: In member "_add_global_context" of class "StructlogConfig":
app/utils/structlog_config.py:306:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _add_global_context(self, logger, method_name, event_dict):
        ^
app/utils/structlog_config.py: note: In member "_get_console_renderer" of class "StructlogConfig":
app/utils/structlog_config.py:327:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _get_console_renderer(self):
        ^
app/utils/structlog_config.py: note: In member "_get_handler" of class "StructlogConfig":
app/utils/structlog_config.py:342:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _get_handler(self):
        ^
app/utils/structlog_config.py: note: In member "shutdown" of class "StructlogConfig":
app/utils/structlog_config.py:348:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def shutdown(self):
        ^
app/utils/structlog_config.py:348:5: note: Use "-> None" if function does not return a value
app/utils/structlog_config.py: note: At top level:
app/utils/structlog_config.py:355:20: error: Call to untyped function
"StructlogConfig" in typed context  [no-untyped-call]
    structlog_config = StructlogConfig()
                       ^~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In function "get_logger":
app/utils/structlog_config.py:361:9: error: Call to untyped function
"configure" in typed context  [no-untyped-call]
            structlog_config.configure()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py:363:5: error: Returning Any from function
declared to return "BoundLogger"  [no-any-return]
        return structlog.get_logger(name)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In function "configure_structlog":
app/utils/structlog_config.py:366:1: error: Function is missing a type
annotation  [no-untyped-def]
    def configure_structlog(app):
    ^
app/utils/structlog_config.py:368:5: error: Call to untyped function
"configure" in typed context  [no-untyped-call]
        structlog_config.configure(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py:372:5: error: Function is missing a type
annotation  [no-untyped-def]
        def shutdown_logging(exception):
        ^
app/utils/structlog_config.py: note: In function "set_debug_logging_enabled":
app/utils/structlog_config.py:396:17: error: Call to untyped function
"_get_handler" in typed context  [no-untyped-call]
                    structlog_config._get_handler(),
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py:407:9: error: Call to untyped function
"configure" in typed context  [no-untyped-call]
            structlog_config.configure()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/structlog_config.py: note: In function "log_info":
app/utils/structlog_config.py:421:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def log_info(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py:421:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def log_info(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py: note: In function "log_warning":
app/utils/structlog_config.py:427:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def log_warning(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py:427:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def log_warning(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py: note: In function "log_error":
app/utils/structlog_config.py:433:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def log_error(message: str, module: str = "app", exception: Exception ...
    ^
app/utils/structlog_config.py:433:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def log_error(message: str, module: str = "app", exception: Exception ...
    ^
app/utils/structlog_config.py: note: In function "log_critical":
app/utils/structlog_config.py:442:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def log_critical(message: str, module: str = "app", exception: Excepti...
    ^
app/utils/structlog_config.py:442:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def log_critical(message: str, module: str = "app", exception: Excepti...
    ^
app/utils/structlog_config.py: note: In function "log_debug":
app/utils/structlog_config.py:451:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def log_debug(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py:451:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def log_debug(message: str, module: str = "app", **kwargs):
    ^
app/utils/structlog_config.py: note: In function "bind_context":
app/utils/structlog_config.py:491:1: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def bind_context(**kwargs) -> None:
    ^
app/utils/structlog_config.py: note: In member "__init__" of class "LogContext":
app/utils/structlog_config.py:525:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __init__(self, **kwargs):
        ^
app/utils/structlog_config.py: note: In member "__enter__" of class "LogContext":
app/utils/structlog_config.py:529:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __enter__(self):
        ^
app/utils/structlog_config.py: note: In member "__exit__" of class "LogContext":
app/utils/structlog_config.py:535:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __exit__(self, exc_type, exc_val, exc_tb):
        ^
app/utils/structlog_config.py: note: In function "with_log_context":
app/utils/structlog_config.py:542:1: error: Function is missing a type
annotation  [no-untyped-def]
    def with_log_context(**context):
    ^
app/utils/structlog_config.py:545:5: error: Function is missing a type
annotation  [no-untyped-def]
        def decorator(func):
        ^
app/utils/structlog_config.py:546:9: error: Function is missing a type
annotation  [no-untyped-def]
            def wrapper(*args, **kwargs):
            ^
app/utils/structlog_config.py:547:18: error: Call to untyped function
"LogContext" in typed context  [no-untyped-call]
                with LogContext(**context):
                     ^~~~~~~~~~~~~~~~~~~~~
app/routes/account_static.py:10:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import login_required
    ^
app/routes/account_static.py:23:2: error: Untyped decorator makes function
"index" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "index":
app/routes/account_static.py:36:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/account_static.py: note: At top level:
app/routes/account_static.py:53:2: error: Untyped decorator makes function
"account_statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "account_statistics":
app/routes/account_static.py:54:29: error: Name "Response" is not defined 
[name-defined]
    def account_statistics() -> "Response":
                                ^
app/routes/account_static.py: note: At top level:
app/routes/account_static.py:69:2: error: Untyped decorator makes function
"api_statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "api_statistics":
app/routes/account_static.py:70:25: error: Name "Response" is not defined 
[name-defined]
    def api_statistics() -> "Response":
                            ^
app/routes/account_static.py: note: In function "get_account_statistics":
app/routes/account_static.py:79:33: error: Missing type parameters for generic
type "dict"  [type-arg]
    def get_account_statistics() -> dict:
                                    ^
app/routes/account_static.py:115:29: error: Need type annotation for
"environment_stats"  [var-annotated]
            environment_stats = defaultdict(lambda: {"total": 0, "active":...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/account_static.py:177:9: error: Need type annotation for
"permission_stats"  [var-annotated]
            permission_stats = defaultdict(int)
            ^~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "get_all_types" of class "DatabaseTypeService":
app/services/database_type_service.py:21:9: error: Returning Any from function
declared to return "list[DatabaseTypeConfig]"  [no-any-return]
            return DatabaseTypeConfig.query.order_by(DatabaseTypeConfig.so...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_type_service.py: note: In member "get_type_by_id" of class "DatabaseTypeService":
app/services/database_type_service.py:36:9: error: Returning Any from function
declared to return "DatabaseTypeConfig | None"  [no-any-return]
            return DatabaseTypeConfig.query.get(type_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "init_default_types" of class "DatabaseTypeService":
app/services/database_type_service.py:242:51: error: Argument 1 to
"get_by_name" of "DatabaseTypeConfig" has incompatible type "object"; expected
"str"  [arg-type]
                if not DatabaseTypeConfig.get_by_name(type_data["name"]):
                                                      ^~~~~~~~~~~~~~~~~
app/services/database_type_service.py:258:40: error: Incompatible types in
assignment (expression has type "object", variable has type "list[str]") 
[assignment]
                    config.features_list = type_data.get("features", [])
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py:263:13: error: Name "api_logger" is not
defined  [name-defined]
                api_logger.info("database_type_init", user_id=None, detail...
                ^~~~~~~~~~
app/services/account_sync_service.py:8:1: error: Cannot find implementation or
library stub for module named "psycopg"  [import-not-found]
        import psycopg
    ^
app/services/account_sync_service.py:20:16: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        oracledb = None
                   ^~~~
app/services/account_sync_service.py: note: In member "sync_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:113:26: error: Argument "data" to
"SyncData" has incompatible type "dict[str, Any]"; expected "str | None" 
[arg-type]
                        data={
                             ^
app/services/account_sync_service.py:156:26: error: Argument "data" to
"SyncData" has incompatible type "dict[str, Any]"; expected "str | None" 
[arg-type]
                        data={
                             ^
app/services/account_sync_service.py: note: In member "_get_connection" of class "AccountSyncService":
app/services/account_sync_service.py:188:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.error(f"不支持的数据库类型: {instance.db_type}")
                    ^~~~~~~~~~~
app/services/account_sync_service.py:194:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.error(f"无法建立{instance.db_type}连接")
                ^~~~~~~~~~~
app/services/account_sync_service.py:198:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.error(f"数据库连接失败: {str(e)}")
                ^~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_sqlserver_pymssql_connection" of class "AccountSyncService":
app/services/account_sync_service.py:235:20: error: Incompatible return value
type (got "dict[str, Any]", expected "str | None")  [return-value]
                return {
                       ^
app/services/account_sync_service.py: note: In member "_get_account_snapshot" of class "AccountSyncService":
app/services/account_sync_service.py:245:70: error: Missing type parameters for
generic type "dict"  [type-arg]
    ...ef _get_account_snapshot(self, instance: Instance) -> dict[str, dict]:
                                                                       ^
app/services/account_sync_service.py: note: In member "_sync_mysql_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:466:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_sync_postgresql_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:608:21: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                        self.logger.info(f"PostgreSQL账户 {username} 权限已更新: ...
                        ^~~~~~~~~~~
app/services/account_sync_service.py:610:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"获取PostgreSQL账户 {username} 权限失败: ...
                    ^~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_postgresql_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:633:23: error: Need type annotation for
"permissions"  [var-annotated]
            permissions = {
                          ^
app/services/account_sync_service.py:641:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.info(f"开始获取PostgreSQL用户 {username} 的权限信息")
                ^~~~~~~~~~~
app/services/account_sync_service.py:646:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"PostgreSQL用户 {username} 不存在")
                    ^~~~~~~~~~~
app/services/account_sync_service.py:649:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.info(f"PostgreSQL用户 {username} 存在，继续获取权限")
                ^~~~~~~~~~~
app/services/account_sync_service.py:672:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"获取PostgreSQL用户 {username} 预定义角色失...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:714:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"获取PostgreSQL用户 {username} 角色属性失败...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:722:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.info(f"PostgreSQL用户 {username} 权限查询使用默认数据库...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:753:25: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                            self.logger.debug(f"查询数据库 {db_name} 的权限失败: {db...
                            ^~~~~~~~~~~
app/services/account_sync_service.py:757:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"获取PostgreSQL用户 {username} 数据库权限失...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:775:17: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                    self.logger.warning(f"获取PostgreSQL用户 {username} 表空间权限失...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:781:43: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["is_superuser"] = is_superuser
                                              ^~~~~~~~~~~~
app/services/account_sync_service.py:782:40: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["can_grant"] = can_grant
                                           ^~~~~~~~~
app/services/account_sync_service.py:784:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.info(f"PostgreSQL用户 {username} 权限获取成功: {permis...
                ^~~~~~~~~~~
app/services/account_sync_service.py:787:13: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
                self.logger.error(f"获取PostgreSQL账户 {username} 权限失败: {e}")
                ^~~~~~~~~~~
app/services/account_sync_service.py:789:43: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["is_superuser"] = False
                                              ^~~~~
app/services/account_sync_service.py:790:40: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["can_grant"] = False
                                           ^~~~~
app/services/account_sync_service.py: note: In member "_sync_sqlserver_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:943:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_sync_oracle_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:1051:9: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
            self.logger.info(f"Oracle账户清理 - 服务器端账户: {server_accounts}")
            ^~~~~~~~~~~
app/services/account_sync_service.py:1052:9: error: "AccountSyncService" has no
attribute "logger"  [attr-defined]
            self.logger.info(f"Oracle账户清理 - 本地账户数量: {len(local_accounts)}"...
            ^~~~~~~~~~~
app/services/account_sync_service.py:1057:17: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                    self.logger.info(f"Oracle账户清理 - 删除账户: {local_account.u...
                    ^~~~~~~~~~~
app/services/account_sync_service.py:1086:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_mysql_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1173:13: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/account_sync_service.py:1197:13: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                self.logger.error(f"获取MySQL权限失败: {e}")
                ^~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_sqlserver_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1285:25: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                            self.logger.debug(f"查询数据库 {db_name} 的角色失败: {db...
                            ^~~~~~~~~~~
app/services/account_sync_service.py:1293:17: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                    self.logger.debug(f"获取数据库角色失败: {e}")
                    ^~~~~~~~~~~
app/services/account_sync_service.py:1297:17: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                    db_permissions = {}
                    ^~~~~~~~~~~~~~
app/services/account_sync_service.py:1327:25: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                            self.logger.debug(f"查询数据库 {db_name} 的权限失败: {db...
                            ^~~~~~~~~~~
app/services/account_sync_service.py:1335:17: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                    self.logger.debug(f"获取数据库权限失败: {e}")
                    ^~~~~~~~~~~
app/services/account_sync_service.py:1369:13: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                self.logger.error(f"获取SQL Server权限失败: {e}")
                ^~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_oracle_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1400:27: error: Need type annotation for
"permissions"  [var-annotated]
                permissions = {
                              ^
app/services/account_sync_service.py:1478:13: error: "AccountSyncService" has
no attribute "logger"  [attr-defined]
                self.logger.error(f"获取Oracle权限失败: {e}")
                ^~~~~~~~~~~
app/services/account_classification_service.py: note: In member "create_classification" of class "AccountClassificationService":
app/services/account_classification_service.py:29:28: error: Incompatible
default for argument "description" (default has type "None", argument has type
"str")  [assignment]
            description: str = None,
                               ^~~~
app/services/account_classification_service.py:29:28: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:29:28: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:31:22: error: Incompatible
default for argument "color" (default has type "None", argument has type "str") 
[assignment]
            color: str = None,
                         ^~~~
app/services/account_classification_service.py:31:22: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:31:22: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py: note: In member "update_classification" of class "AccountClassificationService":
app/services/account_classification_service.py:71:5: error: Function is missing
a type annotation for one or more arguments  [no-untyped-def]
        def update_classification(self, classification_id: int, **kwargs) ...
        ^
app/services/account_classification_service.py: note: In member "update_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:199:5: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def update_rule(self, rule_id: int, **kwargs) -> dict[str, Any]:
        ^
app/services/account_classification_service.py: note: In member "get_classification_rules" of class "AccountClassificationService":
app/services/account_classification_service.py:267:65: error: Incompatible
default for argument "classification_id" (default has type "None", argument has
type "int")  [assignment]
    ...ssification_rules(self, classification_id: int = None, db_type: str = ...
                                                        ^~~~
app/services/account_classification_service.py:267:65: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:267:65: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:267:86: error: Incompatible
default for argument "db_type" (default has type "None", argument has type
"str")  [assignment]
    ...f, classification_id: int = None, db_type: str = None) -> list[dict[st...
                                                        ^~~~
app/services/account_classification_service.py: note: In member "classify_account" of class "AccountClassificationService":
app/services/account_classification_service.py:310:28: error: Incompatible
default for argument "assigned_by" (default has type "None", argument has type
"int")  [assignment]
            assigned_by: int = None,
                               ^~~~
app/services/account_classification_service.py:310:28: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:310:28: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:311:22: error: Incompatible
default for argument "notes" (default has type "None", argument has type "str") 
[assignment]
            notes: str = None,
                         ^~~~
app/services/account_classification_service.py:311:22: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:311:22: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py: note: In member "auto_classify_accounts" of class "AccountClassificationService":
app/services/account_classification_service.py:373:57: error: Incompatible
default for argument "instance_id" (default has type "None", argument has type
"int")  [assignment]
    ... auto_classify_accounts(self, instance_id: int = None) -> dict[str, An...
                                                        ^~~~
app/services/account_classification_service.py:373:57: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:373:57: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:418:33: error: Argument 4 to
"classify_account" of "AccountClassificationService" has incompatible type
"None"; expected "int"  [arg-type]
                                    None,  # assigned_by
                                    ^~~~
app/services/account_classification_service.py: note: In member "_evaluate_mysql_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:578:71: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...ate_mysql_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py:597:21: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                        self.logger.debug(
                        ^~~~~~~~~~~
app/services/account_classification_service.py:611:21: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                        self.logger.debug(
                        ^~~~~~~~~~~
app/services/account_classification_service.py: note: In member "_evaluate_sqlserver_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:623:75: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...sqlserver_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: In member "get_account_classifications" of class "AccountClassificationService":
app/services/account_classification_service.py:809:61: error: Incompatible
default for argument "account_id" (default has type "None", argument has type
"int")  [assignment]
    ..._account_classifications(self, account_id: int = None) -> list[dict[st...
                                                        ^~~~
app/services/account_classification_service.py:809:61: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:809:61: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py: note: In member "_evaluate_postgresql_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:883:76: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...ostgresql_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: In member "_evaluate_oracle_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:927:72: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...te_oracle_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py:976:25: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                            self.logger.debug(f"账户 {account.username} 缺少表空...
                            ^~~~~~~~~~~
app/services/account_classification_service.py:988:17: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                    self.logger.debug(f"账户 {account.username} 匹配Oracle规则（无...
                    ^~~~~~~~~~~
app/services/account_classification_service.py:991:13: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                self.logger.debug(f"账户 {account.username} 匹配Oracle规则")
                ^~~~~~~~~~~
app/services/account_classification_service.py:995:13: error:
"AccountClassificationService" has no attribute "logger"  [attr-defined]
                self.logger.error(f"评估Oracle规则失败: {e}")
                ^~~~~~~~~~~
app/routes/unified_logs.py:9:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/unified_logs.py: note: In function "logs_dashboard":
app/routes/unified_logs.py:26:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def logs_dashboard():
    ^
app/routes/unified_logs.py:32:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to load logs dashboard", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "search_logs":
app/routes/unified_logs.py:37:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def search_logs():
    ^
app/routes/unified_logs.py:60:24: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
                    return error_response("Invalid start_time format", 400...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:67:24: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
                    return error_response("Invalid end_time format", 400)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:80:24: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
                    return error_response("Invalid log level", 400)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:130:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response(response_data)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:134:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to search logs", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "get_log_statistics":
app/routes/unified_logs.py:139:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_log_statistics():
    ^
app/routes/unified_logs.py:148:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response(stats)
                   ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:152:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to get log statistics", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "get_error_logs":
app/routes/unified_logs.py:157:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_error_logs():
    ^
app/routes/unified_logs.py:169:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response({"logs": logs})
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:173:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to get error logs", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "get_log_modules":
app/routes/unified_logs.py:178:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_log_modules():
    ^
app/routes/unified_logs.py:190:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response({"modules": module_list})
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:194:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to get log modules", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "export_logs":
app/routes/unified_logs.py:199:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def export_logs():
    ^
app/routes/unified_logs.py:262:25: error: Name "json" is not defined 
[name-defined]
                            json.dumps(log.context) if log.context else ""...
                            ^~~~
app/routes/unified_logs.py:272:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Unsupported export format", 400)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:276:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to export logs", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "cleanup_logs":
app/routes/unified_logs.py:281:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def cleanup_logs():
    ^
app/routes/unified_logs.py:286:20: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
                return error_response("Permission denied", 403)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:288:20: error: Item "None" of "Any | None" has no
attribute "get"  [union-attr]
            days = int(request.json.get("days", 90))
                       ^~~~~~~~~~~~~~~~
app/routes/unified_logs.py:294:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response(
                   ^
app/routes/unified_logs.py:303:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to cleanup logs", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "get_recent_logs":
app/routes/unified_logs.py:308:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_recent_logs():
    ^
app/routes/unified_logs.py:321:24: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
                    return error_response("Invalid log level", 400)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:328:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response({"logs": logs})
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:332:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to get recent logs", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py: note: In function "get_log_health":
app/routes/unified_logs.py:337:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_log_health():
    ^
app/routes/unified_logs.py:368:16: error: Call to untyped function
"success_response" in typed context  [no-untyped-call]
            return success_response(health_data)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/unified_logs.py:372:16: error: Call to untyped function
"error_response" in typed context  [no-untyped-call]
            return error_response("Failed to get log health", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/main.py:7:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import login_required
    ^
app/routes/main.py: note: In function "index":
app/routes/main.py:19:12: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
        return redirect(url_for("auth.login"))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/main.py: note: In function "favicon":
app/routes/main.py:23:18: error: Name "Response" is not defined  [name-defined]
    def favicon() -> "Response":
                     ^
app/routes/main.py: note: In function "chrome_devtools":
app/routes/main.py:30:26: error: Name "Response" is not defined  [name-defined]
    def chrome_devtools() -> "Response":
                             ^
app/routes/main.py: note: At top level:
app/routes/main.py:37:2: error: Untyped decorator makes function "admin"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/main.py: note: In function "api_health":
app/routes/main.py:44:21: error: Name "Response" is not defined  [name-defined]
    def api_health() -> "Response":
                        ^
app/routes/logs.py: note: In function "get_unified_logs":
app/routes/logs.py:90:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response(
            ^
app/routes/logs.py:90:16: error: Call to untyped function "success_response" in
typed context  [no-untyped-call]
            return success_response(
                   ^
app/routes/logs.py:108:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取统一日志失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:108:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取统一日志失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "get_unified_log_stats":
app/routes/logs.py:118:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response(stats)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:118:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response(stats)
                   ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:122:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取统一日志统计失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:122:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取统一日志统计失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "get_unified_error_logs":
app/routes/logs.py:157:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response({"logs": logs_data})
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:157:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response({"logs": logs_data})
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:161:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取统一错误日志失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:161:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取统一错误日志失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "get_unified_log_modules":
app/routes/logs.py:172:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response(module_list)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:172:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response(module_list)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:176:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取统一日志模块失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:176:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取统一日志模块失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "get_unified_log_detail":
app/routes/logs.py:203:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response(log_detail)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:203:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response(log_detail)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:207:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取日志详情失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:207:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取日志详情失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "export_unified_logs":
app/routes/logs.py:295:13: error: Returning Any from function declared to
return "Response"  [no-any-return]
                return success_response({"data": {"logs": logs_data, "tota...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/logs.py:295:20: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
                return success_response({"data": {"logs": logs_data, "tota...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/logs.py:296:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("Unsupported format", 400)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:296:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("Unsupported format", 400)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:300:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("导出统一日志失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:300:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("导出统一日志失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "get_debug_status":
app/routes/logs.py:309:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response({"enabled": enabled, "status": "启用" if...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/logs.py:309:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response({"enabled": enabled, "status": "启用" if...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/logs.py:312:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("获取DEBUG日志状态失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:312:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("获取DEBUG日志状态失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py: note: In function "toggle_debug_logging":
app/routes/logs.py:331:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return success_response(
            ^
app/routes/logs.py:331:16: error: Call to untyped function "success_response"
in typed context  [no-untyped-call]
            return success_response(
                   ^
app/routes/logs.py:340:9: error: Returning Any from function declared to return
"Response"  [no-any-return]
            return error_response("切换DEBUG日志状态失败", 500)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/logs.py:340:16: error: Call to untyped function "error_response" in
typed context  [no-untyped-call]
            return error_response("切换DEBUG日志状态失败", 500)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py:9:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/dashboard.py:36:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "index":
app/routes/dashboard.py:64:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/dashboard.py: note: At top level:
app/routes/dashboard.py:81:2: error: Untyped decorator makes function
"api_overview" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_overview":
app/routes/dashboard.py:82:23: error: Name "Response" is not defined 
[name-defined]
    def api_overview() -> "Response":
                          ^
app/routes/dashboard.py: note: At top level:
app/routes/dashboard.py:104:2: error: Untyped decorator makes function
"api_charts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_charts":
app/routes/dashboard.py:105:21: error: Name "Response" is not defined 
[name-defined]
    def api_charts() -> "Response":
                        ^
app/routes/dashboard.py: note: At top level:
app/routes/dashboard.py:128:2: error: Untyped decorator makes function
"api_activities" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_activities":
app/routes/dashboard.py:129:25: error: Name "Response" is not defined 
[name-defined]
    def api_activities() -> "Response":
                            ^
app/routes/dashboard.py: note: At top level:
app/routes/dashboard.py:135:2: error: Untyped decorator makes function
"api_status" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_status":
app/routes/dashboard.py:136:21: error: Name "Response" is not defined 
[name-defined]
    def api_status() -> "Response":
                        ^
app/routes/dashboard.py: note: In function "get_system_overview":
app/routes/dashboard.py:158:30: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_system_overview() -> dict:
                                 ^
app/routes/dashboard.py: note: In function "get_chart_data":
app/routes/dashboard.py:207:48: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_chart_data(chart_type: str = "all") -> dict:
                                                   ^
app/routes/dashboard.py: note: In function "get_log_trend_data":
app/routes/dashboard.py:237:29: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_log_trend_data() -> dict:
                                ^
app/routes/dashboard.py:265:16: error: Incompatible return value type (got
"list[dict[str, Any]]", expected "dict[Any, Any]")  [return-value]
            return trend_data
                   ^~~~~~~~~~
app/routes/dashboard.py:268:16: error: Incompatible return value type (got
"list[Never]", expected "dict[Any, Any]")  [return-value]
            return []
                   ^~
app/routes/dashboard.py: note: In function "get_log_level_distribution":
app/routes/dashboard.py:271:37: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_log_level_distribution() -> dict:
                                        ^
app/routes/dashboard.py:281:16: error: Incompatible return value type (got
"list[dict[str, Any]]", expected "dict[Any, Any]")  [return-value]
            return [{"level": stat.level, "count": stat.count} for stat in...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/dashboard.py:284:16: error: Incompatible return value type (got
"list[Never]", expected "dict[Any, Any]")  [return-value]
            return []
                   ^~
app/routes/dashboard.py: note: In function "get_instance_type_distribution":
app/routes/dashboard.py:287:41: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_instance_type_distribution() -> dict:
                                            ^
app/routes/dashboard.py:296:16: error: Incompatible return value type (got
"list[dict[str, Any]]", expected "dict[Any, Any]")  [return-value]
            return [{"type": stat.db_type, "count": stat.count} for stat i...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/dashboard.py:299:16: error: Incompatible return value type (got
"list[Never]", expected "dict[Any, Any]")  [return-value]
            return []
                   ^~
app/routes/dashboard.py: note: In function "get_task_status_distribution":
app/routes/dashboard.py:302:39: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_task_status_distribution() -> dict:
                                          ^
app/routes/dashboard.py:309:16: error: Incompatible return value type (got
"list[dict[str, Any]]", expected "dict[Any, Any]")  [return-value]
            return [{"status": stat.last_status or "unknown", "count": sta...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/dashboard.py:312:16: error: Incompatible return value type (got
"list[Never]", expected "dict[Any, Any]")  [return-value]
            return []
                   ^~
app/routes/dashboard.py: note: In function "get_sync_trend_data":
app/routes/dashboard.py:315:30: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_sync_trend_data() -> dict:
                                 ^
app/routes/dashboard.py:328:16: error: Incompatible return value type (got
"list[dict[str, Any]]", expected "dict[Any, Any]")  [return-value]
            return trend_data
                   ^~~~~~~~~~
app/routes/dashboard.py:331:16: error: Incompatible return value type (got
"list[Never]", expected "dict[Any, Any]")  [return-value]
            return []
                   ^~
app/routes/dashboard.py: note: In function "get_system_status":
app/routes/dashboard.py:334:28: error: Missing type parameters for generic type
"dict"  [type-arg]
    def get_system_status() -> dict:
                               ^
app/routes/credentials.py:6:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/credentials.py:27:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:28:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/credentials.py: note: In function "index":
app/routes/credentials.py:84:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:107:2: error: Untyped decorator makes function
"create" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:108:2: error: Untyped decorator makes function
"create" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/credentials.py: note: In function "create":
app/routes/credentials.py:109:17: error: Name "Response" is not defined 
[name-defined]
    def create() -> "str | Response":
                    ^
app/routes/credentials.py:127:44: error: Argument 1 to "validate_username" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            username_error = validate_username(data.get("username"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:135:44: error: Argument 1 to "validate_password" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            password_error = validate_password(data.get("password"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:144:46: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                db_type_error = validate_db_type(data.get("db_type"))
                                                 ^~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:152:58: error: Argument 1 to
"validate_credential_type" has incompatible type "Any | str | None"; expected
"str"  [arg-type]
    ...credential_type_error = validate_credential_type(data.get("credential_...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/routes/credentials.py:171:22: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    name=data.get("name").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:172:33: error: Argument "credential_type" to
"Credential" has incompatible type "Any | str | None"; expected "str" 
[arg-type]
                    credential_type=data.get("credential_type"),
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:173:26: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    username=data.get("username").strip(),
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:174:26: error: Argument "password" to "Credential"
has incompatible type "Any | str | None"; expected "str"  [arg-type]
                    password=data.get("password"),
                             ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:227:2: error: Untyped decorator makes function
"detail" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:228:2: error: Untyped decorator makes function
"detail" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/credentials.py: note: In function "detail":
app/routes/credentials.py:234:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(credential.to_dict())
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:240:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:241:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/credentials.py: note: In function "edit":
app/routes/credentials.py:242:33: error: Name "Response" is not defined 
[name-defined]
    def edit(credential_id: int) -> "str | Response":
                                    ^
app/routes/credentials.py:262:44: error: Argument 1 to "validate_username" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            username_error = validate_username(data.get("username"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:271:48: error: Argument 1 to "validate_password" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                password_error = validate_password(data.get("password"))
                                                   ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:280:46: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                db_type_error = validate_db_type(data.get("db_type"))
                                                 ^~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:288:58: error: Argument 1 to
"validate_credential_type" has incompatible type "Any | str | None"; expected
"str"  [arg-type]
    ...credential_type_error = validate_credential_type(data.get("credential_...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/routes/credentials.py:314:42: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    credential.description = data.get("description").strip...
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:360:2: error: Untyped decorator makes function
"toggle" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:361:2: error: Untyped decorator makes function
"toggle" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/credentials.py: note: In function "toggle":
app/routes/credentials.py:362:35: error: Name "Response" is not defined 
[name-defined]
    def toggle(credential_id: int) -> "Response":
                                      ^
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:405:2: error: Untyped decorator makes function
"delete" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:406:2: error: Untyped decorator makes function
"delete" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/credentials.py: note: In function "delete":
app/routes/credentials.py:407:35: error: Name "Response" is not defined 
[name-defined]
    def delete(credential_id: int) -> "Response":
                                      ^
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:433:2: error: Untyped decorator makes function
"test_credential" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:434:2: error: Untyped decorator makes function
"test_credential" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/credentials.py: note: In function "test_credential":
app/routes/credentials.py:435:44: error: Name "Response" is not defined 
[name-defined]
    def test_credential(credential_id: int) -> "Response":
                                               ^
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:465:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:466:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/credentials.py: note: In function "api_list":
app/routes/credentials.py:467:19: error: Name "Response" is not defined 
[name-defined]
    def api_list() -> "Response":
                      ^
app/routes/credentials.py: note: At top level:
app/routes/credentials.py:474:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/credentials.py:475:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/credentials.py: note: In function "api_detail":
app/routes/credentials.py:476:39: error: Name "Response" is not defined 
[name-defined]
    def api_detail(credential_id: int) -> "Response":
                                          ^
app/routes/auth.py:12:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required, login_user, logo...
    ^
app/routes/auth.py: note: In function "login":
app/routes/auth.py:29:16: error: Name "Response" is not defined  [name-defined]
    def login() -> "str | Response":
                   ^
app/routes/auth.py: note: At top level:
app/routes/auth.py:102:2: error: Untyped decorator makes function "logout"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/auth.py: note: In function "logout":
app/routes/auth.py:103:17: error: Name "Response" is not defined 
[name-defined]
    def logout() -> "Response":
                    ^
app/routes/auth.py: note: At top level:
app/routes/auth.py:127:2: error: Untyped decorator makes function "profile"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/auth.py: note: In function "profile":
app/routes/auth.py:128:18: error: Name "Response" is not defined 
[name-defined]
    def profile() -> "str | Response":
                     ^
app/routes/auth.py: note: At top level:
app/routes/auth.py:147:2: error: Untyped decorator makes function
"change_password" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/auth.py: note: In function "change_password":
app/routes/auth.py:149:26: error: Name "Response" is not defined 
[name-defined]
    def change_password() -> "str | Response":
                             ^
app/routes/auth.py: note: At top level:
app/routes/auth.py:203:2: error: Untyped decorator makes function "refresh"
untyped  [misc]
    @jwt_required(refresh=True)
     ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/auth.py: note: In function "refresh":
app/routes/auth.py:204:18: error: Name "Response" is not defined 
[name-defined]
    def refresh() -> "Response":
                     ^
app/routes/auth.py: note: At top level:
app/routes/auth.py:212:2: error: Untyped decorator makes function "me" untyped 
[misc]
    @jwt_required()
     ^~~~~~~~~~~~~~
app/routes/auth.py: note: In function "me":
app/routes/auth.py:213:13: error: Name "Response" is not defined 
[name-defined]
    def me() -> "Response":
                ^
app/middleware/error_logging_middleware.py:11:1: error: Skipping analyzing
"flask_login": module is installed, but missing library stubs or py.typed marker
 [import-untyped]
    from flask_login import current_user
    ^
app/middleware/error_logging_middleware.py: note: In function "register_error_logging_middleware":
app/middleware/error_logging_middleware.py:73:9: error: No return value
expected  [return-value]
            return response
            ^~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py:75:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(400)
         ^
app/middleware/error_logging_middleware.py:79:9: error: No return value
expected  [return-value]
            return {"error": "请求参数错误", "message": str(error), "status_code...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:81:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(401)
         ^
app/middleware/error_logging_middleware.py:85:9: error: No return value
expected  [return-value]
            return {"error": "未授权访问", "message": "请先登录", "status_code": 40...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:87:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(403)
         ^
app/middleware/error_logging_middleware.py:91:9: error: No return value
expected  [return-value]
            return {"error": "禁止访问", "message": "您没有权限访问此资源", "status_code...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:93:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(404)
         ^
app/middleware/error_logging_middleware.py:101:9: error: No return value
expected  [return-value]
            return {"error": "资源未找到", "message": "请求的资源不存在", "status_code"...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:103:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(500)
         ^
app/middleware/error_logging_middleware.py:107:9: error: No return value
expected  [return-value]
            return {"error": "服务器内部错误", "message": "系统出现错误，请稍后重试", "status...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:109:6: error: Value of type variable
"T_error_handler" of function cannot be "Callable[[Exception], None]" 
[type-var]
        @app.errorhandler(Exception)
         ^
app/middleware/error_logging_middleware.py:132:9: error: No return value
expected  [return-value]
            return {"error": "系统错误", "message": "系统出现错误，请稍后重试", "status_co...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py: note: In function "_find_related_sync_logs":
app/middleware/error_logging_middleware.py:186:74: error: Missing type
parameters for generic type "list"  [type-arg]
    ...d_related_sync_logs(start_time: datetime, end_time: datetime) -> list:
                                                                        ^
app/middleware/error_logging_middleware.py:201:9: error: Returning Any from
function declared to return "list[Any]"  [no-any-return]
            return sync_logs
            ^~~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py: note: In function "_merge_batch_sync_logs":
app/middleware/error_logging_middleware.py:208:32: error: Missing type
parameters for generic type "list"  [type-arg]
        start_log: Log, sync_logs: list, end_time: datetime, duration: flo...
                                   ^
app/middleware/error_logging_middleware.py:293:9: error: No return value
expected  [return-value]
            return merged_log
            ^~~~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py: note: In function "_handle_batch_sync_log_merge":
app/middleware/error_logging_middleware.py:326:22: error:
"_merge_batch_sync_logs" does not return a value (it only ever returns None) 
[func-returns-value]
            merged_log = _merge_batch_sync_logs(start_log, sync_logs, end_...
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/tasks.py: note: In function "cleanup_old_logs":
app/tasks.py:18:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def cleanup_old_logs():
    ^
app/tasks.py:30:29: error: Call to untyped function "_cleanup_temp_files" in
typed context  [no-untyped-call]
                cleaned_files = _cleanup_temp_files()
                                ^~~~~~~~~~~~~~~~~~~~~
app/tasks.py: note: In function "_cleanup_temp_files":
app/tasks.py:65:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _cleanup_temp_files():
    ^
app/tasks.py: note: In function "sync_accounts":
app/tasks.py:92:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def sync_accounts():
    ^
app/tasks.py:207:29: error: Argument "instance_id" to "SyncData" has
incompatible type "None"; expected "int"  [arg-type]
                    instance_id=None,  # 聚合记录没有单一实例ID
                                ^~~~
app/tasks.py:216:22: error: Argument "data" to "SyncData" has incompatible type
"dict[str, object]"; expected "str | None"  [arg-type]
                    data={
                         ^
app/tasks.py:239:29: error: Argument "instance_id" to "SyncData" has
incompatible type "None"; expected "int"  [arg-type]
                    instance_id=None,
                                ^~~~
app/tasks.py:245:22: error: Argument "data" to "SyncData" has incompatible type
"dict[str, str]"; expected "str | None"  [arg-type]
                    data={"error": str(e)},
                         ^~~~~~~~~~~~~~~~~
app/tasks.py: note: In function "health_check":
app/tasks.py:253:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def health_check():
    ^
app/tasks.py: note: In function "cleanup_temp_files":
app/tasks.py:283:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def cleanup_temp_files():
    ^
app/routes/database_types.py:7:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import login_required
    ^
app/routes/database_types.py:15:2: error: Untyped decorator makes function
"index" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py:23:2: error: Untyped decorator makes function
"create" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "create":
app/routes/database_types.py:24:17: error: Name "Response" is not defined 
[name-defined]
    def create() -> "Response":
                    ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:33:2: error: Untyped decorator makes function
"edit" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "edit":
app/routes/database_types.py:34:27: error: Name "Response" is not defined 
[name-defined]
    def edit(type_id: int) -> "Response":
                              ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:43:2: error: Untyped decorator makes function
"delete" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "delete":
app/routes/database_types.py:44:29: error: Name "Response" is not defined 
[name-defined]
    def delete(type_id: int) -> "Response":
                                ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:53:2: error: Untyped decorator makes function
"toggle_status" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "toggle_status":
app/routes/database_types.py:54:36: error: Name "Response" is not defined 
[name-defined]
    def toggle_status(type_id: int) -> "Response":
                                       ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:60:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "api_list":
app/routes/database_types.py:61:19: error: Name "Response" is not defined 
[name-defined]
    def api_list() -> "Response":
                      ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:68:2: error: Untyped decorator makes function
"api_active" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "api_active":
app/routes/database_types.py:69:21: error: Name "Response" is not defined 
[name-defined]
    def api_active() -> "Response":
                        ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:76:2: error: Untyped decorator makes function
"api_form_options" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "api_form_options":
app/routes/database_types.py:77:27: error: Name "Response" is not defined 
[name-defined]
    def api_form_options() -> "Response":
                              ^
app/routes/database_types.py: note: At top level:
app/routes/database_types.py:84:2: error: Untyped decorator makes function
"init_defaults" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/database_types.py: note: In function "init_defaults":
app/routes/database_types.py:85:24: error: Name "Response" is not defined 
[name-defined]
    def init_defaults() -> "Response":
                           ^
app/routes/account_sync.py:10:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_sync.py:24:2: error: Untyped decorator makes function
"sync_records" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:248:2: error: Untyped decorator makes function
"sync_all_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:281: error: Unused "type: ignore" comment 
[unused-ignore]
                        sync_record = SyncData(  # type: ignore
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_sync.py:301: error: Unused "type: ignore" comment 
[unused-ignore]
                        sync_record = SyncData(  # type: ignore
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_sync.py:325: error: Unused "type: ignore" comment 
[unused-ignore]
                    sync_record = SyncData(  # type: ignore
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_sync.py:396:2: error: Untyped decorator makes function
"sync_details_batch" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:472:2: error: Untyped decorator makes function
"sync_details" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py: note: In function "sync_details":
app/routes/account_sync.py:499:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("account_sync.sync_records"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py:8:1: error: Skipping analyzing
"flask_login": module is installed, but missing library stubs or py.typed marker
 [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_classification.py:24:2: error: Untyped decorator makes
function "index" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:25:2: error: Untyped decorator makes
function "index" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py:32:2: error: Untyped decorator makes
function "rules" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:33:2: error: Untyped decorator makes
function "rules" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py:40:2: error: Untyped decorator makes
function "get_classifications" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:41:2: error: Untyped decorator makes
function "get_classifications" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_classifications":
app/routes/account_classification.py:42:30: error: Name "Response" is not
defined  [name-defined]
    def get_classifications() -> "Response":
                                 ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:84:2: error: Untyped decorator makes
function "create_classification" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:85:2: error: Untyped decorator makes
function "create_classification" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "create_classification":
app/routes/account_classification.py:86:32: error: Name "Response" is not
defined  [name-defined]
    def create_classification() -> "Response":
                                   ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:125:2: error: Untyped decorator makes
function "get_classification" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:126:2: error: Untyped decorator makes
function "get_classification" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_classification":
app/routes/account_classification.py:127:51: error: Name "Response" is not
defined  [name-defined]
    def get_classification(classification_id: int) -> "Response":
                                                      ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:155:2: error: Untyped decorator makes
function "update_classification" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:156:2: error: Untyped decorator makes
function "update_classification" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "update_classification":
app/routes/account_classification.py:157:54: error: Name "Response" is not
defined  [name-defined]
    def update_classification(classification_id: int) -> "Response":
                                                         ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:180:2: error: Untyped decorator makes
function "delete_classification" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:181:2: error: Untyped decorator makes
function "delete_classification" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "delete_classification":
app/routes/account_classification.py:182:54: error: Name "Response" is not
defined  [name-defined]
    def delete_classification(classification_id: int) -> "Response":
                                                         ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:203:2: error: Untyped decorator makes
function "get_rules" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:204:2: error: Untyped decorator makes
function "get_rules" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_rules":
app/routes/account_classification.py:205:20: error: Name "Response" is not
defined  [name-defined]
    def get_rules() -> "Response":
                       ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:245:2: error: Untyped decorator makes
function "list_rules" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:246:2: error: Untyped decorator makes
function "list_rules" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "list_rules":
app/routes/account_classification.py:247:21: error: Name "Response" is not
defined  [name-defined]
    def list_rules() -> "Response":
                        ^
app/routes/account_classification.py:274:9: error: Need type annotation for
"rules_by_db_type" (hint: "rules_by_db_type: dict[<type>, <type>] = ...") 
[var-annotated]
            rules_by_db_type = {}
            ^~~~~~~~~~~~~~~~
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:289:2: error: Untyped decorator makes
function "create_rule" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:290:2: error: Untyped decorator makes
function "create_rule" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "create_rule":
app/routes/account_classification.py:291:22: error: Name "Response" is not
defined  [name-defined]
    def create_rule() -> "Response":
                         ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:319:2: error: Untyped decorator makes
function "get_rule" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:320:2: error: Untyped decorator makes
function "get_rule" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_rule":
app/routes/account_classification.py:321:31: error: Name "Response" is not
defined  [name-defined]
    def get_rule(rule_id: int) -> "Response":
                                  ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:352:2: error: Untyped decorator makes
function "update_rule" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:353:2: error: Untyped decorator makes
function "update_rule" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "update_rule":
app/routes/account_classification.py:354:34: error: Name "Response" is not
defined  [name-defined]
    def update_rule(rule_id: int) -> "Response":
                                     ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:379:2: error: Untyped decorator makes
function "get_matched_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:380:2: error: Untyped decorator makes
function "get_matched_accounts" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_matched_accounts":
app/routes/account_classification.py:381:43: error: Name "Response" is not
defined  [name-defined]
    def get_matched_accounts(rule_id: int) -> "Response":
                                              ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:453:2: error: Untyped decorator makes
function "delete_rule" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:454:2: error: Untyped decorator makes
function "delete_rule" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "delete_rule":
app/routes/account_classification.py:455:34: error: Name "Response" is not
defined  [name-defined]
    def delete_rule(rule_id: int) -> "Response":
                                     ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:472:2: error: Untyped decorator makes
function "assign_classification" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:473:2: error: Untyped decorator makes
function "assign_classification" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "assign_classification":
app/routes/account_classification.py:474:32: error: Name "Response" is not
defined  [name-defined]
    def assign_classification() -> "Response":
                                   ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:490:2: error: Untyped decorator makes
function "auto_classify" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:491:2: error: Untyped decorator makes
function "auto_classify" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "auto_classify":
app/routes/account_classification.py:492:24: error: Name "Response" is not
defined  [name-defined]
    def auto_classify() -> "Response":
                           ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:527:2: error: Untyped decorator makes
function "get_assignments" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:528:2: error: Untyped decorator makes
function "get_assignments" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_assignments":
app/routes/account_classification.py:529:26: error: Name "Response" is not
defined  [name-defined]
    def get_assignments() -> "Response":
                             ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:562:2: error: Untyped decorator makes
function "remove_assignment" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:563:2: error: Untyped decorator makes
function "remove_assignment" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "remove_assignment":
app/routes/account_classification.py:564:46: error: Name "Response" is not
defined  [name-defined]
    def remove_assignment(assignment_id: int) -> "Response":
                                                 ^
app/routes/account_classification.py: note: At top level:
app/routes/account_classification.py:580:2: error: Untyped decorator makes
function "get_permissions" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_classification.py:581:2: error: Untyped decorator makes
function "get_permissions" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_permissions":
app/routes/account_classification.py:582:38: error: Name "Response" is not
defined  [name-defined]
    def get_permissions(db_type: str) -> "Response":
                                         ^
app/routes/account_classification.py: note: In function "_get_db_permissions":
app/routes/account_classification.py:593:42: error: Missing type parameters for
generic type "dict"  [type-arg]
    def _get_db_permissions(db_type: str) -> dict:
                                             ^
app/services/connection_factory.py: note: In member "execute_query" of class "DatabaseConnection":
app/services/connection_factory.py:37:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py: note: In member "connect" of class "MySQLConnection":
app/services/connection_factory.py:60:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("mysql")...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py: note: In member "disconnect" of class "MySQLConnection":
app/services/connection_factory.py:81:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "MySQLConnection":
app/services/connection_factory.py:106:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:113:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: At top level:
app/services/connection_factory.py:135:1: error: Cannot find implementation or
library stub for module named "psycopg"  [import-not-found]
                import psycopg
    ^
app/services/connection_factory.py: note: In member "connect" of class "PostgreSQLConnection":
app/services/connection_factory.py:144:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("postgre...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py: note: In member "disconnect" of class "PostgreSQLConnection":
app/services/connection_factory.py:160:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "PostgreSQLConnection":
app/services/connection_factory.py:185:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:192:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "connect" of class "SQLServerConnection":
app/services/connection_factory.py:221:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("sqlserv...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py:225:31: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                self.connection = pymssql.connect(
                                  ^
app/services/connection_factory.py: note: In member "disconnect" of class "SQLServerConnection":
app/services/connection_factory.py:243:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "SQLServerConnection":
app/services/connection_factory.py:268:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:275:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "connect" of class "OracleConnection":
app/services/connection_factory.py:305:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("oracle"...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py:325:35: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                    self.connection = oracledb.connect(
                                      ^
app/services/connection_factory.py:335:43: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                            self.connection = oracledb.connect(
                                              ^
app/services/connection_factory.py: note: In member "disconnect" of class "OracleConnection":
app/services/connection_factory.py:356:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "OracleConnection":
app/services/connection_factory.py:381:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:388:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "create_connection" of class "ConnectionFactory":
app/services/connection_factory.py:429:23: error: Argument 1 to "log_error" has
incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"不支持的数据库类型: {db_type}", context={"instance_id":...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py:433:16: error: Cannot instantiate abstract
class "DatabaseConnection" with abstract attributes "connect", "disconnect",
"execute_query", "get_version" and "test_connection"  [abstract]
            return connection_class(instance)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "get_supported_types" of class "ConnectionFactory":
app/services/connection_factory.py:453:34: error: Missing type parameters for
generic type "list"  [type-arg]
        def get_supported_types() -> list:
                                     ^
app/services/permission_query_factory.py: note: In member "_get_connection" of class "PermissionQuery":
app/services/permission_query_factory.py:43:31: error: Incompatible types in
assignment (expression has type "DatabaseConnection | None", variable has type
"None")  [assignment]
                self.connection = ConnectionFactory.create_connection(self...
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/permission_query_factory.py: note: In member "get_account_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:376:13: error: Need type annotation
for "database_roles" (hint: "database_roles: dict[<type>, <type>] = ...") 
[var-annotated]
                database_roles = {}
                ^~~~~~~~~~~~~~
app/services/permission_query_factory.py:378:13: error: Need type annotation
for "database_privileges" (hint:
"database_privileges: dict[<type>, <type>] = ...")  [var-annotated]
                database_privileges = {}
                ^~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_database_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:471:13: error: Need type annotation
for "db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:534:13: error: Need type annotation
for "table_permissions" (hint: "table_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                table_permissions = {}
                ^~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:742:13: error: Need type annotation
for "table_permissions" (hint: "table_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                table_permissions = {}
                ^~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "create_query" of class "PermissionQueryFactory":
app/services/permission_query_factory.py:788:23: error: Argument 1 to
"log_error" has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"不支持的数据库类型: {db_type}", context={"instance_id":...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:792:16: error: Cannot instantiate
abstract class "PermissionQuery" with abstract attributes
"get_account_permissions", "get_database_permissions", "get_global_permissions"
and "get_table_permissions"  [abstract]
            return query_class(instance)
                   ^~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_supported_types" of class "PermissionQueryFactory":
app/services/permission_query_factory.py:813:34: error: Missing type parameters
for generic type "list"  [type-arg]
        def get_supported_types() -> list:
                                     ^
app/services/database_service.py: note: In member "__init__" of class "DatabaseService":
app/services/database_service.py:21:9: error: Need type annotation for
"connections" (hint: "connections: dict[<type>, <type>] = ...")  [var-annotated]
            self.connections = {}
            ^~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "sync_accounts" of class "DatabaseService":
app/services/database_service.py:173:22: error: Argument "data" to "SyncData"
has incompatible type "dict[str, Any]"; expected "str | None"  [arg-type]
                    data={
                         ^
app/services/database_service.py:217:22: error: Argument "data" to "SyncData"
has incompatible type "dict[str, Any]"; expected "str | None"  [arg-type]
                    data={
                         ^
app/services/database_service.py: note: In member "_sync_mysql_accounts" of class "DatabaseService":
app/services/database_service.py:359:9: error: Name "logging" is not defined 
[name-defined]
            logging.info(
            ^~~~~~~
app/services/database_service.py: note: In function "_sync_postgresql_accounts":
app/services/database_service.py:386:17: error: Returning Any from function
declared to return "bool"  [no-any-return]
                    return valid_until < now()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_sync_postgresql_accounts" of class "DatabaseService":
app/services/database_service.py:460:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("postgre...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:487:35: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        database_name=DatabaseTypeUtils.get_database_type_...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:549:9: error: Name "logging" is not defined 
[name-defined]
            logging.info(
            ^~~~~~~
app/services/database_service.py: note: In member "_sync_sqlserver_accounts" of class "DatabaseService":
app/services/database_service.py:602:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("sqlserv...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:626:24: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        or DatabaseTypeUtils.get_database_type_config("sql...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:692:9: error: Name "logging" is not defined 
[name-defined]
            logging.info(
            ^~~~~~~
app/services/database_service.py: note: In member "_sync_oracle_accounts" of class "DatabaseService":
app/services/database_service.py:754:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("oracle"...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:781:24: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        or DatabaseTypeUtils.get_database_type_config("ora...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:857:9: error: Name "logging" is not defined 
[name-defined]
            logging.info(
            ^~~~~~~
app/services/database_service.py: note: In member "get_connection" of class "DatabaseService":
app/services/database_service.py:908:17: error: Statement is unreachable 
[unreachable]
                    self.connections[instance.id] = conn
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py:909:17: error: Name "log_operation" is not
defined  [name-defined]
                    log_operation(
                    ^~~~~~~~~~~~~
app/services/database_service.py:921:23: error: Argument 1 to "log_error" has
incompatible type "Exception"; expected "str"  [arg-type]
                log_error(e, module="database", context={"instance_id": in...
                          ^
app/services/database_service.py: note: In member "get_database_version" of class "DatabaseService":
app/services/database_service.py:946:13: error: Name "logging" is not defined 
[name-defined]
                logging.error(f"获取数据库版本失败: {e}")
                ^~~~~~~
app/services/database_service.py: note: In member "close_connection" of class "DatabaseService":
app/services/database_service.py:979:17: error: Name "log_operation" is not
defined  [name-defined]
                    log_operation(
                    ^~~~~~~~~~~~~
app/services/database_service.py:984:23: error: Argument 1 to "log_error" has
incompatible type "Exception"; expected "str"  [arg-type]
                log_error(e, context={"instance_id": instance.id})
                          ^
app/services/database_service.py: note: In member "close_all_connections" of class "DatabaseService":
app/services/database_service.py:1003:27: error: Argument 1 to "log_error" has
incompatible type "Exception"; expected "str"  [arg-type]
                    log_error(e, context={"instance_id": instance_id})
                              ^
app/services/database_service.py: note: In member "execute_query" of class "DatabaseService":
app/services/database_service.py:1071:69: error: Missing type parameters for
generic type "tuple"  [type-arg]
    ...ry(self, instance: Instance, query: str, params: tuple = None) -> dict...
                                                        ^
app/services/database_service.py:1071:77: error: Incompatible default for
argument "params" (default has type "None", argument has type "tuple[Any, ...]")
 [assignment]
    ... instance: Instance, query: str, params: tuple = None) -> dict[str, An...
                                                        ^~~~
app/services/database_service.py:1071:77: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_service.py:1071:77: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/database_service.py:1120:17: error: Argument 1 to "log_error" has
incompatible type "Exception"; expected "str"  [arg-type]
                    e,
                    ^
app/services/database_service.py: note: In member "_get_mysql_permissions" of class "DatabaseService":
app/services/database_service.py:1275:17: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                    db_permissions = {}
                    ^~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_sqlserver_permissions" of class "DatabaseService":
app/services/database_service.py:1443:13: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/database_service.py:1470:13: error: Need type annotation for
"database_roles" (hint: "database_roles: dict[<type>, <type>] = ...") 
[var-annotated]
                database_roles = {}
                ^~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_mysql_version" of class "DatabaseService":
app/services/database_service.py:1576:13: error: Returning Any from function
declared to return "str | None"  [no-any-return]
                return version
                ^~~~~~~~~~~~~~
app/services/database_service.py:1578:13: error: Name "logging" is not defined 
[name-defined]
                logging.error(f"获取MySQL版本失败: {e}")
                ^~~~~~~
app/services/database_service.py: note: In member "_get_postgresql_version" of class "DatabaseService":
app/services/database_service.py:1594:13: error: Name "logging" is not defined 
[name-defined]
                logging.error(f"获取PostgreSQL版本失败: {e}")
                ^~~~~~~
app/services/database_service.py: note: In member "_get_sqlserver_version" of class "DatabaseService":
app/services/database_service.py:1610:13: error: Name "logging" is not defined 
[name-defined]
                logging.error(f"获取SQL Server版本失败: {e}")
                ^~~~~~~
app/services/database_service.py: note: In member "_get_oracle_version" of class "DatabaseService":
app/services/database_service.py:1626:13: error: Name "logging" is not defined 
[name-defined]
                logging.error(f"获取Oracle版本失败: {e}")
                ^~~~~~~
app/routes/instances.py:8:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/instances.py:31:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:32:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "index":
app/routes/instances.py:71:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/instances.py: note: At top level:
app/routes/instances.py:99:2: error: Untyped decorator makes function "create"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:100:2: error: Untyped decorator makes function "create"
untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "create":
app/routes/instances.py:122:42: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            db_type_error = validate_db_type(data.get("db_type"))
                                             ^~~~~~~~~~~~~~~~~~~
app/routes/instances.py:140:24: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                port = int(data.get("port"))
                           ^~~~~~~~~~~~~~~~
app/routes/instances.py:154:37: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id = int(data.get("credential_id"))
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:178:22: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    name=data.get("name").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:179:25: error: Argument "db_type" to "Instance" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                    db_type=data.get("db_type"),
                            ^~~~~~~~~~~~~~~~~~~
app/routes/instances.py:180:22: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    host=data.get("host").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:181:26: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    port=int(data.get("port")),
                             ^~~~~~~~~~~~~~~~
app/routes/instances.py:183:36: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id=(int(data.get("credential_id")) if data....
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:211:20: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
                return redirect(url_for("instances.index"))
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:252:2: error: Untyped decorator makes function
"test_instance_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:253:2: error: Untyped decorator makes function
"test_instance_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "test_instance_connection":
app/routes/instances.py:259:34: error: If x = b'abc' then f"{x}" or
"{}".format(x) produces "b'abc'", not "abc". If this is desired behavior, use
f"{x!r}" or "{!r}".format(x). Otherwise, decode the bytes  [str-bytes-safe]
            log_info(f"请求数据: {request.get_data()}", module="instances")
                                     ^~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:361:2: error: Untyped decorator makes function "detail"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:362:2: error: Untyped decorator makes function "detail"
untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:374:2: error: Untyped decorator makes function
"statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:375:2: error: Untyped decorator makes function
"statistics" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:387:2: error: Untyped decorator makes function
"api_statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:388:2: error: Untyped decorator makes function
"api_statistics" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:396:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:397:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "edit":
app/routes/instances.py:418:42: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            db_type_error = validate_db_type(data.get("db_type"))
                                             ^~~~~~~~~~~~~~~~~~~
app/routes/instances.py:436:24: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                port = int(data.get("port"))
                           ^~~~~~~~~~~~~~~~
app/routes/instances.py:450:37: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id = int(data.get("credential_id"))
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:481:42: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                instance.credential_id = int(data.get("credential_id")) if...
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:484:40: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    instance.description = data.get("description").strip()
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:519:20: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
                return redirect(url_for("instances.detail", instance_id=in...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/instances.py: note: At top level:
app/routes/instances.py:563:2: error: Untyped decorator makes function "delete"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:564:2: error: Untyped decorator makes function "delete"
untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "delete":
app/routes/instances.py:613:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("instances.index"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:623:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("instances.index"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:627:2: error: Untyped decorator makes function
"batch_delete" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:628:2: error: Untyped decorator makes function
"batch_delete" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py:712:2: error: Untyped decorator makes function
"batch_create" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:713:2: error: Untyped decorator makes function
"batch_create" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "batch_create":
app/routes/instances.py:720:25: error: Item "None" of "str | None" has no
attribute "endswith"  [union-attr]
                if file and file.filename.endswith(".csv"):
                            ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:721:24: error: Incompatible return value type (got
"dict[str, Any] | Response | tuple[Response, int]", expected
"str | Response | tuple[Response, int]")  [return-value]
                    return _process_csv_file(file)
                           ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:731:16: error: Incompatible return value type (got
"dict[str, Any] | Response | tuple[Response, int]", expected
"str | Response | tuple[Response, int]")  [return-value]
            return _process_instances_data(instances_data)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "_process_instances_data":
app/routes/instances.py:818:22: error: Argument "tags" to "Instance" has
incompatible type "dict[Never, Never]"; expected "str | None"  [arg-type]
                    tags={},
                         ^~
app/routes/instances.py: note: At top level:
app/routes/instances.py:861:2: error: Untyped decorator makes function
"export_instances" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:862:2: error: Untyped decorator makes function
"export_instances" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:957:2: error: Untyped decorator makes function
"download_template" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:958:2: error: Untyped decorator makes function
"download_template" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1034:2: error: Untyped decorator makes function
"test_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1035:2: error: Untyped decorator makes function
"test_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "test_connection":
app/routes/instances.py:1068:12: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
        return redirect(url_for("instances.detail", instance_id=instance_i...
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1072:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1073:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "sync_accounts":
app/routes/instances.py:1154:12: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
        return redirect(url_for("instances.detail", instance_id=instance_i...
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1159:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1160:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1168:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1169:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1177:2: error: Untyped decorator makes function
"api_test_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1178:2: error: Untyped decorator makes function
"api_test_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1192:2: error: Untyped decorator makes function
"api_test_instance_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1193:2: error: Untyped decorator makes function
"api_test_instance_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "api_test_instance_connection":
app/routes/instances.py:1200:9: error: Name "logging" is not defined 
[name-defined]
            logging.info(f"收到API测试连接请求，Content-Type: {request.content_type...
            ^~~~~~~
app/routes/instances.py:1201:34: error: If x = b'abc' then f"{x}" or
"{}".format(x) produces "b'abc'", not "abc". If this is desired behavior, use
f"{x!r}" or "{!r}".format(x). Otherwise, decode the bytes  [str-bytes-safe]
            log_info(f"请求数据: {request.get_data()}", module="instances")
                                     ^~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1387:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1388:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_list.py:8:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_list.py:24:2: error: Untyped decorator makes function
"list_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_list.py:25:2: error: Untyped decorator makes function
"list_accounts" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_list.py: note: In function "list_accounts":
app/routes/account_list.py:103:5: error: Need type annotation for
"classifications" (hint: "classifications: dict[<type>, <type>] = ...") 
[var-annotated]
        classifications = {}
        ^~~~~~~~~~~~~~~
app/routes/account_list.py:121:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/account_list.py: note: At top level:
app/routes/account_list.py:158:2: error: Untyped decorator makes function
"export_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_list.py:159:2: error: Untyped decorator makes function
"export_accounts" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_list.py: note: In function "export_accounts":
app/routes/account_list.py:160:26: error: Name "Response" is not defined 
[name-defined]
    def export_accounts() -> "Response":
                             ^
app/routes/account_list.py:209:5: error: Need type annotation for
"classifications" (hint: "classifications: dict[<type>, <type>] = ...") 
[var-annotated]
        classifications = {}
        ^~~~~~~~~~~~~~~
app/routes/account_list.py: note: At top level:
app/routes/account_list.py:291:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_list.py:292:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_list.py: note: In function "sync_accounts":
app/routes/account_list.py:293:40: error: Name "Response" is not defined 
[name-defined]
    def sync_accounts(instance_id: int) -> "Response":
                                           ^
app/routes/account_list.py: note: At top level:
app/routes/account_list.py:378:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_list.py:379:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/account_list.py: note: In function "get_account_permissions":
app/routes/account_list.py:380:49: error: Name "Response" is not defined 
[name-defined]
    def get_account_permissions(account_id: int) -> "Response":
                                                    ^
app/routes/account_list.py: note: At top level:
app/routes/account_list.py:411:2: error: Untyped decorator makes function
"api_sync_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_list.py:412:2: error: Untyped decorator makes function
"api_sync_accounts" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/account_list.py: note: In function "api_sync_accounts":
app/routes/account_list.py:413:44: error: Name "Response" is not defined 
[name-defined]
    def api_sync_accounts(instance_id: int) -> "Response":
                                               ^
app/utils/validation.py: note: In member "sanitize_html" of class "InputValidator":
app/utils/validation.py:267:9: error: Need type annotation for
"allowed_attributes" (hint: "allowed_attributes: dict[<type>, <type>] = ...") 
[var-annotated]
            allowed_attributes = {}
            ^~~~~~~~~~~~~~~~~~
app/utils/validation.py:272:9: error: Returning Any from function declared to
return "str"  [no-any-return]
            return cleaned
            ^~~~~~~~~~~~~~
app/utils/validation.py: note: In member "validate_json" of class "InputValidator":
app/utils/validation.py:315:40: error: Missing type parameters for generic type
"dict"  [type-arg]
        def validate_json(json_data: str | dict) -> dict | None:
                                           ^
app/utils/validation.py:332:17: error: Returning Any from function declared to
return "dict[Any, Any] | None"  [no-any-return]
                    return json.loads(json_data)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/validation.py:336:9: error: Statement is unreachable  [unreachable]
            return None
            ^~~~~~~~~~~
app/utils/validation.py: note: In member "validate_request_data" of class "InputValidator":
app/utils/validation.py:373:48: error: Item "None" of "Any | None" has no
attribute "get"  [union-attr]
                value = request.form.get(field) or request.json.get(field)...
                                                   ^~~~~~~~~~~~~~~~
app/utils/validation.py:383:48: error: Item "None" of "Any | None" has no
attribute "get"  [union-attr]
                        request.form.get(field) or request.json.get(field)...
                                                   ^~~~~~~~~~~~~~~~
app/utils/validation.py: note: In function "validate_instance_data":
app/utils/validation.py:414:47: error: Argument 1 to "validate_db_type" of
"InputValidator" has incompatible type "Any | None"; expected "str"  [arg-type]
        db_type = InputValidator.validate_db_type(data.get("db_type"))
                                                  ^~~~~~~~~~~~~~~~~~~
app/utils/validation.py:438:25: error: Incompatible types in assignment
(expression has type "int", target has type "str")  [assignment]
        validated["port"] = port
                            ^~~~
app/utils/validation.py:459:30: error: Incompatible types in assignment
(expression has type "bool", target has type "str")  [assignment]
        validated["is_active"] = is_active if is_active is not None else T...
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/validation.py: note: In function "validate_credential_data":
app/utils/validation.py:509:30: error: Incompatible types in assignment
(expression has type "bool", target has type "str")  [assignment]
        validated["is_active"] = is_active if is_active is not None else T...
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/db_context.py: note: In member "__init__" of class "DatabaseContextManager":
app/utils/db_context.py:19:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/db_context.py:19:5: note: Use "-> None" if function does not return a value
app/utils/db_context.py: note: In member "execute_query" of class "DatabaseContextManager":
app/utils/db_context.py:56:69: error: Missing type parameters for generic type
"tuple"  [type-arg]
    ...ry(self, instance: Instance, query: str, params: tuple = None) -> Gene...
                                                        ^
app/utils/db_context.py:56:77: error: Incompatible default for argument
"params" (default has type "None", argument has type "tuple[Any, ...]") 
[assignment]
    ... instance: Instance, query: str, params: tuple = None) -> Generator[di...
                                                        ^~~~
app/utils/db_context.py:56:77: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/db_context.py:56:77: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/db_context.py:56:96: error: Missing type parameters for generic type
"dict"  [type-arg]
    ...tance: Instance, query: str, params: tuple = None) -> Generator[dict]:
                                                                       ^
app/utils/db_context.py: note: At top level:
app/utils/db_context.py:132:14: error: Call to untyped function
"DatabaseContextManager" in typed context  [no-untyped-call]
    db_context = DatabaseContextManager()
                 ^~~~~~~~~~~~~~~~~~~~~~~~
app/utils/db_context.py: note: In function "execute_db_query":
app/utils/db_context.py:144:62: error: Missing type parameters for generic type
"tuple"  [type-arg]
    ...db_query(instance: Instance, query: str, params: tuple = None) -> Gene...
                                                        ^
app/utils/db_context.py:144:70: error: Incompatible default for argument
"params" (default has type "None", argument has type "tuple[Any, ...]") 
[assignment]
    ...(instance: Instance, query: str, params: tuple = None) -> Generator[di...
                                                        ^~~~
app/utils/db_context.py:144:70: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/db_context.py:144:70: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/db_context.py:144:89: error: Missing type parameters for generic type
"dict"  [type-arg]
    ...tance: Instance, query: str, params: tuple = None) -> Generator[dict]:
                                                                       ^
app/services/database_size_service.py:13:1: error: Cannot find implementation
or library stub for module named "psycopg"  [import-not-found]
        import psycopg
    ^
app/services/database_size_service.py:25:16: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        oracledb = None
                   ^~~~
app/services/database_size_service.py: note: In member "_get_connection" of class "DatabaseSizeService":
app/services/database_size_service.py:121:21: error: Statement is unreachable 
[unreachable]
                        error_msg = "oracledb模块未安装，无法连接Oracle"
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "execute_task" of class "TaskExecutor":
app/services/task_executor.py:21:65: error: Missing type parameters for generic
type "dict"  [type-arg]
        def execute_task(self, task_id: int, timeout: int = 300) -> dict:
                                                                    ^
app/services/task_executor.py: note: In function "execute_task":
app/services/task_executor.py:83:29: error: "TaskExecutor" has no attribute
"_record_sync_data"  [attr-defined]
                                self._record_sync_data(task, instance, ins...
                                ^~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "execute_task" of class "TaskExecutor":
app/services/task_executor.py:124:21: error: Argument 2 to
"_update_task_status" of "TaskExecutor" has incompatible type "object"; expected
"int"  [arg-type]
                        result["total_success"],
                        ^~~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py:125:21: error: Argument 3 to
"_update_task_status" of "TaskExecutor" has incompatible type "object"; expected
"int"  [arg-type]
                        result["total_failed"],
                        ^~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py:126:21: error: Argument 4 to
"_update_task_status" of "TaskExecutor" has incompatible type "object"; expected
"list[Any]"  [arg-type]
                        result["results"],
                        ^~~~~~~~~~~~~~~~~
app/services/task_executor.py:131:21: error: Argument 2 to
"_record_task_execution_summary" of "TaskExecutor" has incompatible type
"object"; expected "int"  [arg-type]
                        result["total_success"],
                        ^~~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py:132:21: error: Argument 3 to
"_record_task_execution_summary" of "TaskExecutor" has incompatible type
"object"; expected "int"  [arg-type]
                        result["total_failed"],
                        ^~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py:133:21: error: Argument 4 to
"_record_task_execution_summary" of "TaskExecutor" has incompatible type
"object"; expected "list[Any]"  [arg-type]
                        result["results"],
                        ^~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "_execute_task_for_instance" of class "TaskExecutor":
app/services/task_executor.py:147:48: error: Name "Any" is not defined 
[name-defined]
        def _execute_task_for_instance(self, task: "Any", instance: "Any")...
                                                   ^
app/services/task_executor.py:147:48: note: Did you forget to import it from "typing"? (Suggestion: "from typing import Any")
app/services/task_executor.py:147:75: error: Missing type parameters for
generic type "dict"  [type-arg]
    ...execute_task_for_instance(self, task: "Any", instance: "Any") -> dict:
                                                                        ^
app/services/task_executor.py:185:32: error: Name "logging" is not defined 
[name-defined]
                        "logging": logging,
                                   ^~~~~~~
app/services/task_executor.py:206:17: error: Returning Any from function
declared to return "dict[Any, Any]"  [no-any-return]
                    return result
                    ^~~~~~~~~~~~~
app/services/task_executor.py:209:17: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                    self.logger.error(f"执行任务代码时出错: {e}")
                    ^~~~~~~~~~~
app/services/task_executor.py: note: In member "_record_task_execution_summary" of class "TaskExecutor":
app/services/task_executor.py:212:52: error: Name "Any" is not defined 
[name-defined]
    ...  def _record_task_execution_summary(self, task: "Any", success_count:...
                                                        ^
app/services/task_executor.py:212:52: note: Did you forget to import it from "typing"? (Suggestion: "from typing import Any")
app/services/task_executor.py:212:107: error: Missing type parameters for
generic type "list"  [type-arg]
    ... "Any", success_count: int, failed_count: int, results: list) -> None:
                                                               ^
app/services/task_executor.py:244:33: error: Argument "instance_id" to
"SyncData" has incompatible type "None"; expected "int"  [arg-type]
                        instance_id=None,  # 不关联具体实例，表示任务汇总
                                    ^~~~
app/services/task_executor.py:257:17: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                    self.logger.info(f"记录任务执行汇总: {task.name}, 成功:{success_...
                    ^~~~~~~~~~~
app/services/task_executor.py:259:17: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                    self.logger.error(f"记录任务执行汇总失败: {e}")
                    ^~~~~~~~~~~
app/services/task_executor.py: note: In member "_update_task_status" of class "TaskExecutor":
app/services/task_executor.py:261:41: error: Name "Any" is not defined 
[name-defined]
        def _update_task_status(self, task: "Any", success_count: int, fai...
                                            ^
app/services/task_executor.py:261:41: note: Did you forget to import it from "typing"? (Suggestion: "from typing import Any")
app/services/task_executor.py:261:96: error: Missing type parameters for
generic type "list"  [type-arg]
    ... "Any", success_count: int, failed_count: int, results: list) -> None:
                                                               ^
app/services/task_executor.py:272:13: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                self.logger.info(f"更新任务状态: {task.name}, 成功: {success_count...
                ^~~~~~~~~~~
app/services/task_executor.py:287:13: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                self.logger.info(f"任务状态更新完成: 运行次数={task.run_count}, 成功次数={...
                ^~~~~~~~~~~
app/services/task_executor.py:289:13: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                self.logger.error(f"更新任务状态失败: {e}")
                ^~~~~~~~~~~
app/services/task_executor.py: note: In member "execute_all_active_tasks" of class "TaskExecutor":
app/services/task_executor.py:292:43: error: Missing type parameters for
generic type "dict"  [type-arg]
        def execute_all_active_tasks(self) -> dict:
                                              ^
app/services/task_executor.py:316:17: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                    self.logger.error(f"执行任务 {task.name} 时出错: {e}")
                    ^~~~~~~~~~~
app/services/task_executor.py: note: At top level:
app/services/task_executor.py:338:1: error: Skipping analyzing
"app.templates.tasks.builtin_tasks": module is installed, but missing library
stubs or py.typed marker  [import-untyped]
            from app.templates.tasks.builtin_tasks import BUILTIN_TASKS
    ^
app/services/task_executor.py: note: In member "create_builtin_tasks" of class "TaskExecutor":
app/services/task_executor.py:369:17: error: "TaskExecutor" has no attribute
"logger"  [attr-defined]
                    self.logger.error(f"创建内置任务 {task_config['name']} 失败: {...
                    ^~~~~~~~~~~
app/services/task_executor.py:373:13: error: No return value expected 
[return-value]
                return {
                ^
app/services/task_executor.py:381:13: error: No return value expected 
[return-value]
                return {"success": False, "error": f"创建内置任务失败: {str(e)}"}
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Found 992 errors in 55 files (checked 67 source files)
