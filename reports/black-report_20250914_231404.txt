错误: would reformat /Users/shiyijiufei/TaifishingV4/app/services/connection_factory.py
would reformat /Users/shiyijiufei/TaifishingV4/app/utils/sqlserver_version_detector.py

Oh no! 💥 💔 💥
2 files would be reformatted, 76 files would be left unchanged.


标准输出:
--- /Users/shiyijiufei/TaifishingV4/app/services/connection_factory.py	2025-09-14 13:10:53.862953+00:00
+++ /Users/shiyijiufei/TaifishingV4/app/services/connection_factory.py	2025-09-14 15:14:05.993799+00:00
@@ -232,11 +232,11 @@
     def connect(self) -> bool:
         """建立SQL Server连接 - 尝试多种驱动和版本兼容性"""
         # 获取连接信息
         password = self.instance.credential.get_plain_password() if self.instance.credential else ""
         username = self.instance.credential.username if self.instance.credential else ""
-        
+
         database_name = (
             self.instance.database_name
             or DatabaseTypeUtils.get_database_type_config("sqlserver").default_schema
             or "master"
         )
@@ -273,11 +273,11 @@
 
     def _try_pyodbc_connection(self, username: str, password: str, database_name: str) -> bool:
         """尝试使用pyodbc连接 (推荐用于现代SQL Server版本)"""
         try:
             import pyodbc
-            
+
             # 构建连接字符串 - 支持多种版本
             connection_strings = [
                 # SQL Server 2012+ (推荐)
                 f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={self.instance.host},{self.instance.port};DATABASE={database_name};UID={username};PWD={password};TrustServerCertificate=yes;",
                 # SQL Server 2008-2019
@@ -285,67 +285,67 @@
                 # SQL Server 2005-2012 (传统)
                 f"DRIVER={{SQL Server}};SERVER={self.instance.host},{self.instance.port};DATABASE={database_name};UID={username};PWD={password};",
                 # 使用命名管道 (本地连接)
                 f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={self.instance.host};DATABASE={database_name};UID={username};PWD={password};Trusted_Connection=no;",
             ]
-            
+
             for conn_str in connection_strings:
                 try:
                     self.connection = pyodbc.connect(conn_str, timeout=30)
                     self.is_connected = True
                     self.driver_type = "pyodbc"
                     return True
                 except Exception:
                     continue
-                    
+
             return False
-            
+
         except ImportError:
             return False
 
     def _try_pymssql_connection(self, username: str, password: str, database_name: str) -> bool:
         """尝试使用pymssql连接 (适用于Linux/Unix环境)"""
         try:
             import pymssql
-            
+
             self.connection = pymssql.connect(
                 server=self.instance.host,
                 port=self.instance.port,
                 user=username,
                 password=password,
                 database=database_name,
                 timeout=30,
                 # 添加版本兼容性参数
-                tds_version='7.4',  # 支持SQL Server 2005+
+                tds_version="7.4",  # 支持SQL Server 2005+
             )
             self.is_connected = True
             self.driver_type = "pymssql"
             return True
-            
+
         except ImportError:
             return False
 
     def _try_pyodbc_legacy_connection(self, username: str, password: str, database_name: str) -> bool:
         """尝试使用传统pyodbc连接 (兼容老版本)"""
         try:
             import pyodbc
-            
+
             # 传统连接字符串，兼容SQL Server 2005-2008
             legacy_conn_str = (
                 f"DRIVER={{SQL Server}};"
                 f"SERVER={self.instance.host},{self.instance.port};"
                 f"DATABASE={database_name};"
                 f"UID={username};"
                 f"PWD={password};"
                 f"Connection Timeout=30;"
             )
-            
+
             self.connection = pyodbc.connect(legacy_conn_str)
             self.is_connected = True
             self.driver_type = "pyodbc_legacy"
             return True
-            
+
         except ImportError:
             return False
 
     def disconnect(self) -> None:
         """断开SQL Server连接"""
--- /Users/shiyijiufei/TaifishingV4/app/utils/sqlserver_version_detector.py	2025-09-14 13:10:39.036114+00:00
+++ /Users/shiyijiufei/TaifishingV4/app/utils/sqlserver_version_detector.py	2025-09-14 15:14:06.007016+00:00
@@ -7,50 +7,106 @@
 from typing import Dict, Optional, Tuple
 
 
 class SQLServerVersionDetector:
     """SQL Server版本检测器"""
-    
+
     # SQL Server版本映射表
     VERSION_MAP = {
         # 版本号 -> (版本名称, 年份, 支持的功能)
         "8.00": ("SQL Server 2000", 2000, ["basic"]),
         "9.00": ("SQL Server 2005", 2005, ["basic", "xml", "cte"]),
         "10.00": ("SQL Server 2008", 2008, ["basic", "xml", "cte", "merger"]),
         "10.50": ("SQL Server 2008 R2", 2010, ["basic", "xml", "cte", "merger", "compression"]),
         "11.00": ("SQL Server 2012", 2012, ["basic", "xml", "cte", "merger", "compression", "columnstore"]),
-        "12.00": ("SQL Server 2014", 2014, ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized"]),
-        "13.00": ("SQL Server 2016", 2016, ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized", "json", "temporal"]),
-        "14.00": ("SQL Server 2017", 2017, ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized", "json", "temporal", "graph"]),
-        "15.00": ("SQL Server 2019", 2019, ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized", "json", "temporal", "graph", "big_data"]),
-        "16.00": ("SQL Server 2022", 2022, ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized", "json", "temporal", "graph", "big_data", "ledger"]),
+        "12.00": (
+            "SQL Server 2014",
+            2014,
+            ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized"],
+        ),
+        "13.00": (
+            "SQL Server 2016",
+            2016,
+            ["basic", "xml", "cte", "merger", "compression", "columnstore", "memory_optimized", "json", "temporal"],
+        ),
+        "14.00": (
+            "SQL Server 2017",
+            2017,
+            [
+                "basic",
+                "xml",
+                "cte",
+                "merger",
+                "compression",
+                "columnstore",
+                "memory_optimized",
+                "json",
+                "temporal",
+                "graph",
+            ],
+        ),
+        "15.00": (
+            "SQL Server 2019",
+            2019,
+            [
+                "basic",
+                "xml",
+                "cte",
+                "merger",
+                "compression",
+                "columnstore",
+                "memory_optimized",
+                "json",
+                "temporal",
+                "graph",
+                "big_data",
+            ],
+        ),
+        "16.00": (
+            "SQL Server 2022",
+            2022,
+            [
+                "basic",
+                "xml",
+                "cte",
+                "merger",
+                "compression",
+                "columnstore",
+                "memory_optimized",
+                "json",
+                "temporal",
+                "graph",
+                "big_data",
+                "ledger",
+            ],
+        ),
     }
-    
+
     @classmethod
     def detect_version(cls, version_string: str) -> Dict[str, any]:
         """
         检测SQL Server版本
-        
+
         Args:
             version_string: SQL Server版本字符串 (如 "Microsoft SQL Server 2019 (RTM-CU18) (KB5003279) - 15.0.4261.1 (X64)")
-            
+
         Returns:
             包含版本信息的字典
         """
         if not version_string:
             return cls._unknown_version()
-        
+
         # 提取版本号
-        version_match = re.search(r'(\d+\.\d+)', version_string)
+        version_match = re.search(r"(\d+\.\d+)", version_string)
         if not version_match:
             return cls._unknown_version()
-        
+
         version_number = version_match.group(1)
-        
+
         # 查找匹配的版本
         for ver, (name, year, features) in cls.VERSION_MAP.items():
-            if version_string.startswith(ver) or version_number.startswith(ver.split('.')[0]):
+            if version_string.startswith(ver) or version_number.startswith(ver.split(".")[0]):
                 return {
                     "version_number": version_number,
                     "version_name": name,
                     "year": year,
                     "features": features,
@@ -60,13 +116,13 @@
                     "supports_temporal": "temporal" in features,
                     "supports_graph": "graph" in features,
                     "supports_columnstore": "columnstore" in features,
                     "supports_memory_optimized": "memory_optimized" in features,
                 }
-        
+
         # 如果没找到精确匹配，尝试根据年份推断
-        year_match = re.search(r'(\d{4})', version_string)
+        year_match = re.search(r"(\d{4})", version_string)
         if year_match:
             year = int(year_match.group(1))
             if 2000 <= year <= 2022:
                 return {
                     "version_number": version_number,
@@ -79,13 +135,13 @@
                     "supports_temporal": year >= 2016,
                     "supports_graph": year >= 2017,
                     "supports_columnstore": year >= 2012,
                     "supports_memory_optimized": year >= 2014,
                 }
-        
+
         return cls._unknown_version()
-    
+
     @classmethod
     def _unknown_version(cls) -> Dict[str, any]:
         """返回未知版本信息"""
         return {
             "version_number": "unknown",
@@ -98,38 +154,38 @@
             "supports_temporal": False,
             "supports_graph": False,
             "supports_columnstore": False,
             "supports_memory_optimized": False,
         }
-    
+
     @classmethod
     def get_recommended_driver(cls, version_info: Dict[str, any]) -> str:
         """
         根据版本信息推荐最佳驱动
-        
+
         Args:
             version_info: 版本信息字典
-            
+
         Returns:
             推荐的驱动名称
         """
         if version_info["is_legacy"]:
             return "pymssql"  # 老版本推荐pymssql
         elif version_info["is_modern"]:
-            return "pyodbc"   # 现代版本推荐pyodbc
+            return "pyodbc"  # 现代版本推荐pyodbc
         else:
-            return "pyodbc"   # 默认使用pyodbc
-    
+            return "pyodbc"  # 默认使用pyodbc
+
     @classmethod
     def get_connection_string_template(cls, version_info: Dict[str, any], driver: str) -> str:
         """
         根据版本和驱动获取连接字符串模板
-        
+
         Args:
             version_info: 版本信息字典
             driver: 驱动名称
-            
+
         Returns:
             连接字符串模板
         """
         if driver == "pyodbc":
             if version_info["is_legacy"]:
@@ -141,35 +197,35 @@
         elif driver == "pymssql":
             # pymssql连接参数
             return "server={server};port={port};user={username};password={password};database={database};tds_version=7.4"
         else:
             return ""
-    
+
     @classmethod
     def get_compatible_features(cls, version_info: Dict[str, any]) -> list[str]:
         """
         获取版本支持的功能列表
-        
+
         Args:
             version_info: 版本信息字典
-            
+
         Returns:
             支持的功能列表
         """
         features = []
-        
+
         if version_info["supports_json"]:
             features.append("JSON数据类型")
         if version_info["supports_temporal"]:
             features.append("时态表")
         if version_info["supports_graph"]:
             features.append("图数据库")
         if version_info["supports_columnstore"]:
             features.append("列存储索引")
         if version_info["supports_memory_optimized"]:
             features.append("内存优化表")
-        
+
         return features
 
 
 def test_version_detection():
     """测试版本检测功能"""
@@ -178,13 +234,13 @@
         "Microsoft SQL Server 2016 (SP2-CU17) (KB5001092) - 13.0.5888.11 (X64)",
         "Microsoft SQL Server 2012 (SP4-GDR) (KB4583465) - 11.0.7507.2 (X64)",
         "Microsoft SQL Server 2008 R2 (SP3-GDR) (KB4583465) - 10.50.6560.0 (X64)",
         "Microsoft SQL Server 2005 (SP4) - 9.00.5000.00 (X64)",
     ]
-    
+
     detector = SQLServerVersionDetector()
-    
+
     for version_str in test_versions:
         print(f"\n版本字符串: {version_str}")
         info = detector.detect_version(version_str)
         print(f"检测结果: {info['version_name']} ({info['year']})")
         print(f"推荐驱动: {detector.get_recommended_driver(info)}")
