version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: taifish_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taifish_prod
      POSTGRES_USER: taifish_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Taifish2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - taifish_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taifish_user -d taifish_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: taifish_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-Taifish2024!}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - taifish_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Flask应用
  app:
    build: .
    container_name: taifish_app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://taifish_user:${POSTGRES_PASSWORD:-Taifish2024!}@postgres:5432/taifish_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD:-Taifish2024!}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - APP_NAME=${APP_NAME:-泰摸鱼吧}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - APP_DESCRIPTION=${APP_DESCRIPTION:-数据同步管理平台}
    volumes:
      - app_data:/app/userdata
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - taifish_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: taifish_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - app_data:/app/userdata:ro
    networks:
      - taifish_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  taifish_network:
    driver: bridge
