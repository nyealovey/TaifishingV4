错误: 

标准输出:
app/services/database_filter_manager.py:11:1: error: Library stubs not
installed for "yaml"  [import-untyped]
    import yaml
    ^
app/services/database_filter_manager.py:11:1: note: Hint: "python3 -m pip install types-PyYAML"
app/services/database_filter_manager.py: note: In member "__init__" of class "DatabaseFilterManager":
app/services/database_filter_manager.py:19:5: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/database_filter_manager.py:19:5: note: Use "-> None" if function does not return a value
app/services/database_filter_manager.py: note: In member "get_filter_rules" of class "DatabaseFilterManager":
app/services/database_filter_manager.py:209:47: error: Incompatible default for
argument "db_type" (default has type "None", argument has type "str") 
[assignment]
        def get_filter_rules(self, db_type: str = None) -> dict[str, Any]:
                                                  ^~~~
app/services/database_filter_manager.py:209:47: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_filter_manager.py:209:47: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/database_filter_manager.py: note: In member "get_filter_statistics" of class "DatabaseFilterManager":
app/services/database_filter_manager.py:275:52: error: Incompatible default for
argument "db_type" (default has type "None", argument has type "str") 
[assignment]
    ...  def get_filter_statistics(self, db_type: str = None) -> dict[str, An...
                                                        ^~~~
app/services/database_filter_manager.py:275:52: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_filter_manager.py:275:52: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/database_filter_manager.py: note: At top level:
app/services/database_filter_manager.py:305:27: error: Call to untyped function
"DatabaseFilterManager" in typed context  [no-untyped-call]
    database_filter_manager = DatabaseFilterManager()
                              ^~~~~~~~~~~~~~~~~~~~~~~
app/utils/security.py: note: In function "sanitize_input":
app/utils/security.py:35:5: error: Returning Any from function declared to
return "str"  [no-any-return]
        return value.strip()
        ^~~~~~~~~~~~~~~~~~~~
app/utils/security.py: note: In function "sanitize_form_data":
app/utils/security.py:155:30: error: Incompatible types in assignment
(expression has type "int | float", target has type "str")  [assignment]
                sanitized[key] = value
                                 ^~~~~
app/utils/password_manager.py: note: In member "__init__" of class "PasswordManager":
app/utils/password_manager.py:15:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/password_manager.py:15:5: note: Use "-> None" if function does not return a value
app/utils/password_manager.py:16:20: error: Call to untyped function
"_get_or_create_key" in typed context  [no-untyped-call]
            self.key = self._get_or_create_key()
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/password_manager.py: note: In member "_get_or_create_key" of class "PasswordManager":
app/utils/password_manager.py:19:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _get_or_create_key(self):
        ^
app/utils/password_manager.py:24:19: error: Incompatible types in assignment
(expression has type "bytes", variable has type "str | None")  [assignment]
                key = Fernet.generate_key()
                      ^~~~~~~~~~~~~~~~~~~~~
app/utils/password_manager.py:26:48: error: Item "str" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
                print(f"   生成的临时密钥: {key.decode()}")
                                                   ^
app/utils/password_manager.py:26:48: error: Item "None" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
                print(f"   生成的临时密钥: {key.decode()}")
                                                   ^
app/utils/password_manager.py:27:80: error: Item "str" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
    ... print(f"   请设置环境变量: export PASSWORD_ENCRYPTION_KEY='{key.decode()}'")
                                                                           ^~
app/utils/password_manager.py:27:80: error: Item "None" of "Literal[''] | None"
has no attribute "decode"  [union-attr]
    ... print(f"   请设置环境变量: export PASSWORD_ENCRYPTION_KEY='{key.decode()}'")
                                                                           ^~
app/utils/password_manager.py:29:19: error: Incompatible types in assignment
(expression has type "bytes", variable has type "str | None")  [assignment]
                key = key.encode()
                      ^~~~~~~~~~~~
app/utils/password_manager.py: note: At top level:
app/utils/password_manager.py:96:20: error: Call to untyped function
"PasswordManager" in typed context  [no-untyped-call]
    password_manager = PasswordManager()
                       ^~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In member "__init__" of class "RateLimiter":
app/utils/rate_limiter.py:18:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(self, redis_client=None):
        ^
app/utils/rate_limiter.py: note: In member "is_allowed" of class "RateLimiter":
app/utils/rate_limiter.py:30:96: error: Function "builtins.any" is not valid as
a type  [valid-type]
    ...ifier: str, endpoint: str, limit: int, window: int) -> dict[str, any]:
                                                                        ^
app/utils/rate_limiter.py:30:96: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "_check_redis" of class "RateLimiter":
app/utils/rate_limiter.py:64:20: error: Function "builtins.any" is not valid as
a type  [valid-type]
        ) -> dict[str, any]:
                       ^
app/utils/rate_limiter.py:64:20: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "_check_memory" of class "RateLimiter":
app/utils/rate_limiter.py:107:20: error: Function "builtins.any" is not valid
as a type  [valid-type]
        ) -> dict[str, any]:
                       ^
app/utils/rate_limiter.py:107:20: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In member "reset" of class "RateLimiter":
app/utils/rate_limiter.py:146:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def reset(self, identifier: str, endpoint: str):
        ^
app/utils/rate_limiter.py: note: At top level:
app/utils/rate_limiter.py:165:16: error: Call to untyped function "RateLimiter"
in typed context  [no-untyped-call]
    rate_limiter = RateLimiter()
                   ^~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "rate_limit":
app/utils/rate_limiter.py:168:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def rate_limit(
    ^
app/utils/rate_limiter.py:172:22: error: Missing type parameters for generic
type "Callable"  [type-arg]
        identifier_func: Callable | None = None,
                         ^
app/utils/rate_limiter.py:184:5: error: Function is missing a type annotation 
[no-untyped-def]
        def rate_limit_decorator(f):
        ^
app/utils/rate_limiter.py:186:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/rate_limiter.py: note: At top level:
app/utils/rate_limiter.py:191:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
                    from flask_login import current_user
    ^
app/utils/rate_limiter.py: note: In function "rate_limit":
app/utils/rate_limiter.py:201:17: error: Statement is unreachable 
[unreachable]
                    response = jsonify(
                    ^
app/utils/rate_limiter.py: note: In function "login_rate_limit":
app/utils/rate_limiter.py:229:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
    ^
app/utils/rate_limiter.py:229:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
    ^
app/utils/rate_limiter.py:229:49: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    def login_rate_limit(func=None, *, limit: int = None, window: int = No...
                                                    ^~~~
app/utils/rate_limiter.py:229:49: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:229:49: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:229:69: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...login_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:234:9: error: Statement is unreachable  [unreachable]
            limit = SystemConstants.LOGIN_RATE_LIMIT
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py:236:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.LOGIN_RATE_WINDOW
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "api_rate_limit":
app/utils/rate_limiter.py:242:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
    ^
app/utils/rate_limiter.py:242:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
    ^
app/utils/rate_limiter.py:242:47: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    def api_rate_limit(func=None, *, limit: int = None, window: int = None...
                                                  ^~~~
app/utils/rate_limiter.py:242:47: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:242:47: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:242:67: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...f api_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:247:9: error: Statement is unreachable  [unreachable]
            limit = SystemConstants.RATE_LIMIT_REQUESTS
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py:249:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.RATE_LIMIT_WINDOW
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "password_reset_rate_limit":
app/utils/rate_limiter.py:255:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def password_reset_rate_limit(func=None, *, limit: int = None, window:...
    ^
app/utils/rate_limiter.py:255:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def password_reset_rate_limit(func=None, *, limit: int = None, window:...
    ^
app/utils/rate_limiter.py:255:58: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    ...word_reset_rate_limit(func=None, *, limit: int = None, window: int = N...
                                                        ^~~~
app/utils/rate_limiter.py:255:58: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:255:58: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:255:78: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...reset_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:259:9: error: Statement is unreachable  [unreachable]
            limit = 3  # 密码重置限制
            ^~~~~~~~~
app/utils/rate_limiter.py:261:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.SESSION_LIFETIME  # 1小时
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "registration_rate_limit":
app/utils/rate_limiter.py:268:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def registration_rate_limit(func=None, *, limit: int = None, window: i...
    ^
app/utils/rate_limiter.py:268:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def registration_rate_limit(func=None, *, limit: int = None, window: i...
    ^
app/utils/rate_limiter.py:268:56: error: Incompatible default for argument
"limit" (default has type "None", argument has type "int")  [assignment]
    ...gistration_rate_limit(func=None, *, limit: int = None, window: int = N...
                                                        ^~~~
app/utils/rate_limiter.py:268:56: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/rate_limiter.py:268:56: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/rate_limiter.py:268:76: error: Incompatible default for argument
"window" (default has type "None", argument has type "int")  [assignment]
    ...ation_rate_limit(func=None, *, limit: int = None, window: int = None):
                                                                       ^~~~
app/utils/rate_limiter.py:272:9: error: Statement is unreachable  [unreachable]
            limit = 3  # 注册限制
            ^~~~~~~~~
app/utils/rate_limiter.py:274:9: error: Statement is unreachable  [unreachable]
            window = SystemConstants.SESSION_LIFETIME  # 1小时
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "task_execution_rate_limit":
app/utils/rate_limiter.py:281:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def task_execution_rate_limit(func=None, *, limit: int = 10, window: i...
    ^
app/utils/rate_limiter.py:281:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def task_execution_rate_limit(func=None, *, limit: int = 10, window: i...
    ^
app/utils/rate_limiter.py: note: In function "init_rate_limiter":
app/utils/rate_limiter.py:289:1: error: Function is missing a type annotation 
[no-untyped-def]
    def init_rate_limiter(redis_client=None):
    ^
app/utils/rate_limiter.py:292:20: error: Call to untyped function "RateLimiter"
in typed context  [no-untyped-call]
        rate_limiter = RateLimiter(redis_client)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/rate_limiter.py: note: In function "get_rate_limit_status":
app/utils/rate_limiter.py:297:97: error: Function "builtins.any" is not valid
as a type  [valid-type]
    ...ifier: str, endpoint: str, limit: int, window: int) -> dict[str, any]:
                                                                        ^
app/utils/rate_limiter.py:297:97: note: Perhaps you meant "typing.Any" instead of "any"?
app/utils/rate_limiter.py: note: In function "cleanup_rate_limits":
app/utils/rate_limiter.py:303:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def cleanup_rate_limits():
    ^
app/utils/rate_limiter.py:303:1: note: Use "-> None" if function does not return a value
app/utils/error_handler.py: note: In function "register_error_handlers":
app/utils/error_handler.py:14:1: error: Function is missing a type annotation 
[no-untyped-def]
    def register_error_handlers(app):
    ^
app/utils/error_handler.py:23:5: error: Function is missing a type annotation 
[no-untyped-def]
        def bad_request(error):
        ^
app/utils/error_handler.py:25:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 400, "请求参数错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:28:5: error: Function is missing a type annotation 
[no-untyped-def]
        def unauthorized(error):
        ^
app/utils/error_handler.py:30:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 401, "未授权访问")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:33:5: error: Function is missing a type annotation 
[no-untyped-def]
        def forbidden(error):
        ^
app/utils/error_handler.py:35:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 403, "禁止访问")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:38:5: error: Function is missing a type annotation 
[no-untyped-def]
        def not_found(error):
        ^
app/utils/error_handler.py:40:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 404, "页面不存在")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:43:5: error: Function is missing a type annotation 
[no-untyped-def]
        def too_many_requests(error):
        ^
app/utils/error_handler.py:45:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 429, "请求过于频繁")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:48:5: error: Function is missing a type annotation 
[no-untyped-def]
        def internal_server_error(error):
        ^
app/utils/error_handler.py:50:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "服务器内部错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:53:5: error: Function is missing a type annotation 
[no-untyped-def]
        def handle_sqlalchemy_error(error):
        ^
app/utils/error_handler.py:62:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 503, "数据库连接失败，请稍后重试")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:64:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 400, "数据约束错误，请检查输入数据")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:66:20: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
                return _handle_error(error, 504, "数据库操作超时，请稍后重试")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:67:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "数据库操作错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:70:5: error: Function is missing a type annotation 
[no-untyped-def]
        def handle_generic_error(error):
        ^
app/utils/error_handler.py:74:16: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
            return _handle_error(error, 500, "系统错误")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "_handle_error":
app/utils/error_handler.py:77:1: error: Function is missing a type annotation 
[no-untyped-def]
    def _handle_error(error, status_code, message):
    ^
app/utils/error_handler.py:90:5: error: Call to untyped function "_log_error"
in typed context  [no-untyped-call]
        _log_error(error, status_code)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py:99:34: error: Call to untyped function
"_get_timestamp" in typed context  [no-untyped-call]
                        "timestamp": _get_timestamp(),
                                     ^~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "_log_error":
app/utils/error_handler.py:110:1: error: Function is missing a type annotation 
[no-untyped-def]
    def _log_error(error, status_code):
    ^
app/utils/error_handler.py: note: In function "_get_timestamp":
app/utils/error_handler.py:140:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def _get_timestamp():
    ^
app/utils/error_handler.py: note: In function "safe_error_message":
app/utils/error_handler.py:151:1: error: Function is missing a type annotation 
[no-untyped-def]
    def safe_error_message(error):
    ^
app/utils/error_handler.py: note: In function "validate_error_response":
app/utils/error_handler.py:169:1: error: Function is missing a type annotation 
[no-untyped-def]
    def validate_error_response(response_data):
    ^
app/utils/error_handler.py: note: In function "handle_security_error":
app/utils/error_handler.py:195:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_security_error(error):
    ^
app/utils/error_handler.py:206:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 403, "安全验证失败")
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "handle_validation_error":
app/utils/error_handler.py:209:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_validation_error(error):
    ^
app/utils/error_handler.py:220:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 400, str(error))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/error_handler.py: note: In function "handle_business_logic_error":
app/utils/error_handler.py:223:1: error: Function is missing a type annotation 
[no-untyped-def]
    def handle_business_logic_error(error):
    ^
app/utils/error_handler.py:234:12: error: Call to untyped function
"_handle_error" in typed context  [no-untyped-call]
        return _handle_error(error, 422, str(error))
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py:8:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user
    ^
app/utils/decorators.py: note: In function "admin_required":
app/utils/decorators.py:11:1: error: Function is missing a type annotation 
[no-untyped-def]
    def admin_required(f):
    ^
app/utils/decorators.py:23:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "scheduler_manage_required":
app/utils/decorators.py:45:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduler_manage_required(f):
    ^
app/utils/decorators.py:58:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "scheduler_view_required":
app/utils/decorators.py:83:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduler_view_required(f):
    ^
app/utils/decorators.py:96:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "login_required":
app/utils/decorators.py:110:1: error: Function is missing a type annotation 
[no-untyped-def]
    def login_required(f):
    ^
app/utils/decorators.py:122:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "login_required_json":
app/utils/decorators.py:136:1: error: Function is missing a type annotation 
[no-untyped-def]
    def login_required_json(f):
    ^
app/utils/decorators.py:148:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorated_function(*args, **kwargs):
        ^
app/utils/decorators.py: note: In function "rate_limit":
app/utils/decorators.py:157:1: error: Function is missing a type annotation 
[no-untyped-def]
    def rate_limit(requests_per_minute=60):
    ^
app/utils/decorators.py:168:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:170:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py: note: In function "validate_json":
app/utils/decorators.py:180:1: error: Function is missing a type annotation 
[no-untyped-def]
    def validate_json(required_fields=None):
    ^
app/utils/decorators.py:191:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:193:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py: note: In function "permission_required":
app/utils/decorators.py:222:1: error: Function is missing a type annotation 
[no-untyped-def]
    def permission_required(permission):
    ^
app/utils/decorators.py:233:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(f):
        ^
app/utils/decorators.py:235:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/decorators.py:245:20: error: Call to untyped function
"has_permission" in typed context  [no-untyped-call]
                if not has_permission(current_user, permission):
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "has_permission":
app/utils/decorators.py:260:1: error: Function is missing a type annotation 
[no-untyped-def]
    def has_permission(user, permission):
    ^
app/utils/decorators.py: note: In function "view_required":
app/utils/decorators.py:288:1: error: Function is missing a type annotation 
[no-untyped-def]
    def view_required(f):
    ^
app/utils/decorators.py:290:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("view")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "create_required":
app/utils/decorators.py:293:1: error: Function is missing a type annotation 
[no-untyped-def]
    def create_required(f):
    ^
app/utils/decorators.py:295:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("create")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "update_required":
app/utils/decorators.py:298:1: error: Function is missing a type annotation 
[no-untyped-def]
    def update_required(f):
    ^
app/utils/decorators.py:300:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("update")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/decorators.py: note: In function "delete_required":
app/utils/decorators.py:303:1: error: Function is missing a type annotation 
[no-untyped-def]
    def delete_required(f):
    ^
app/utils/decorators.py:305:12: error: Call to untyped function
"permission_required" in typed context  [no-untyped-call]
        return permission_required("delete")(f)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/api_response.py: note: In member "success" of class "APIResponse":
app/utils/api_response.py:12:5: error: Function is missing a type annotation 
[no-untyped-def]
        def success(data=None, message="操作成功"):
        ^
app/utils/api_response.py: note: In member "error" of class "APIResponse":
app/utils/api_response.py:29:5: error: Function is missing a type annotation 
[no-untyped-def]
        def error(message="操作失败", code=400, data=None):
        ^
app/scheduler.py: note: In member "__init__" of class "TaskScheduler":
app/scheduler.py:21:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(self, app=None):
        ^
app/scheduler.py:24:9: error: Call to untyped function "_setup_scheduler" in
typed context  [no-untyped-call]
            self._setup_scheduler()
            ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "_setup_scheduler" of class "TaskScheduler":
app/scheduler.py:26:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def _setup_scheduler(self):
        ^
app/scheduler.py:26:5: note: Use "-> None" if function does not return a value
app/scheduler.py: note: In member "_job_executed" of class "TaskScheduler":
app/scheduler.py:50:5: error: Function is missing a type annotation 
[no-untyped-def]
        def _job_executed(self, event):
        ^
app/scheduler.py: note: In member "_job_error" of class "TaskScheduler":
app/scheduler.py:54:5: error: Function is missing a type annotation 
[no-untyped-def]
        def _job_error(self, event):
        ^
app/scheduler.py: note: In member "start" of class "TaskScheduler":
app/scheduler.py:58:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def start(self):
        ^
app/scheduler.py:58:5: note: Use "-> None" if function does not return a value
app/scheduler.py:60:16: error: Item "None" of "Any | None" has no attribute
"running"  [union-attr]
            if not self.scheduler.running:
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:61:13: error: Item "None" of "Any | None" has no attribute
"start"  [union-attr]
                self.scheduler.start()
                ^~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "stop" of class "TaskScheduler":
app/scheduler.py:64:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def stop(self):
        ^
app/scheduler.py:64:5: note: Use "-> None" if function does not return a value
app/scheduler.py:66:12: error: Item "None" of "Any | None" has no attribute
"running"  [union-attr]
            if self.scheduler.running:
               ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:67:13: error: Item "None" of "Any | None" has no attribute
"shutdown"  [union-attr]
                self.scheduler.shutdown()
                ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "add_job" of class "TaskScheduler":
app/scheduler.py:70:5: error: Function is missing a type annotation 
[no-untyped-def]
        def add_job(self, func, trigger, **kwargs):
        ^
app/scheduler.py:72:16: error: Item "None" of "Any | None" has no attribute
"add_job"  [union-attr]
            return self.scheduler.add_job(func, trigger, **kwargs)
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "remove_job" of class "TaskScheduler":
app/scheduler.py:74:5: error: Function is missing a type annotation 
[no-untyped-def]
        def remove_job(self, job_id):
        ^
app/scheduler.py:77:13: error: Item "None" of "Any | None" has no attribute
"remove_job"  [union-attr]
                self.scheduler.remove_job(job_id)
                ^~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "get_jobs" of class "TaskScheduler":
app/scheduler.py:82:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def get_jobs(self):
        ^
app/scheduler.py:84:16: error: Item "None" of "Any | None" has no attribute
"get_jobs"  [union-attr]
            return self.scheduler.get_jobs()
                   ^~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "get_job" of class "TaskScheduler":
app/scheduler.py:86:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_job(self, job_id):
        ^
app/scheduler.py:88:16: error: Item "None" of "Any | None" has no attribute
"get_job"  [union-attr]
            return self.scheduler.get_job(job_id)
                   ^~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "pause_job" of class "TaskScheduler":
app/scheduler.py:90:5: error: Function is missing a type annotation 
[no-untyped-def]
        def pause_job(self, job_id):
        ^
app/scheduler.py:92:9: error: Item "None" of "Any | None" has no attribute
"pause_job"  [union-attr]
            self.scheduler.pause_job(job_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In member "resume_job" of class "TaskScheduler":
app/scheduler.py:95:5: error: Function is missing a type annotation 
[no-untyped-def]
        def resume_job(self, job_id):
        ^
app/scheduler.py:97:9: error: Item "None" of "Any | None" has no attribute
"resume_job"  [union-attr]
            self.scheduler.resume_job(job_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: At top level:
app/scheduler.py:102:13: error: Call to untyped function "TaskScheduler" in
typed context  [no-untyped-call]
    scheduler = TaskScheduler()
                ^~~~~~~~~~~~~~~
app/scheduler.py: note: In function "get_scheduler":
app/scheduler.py:106:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def get_scheduler():
    ^
app/scheduler.py: note: In function "init_scheduler":
app/scheduler.py:111:1: error: Function is missing a type annotation 
[no-untyped-def]
    def init_scheduler(app):
    ^
app/scheduler.py:114:5: error: Call to untyped function "start" in typed
context  [no-untyped-call]
        scheduler.start()
        ^~~~~~~~~~~~~~~~~
app/scheduler.py:117:5: error: Call to untyped function "_add_default_jobs" in
typed context  [no-untyped-call]
        _add_default_jobs()
        ^~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In function "_add_default_jobs":
app/scheduler.py:122:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _add_default_jobs():
    ^
app/scheduler.py:122:1: note: Use "-> None" if function does not return a value
app/scheduler.py: note: At top level:
app/scheduler.py:124:1: error: Library stubs not installed for "yaml" 
[import-untyped]
        import yaml
    ^
app/scheduler.py: note: In function "_add_default_jobs":
app/scheduler.py:129:21: error: Call to untyped function "get_jobs" in typed
context  [no-untyped-call]
        existing_jobs = scheduler.get_jobs()
                        ^~~~~~~~~~~~~~~~~~~~
app/scheduler.py:163:13: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
                scheduler.add_job(func, trigger_type, id=task_id, name=tas...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/scheduler.py:170:9: error: Call to untyped function
"_add_hardcoded_default_jobs" in typed context  [no-untyped-call]
            _add_hardcoded_default_jobs()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py:174:9: error: Call to untyped function
"_add_hardcoded_default_jobs" in typed context  [no-untyped-call]
            _add_hardcoded_default_jobs()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/scheduler.py: note: In function "_add_hardcoded_default_jobs":
app/scheduler.py:179:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _add_hardcoded_default_jobs():
    ^
app/scheduler.py:179:1: note: Use "-> None" if function does not return a value
app/scheduler.py:184:5: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
        scheduler.add_job(
        ^
app/scheduler.py:189:5: error: Call to untyped function "add_job" in typed
context  [no-untyped-call]
        scheduler.add_job(sync_accounts, "interval", minutes=30, id="sync_...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/scheduler.py: note: In function "scheduled_task":
app/scheduler.py:193:1: error: Function is missing a type annotation 
[no-untyped-def]
    def scheduled_task(job_id=None, name=None):
    ^
app/scheduler.py:196:5: error: Function is missing a type annotation 
[no-untyped-def]
        def decorator(func):
        ^
app/utils/enhanced_logger.py:14:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user
    ^
app/utils/cache_manager.py: note: In member "_generate_key" of class "CacheManager":
app/utils/cache_manager.py:24:5: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def _generate_key(self, prefix: str, *args, **kwargs) -> str:
        ^
app/utils/cache_manager.py: note: In member "get_or_set" of class "CacheManager":
app/utils/cache_manager.py:71:5: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def get_or_set(self, key: str, func: Callable, timeout: int | None...
        ^
app/utils/cache_manager.py:71:42: error: Missing type parameters for generic
type "Callable"  [type-arg]
        def get_or_set(self, key: str, func: Callable, timeout: int | None...
                                             ^
app/utils/cache_manager.py: note: In member "invalidate_pattern" of class "CacheManager":
app/utils/cache_manager.py:85:17: error: Returning Any from function declared
to return "int"  [no-any-return]
                    return self.cache.cache.delete_pattern(pattern)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "init_cache_manager":
app/utils/cache_manager.py:97:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def init_cache_manager(cache: Cache):
    ^
app/utils/cache_manager.py: note: In function "cached":
app/utils/cache_manager.py:104:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def cached(
    ^
app/utils/cache_manager.py:107:13: error: Missing type parameters for generic
type "Callable"  [type-arg]
        unless: Callable | None = None,
                ^
app/utils/cache_manager.py:108:15: error: Missing type parameters for generic
type "Callable"  [type-arg]
        key_func: Callable | None = None,
                  ^
app/utils/cache_manager.py:120:5: error: Function is missing a type annotation 
[no-untyped-def]
        def cache_decorator(f):
        ^
app/utils/cache_manager.py:122:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/cache_manager.py:131:29: error: Item "None" of "CacheManager | None"
has no attribute "_generate_key"  [union-attr]
                    cache_key = cache_manager._generate_key(f"{key_prefix}...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:134:28: error: Item "None" of "CacheManager | None"
has no attribute "get"  [union-attr]
                cached_value = cache_manager.get(cache_key)
                               ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:141:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(cache_key, result, timeout)
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "cache_invalidate":
app/utils/cache_manager.py:151:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def cache_invalidate(pattern: str):
    ^
app/utils/cache_manager.py:154:5: error: Function is missing a type annotation 
[no-untyped-def]
        def cache_decorator(f):
        ^
app/utils/cache_manager.py:156:9: error: Function is missing a type annotation 
[no-untyped-def]
            def decorated_function(*args, **kwargs):
            ^
app/utils/cache_manager.py:158:13: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
                cache_manager.invalidate_pattern(pattern)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "user_cache":
app/utils/cache_manager.py:168:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def user_cache(timeout: int = 600):
    ^
app/utils/cache_manager.py: note: In function "instance_cache":
app/utils/cache_manager.py:173:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def instance_cache(timeout: int = 300):
    ^
app/utils/cache_manager.py: note: In function "task_cache":
app/utils/cache_manager.py:178:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def task_cache(timeout: int = 180):
    ^
app/utils/cache_manager.py: note: In function "dashboard_cache":
app/utils/cache_manager.py:183:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def dashboard_cache(timeout: int = 60):
    ^
app/utils/cache_manager.py: note: In function "api_cache":
app/utils/cache_manager.py:188:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_cache(timeout: int = 300):
    ^
app/utils/cache_manager.py: note: In function "user_key_func":
app/utils/cache_manager.py:194:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def user_key_func(user_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "instance_key_func":
app/utils/cache_manager.py:199:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def instance_key_func(instance_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "task_key_func":
app/utils/cache_manager.py:204:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def task_key_func(task_id: int, *args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: In function "dashboard_key_func":
app/utils/cache_manager.py:209:1: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def dashboard_key_func(*args, **kwargs) -> str:
    ^
app/utils/cache_manager.py: note: At top level:
app/utils/cache_manager.py:211:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
        from flask_login import current_user
    ^
app/utils/cache_manager.py: note: In function "cache_dashboard_data":
app/utils/cache_manager.py:218:1: error: Function is missing a type annotation 
[no-untyped-def]
    def cache_dashboard_data(data, timeout=300):
    ^
app/utils/cache_manager.py:220:5: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
        cache_manager.set("dashboard_data", data, timeout)
        ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "get_cached_dashboard_data":
app/utils/cache_manager.py:223:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_cached_dashboard_data():
    ^
app/utils/cache_manager.py:225:12: error: Item "None" of "CacheManager | None"
has no attribute "get"  [union-attr]
        return cache_manager.get("dashboard_data")
               ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "invalidate_dashboard_cache":
app/utils/cache_manager.py:228:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def invalidate_dashboard_cache():
    ^
app/utils/cache_manager.py:228:1: note: Use "-> None" if function does not return a value
app/utils/cache_manager.py:230:5: error: Item "None" of "CacheManager | None"
has no attribute "delete"  [union-attr]
        cache_manager.delete("dashboard_data")
        ^~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_user_cache":
app/utils/cache_manager.py:234:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def clear_user_cache(user_id: int):
    ^
app/utils/cache_manager.py:236:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"user:{user_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_instance_cache":
app/utils/cache_manager.py:239:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def clear_instance_cache(instance_id: int):
    ^
app/utils/cache_manager.py:241:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"instance:{instance_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_task_cache":
app/utils/cache_manager.py:244:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def clear_task_cache(task_id: int):
    ^
app/utils/cache_manager.py:246:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern(f"task:{task_id}*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_dashboard_cache":
app/utils/cache_manager.py:249:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def clear_dashboard_cache():
    ^
app/utils/cache_manager.py:249:1: note: Use "-> None" if function does not return a value
app/utils/cache_manager.py:251:5: error: Item "None" of "CacheManager | None"
has no attribute "invalidate_pattern"  [union-attr]
        cache_manager.invalidate_pattern("dashboard:*")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "clear_all_cache":
app/utils/cache_manager.py:254:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def clear_all_cache():
    ^
app/utils/cache_manager.py:254:1: note: Use "-> None" if function does not return a value
app/utils/cache_manager.py:256:5: error: Item "None" of "CacheManager | None"
has no attribute "clear"  [union-attr]
        cache_manager.clear()
        ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "get_cache_stats":
app/utils/cache_manager.py:263:20: error: Item "None" of "CacheManager | None"
has no attribute "cache"  [union-attr]
            if hasattr(cache_manager.cache.cache, "info"):
                       ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:264:20: error: Item "None" of "CacheManager | None"
has no attribute "cache"  [union-attr]
                info = cache_manager.cache.cache.info()
                       ^~~~~~~~~~~~~~~~~~~
app/utils/cache_manager.py: note: In function "warm_up_cache":
app/utils/cache_manager.py:272:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def warm_up_cache():
    ^
app/utils/cache_manager.py:282:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"user:{user.id}", user.to_dict(), 600)
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:287:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"instance:{instance.id}", instance.to_d...
                ^~~~~~~~~~~~~~~~~
app/utils/cache_manager.py:292:13: error: Item "None" of "CacheManager | None"
has no attribute "set"  [union-attr]
                cache_manager.set(f"task:{task.id}", task.to_dict(), 180)
                ^~~~~~~~~~~~~~~~~
app/routes/main.py:7:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import login_required
    ^
app/routes/main.py: note: In function "index":
app/routes/main.py:17:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def index():
    ^
app/routes/main.py: note: In function "favicon":
app/routes/main.py:23:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def favicon():
    ^
app/routes/main.py: note: In function "chrome_devtools":
app/routes/main.py:30:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def chrome_devtools():
    ^
app/routes/main.py: note: In function "admin":
app/routes/main.py:38:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def admin():
    ^
app/routes/main.py: note: In function "api_health":
app/routes/main.py:44:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def api_health():
    ^
app/routes/main.py:81:19: error: Call to untyped function "get_system_uptime"
in typed context  [no-untyped-call]
            "uptime": get_system_uptime(),
                      ^~~~~~~~~~~~~~~~~~~
app/routes/main.py: note: In function "get_system_uptime":
app/routes/main.py:93:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def get_system_uptime():
    ^
app/__init__.py:12:1: error: Skipping analyzing "flask_bcrypt": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_bcrypt import Bcrypt
    ^
app/__init__.py:14:1: error: Library stubs not installed for "flask_cors" 
[import-untyped]
    from flask_cors import CORS
    ^
app/__init__.py:14:1: note: Hint: "python3 -m pip install types-Flask-Cors"
app/__init__.py:14:1: note: (or run "mypy --install-types" to install all missing stub packages)
app/__init__.py:16:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import LoginManager
    ^
app/__init__.py:17:1: error: Library stubs not installed for "flask_migrate" 
[import-untyped]
    from flask_migrate import Migrate
    ^
app/__init__.py:17:1: note: Hint: "python3 -m pip install types-Flask-Migrate"
app/__init__.py:19:1: error: Skipping analyzing "flask_wtf.csrf": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_wtf.csrf import CSRFProtect
    ^
app/__init__.py:19:1: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
app/__init__.py: note: In function "create_app":
app/__init__.py:45:1: error: Function is missing a type annotation 
[no-untyped-def]
    def create_app(config_name=None):
    ^
app/__init__.py:58:5: error: Call to untyped function "configure_app" in typed
context  [no-untyped-call]
        configure_app(app, config_name)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:61:5: error: Call to untyped function
"configure_session_security" in typed context  [no-untyped-call]
        configure_session_security(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:64:5: error: Call to untyped function "initialize_extensions"
in typed context  [no-untyped-call]
        initialize_extensions(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:67:5: error: Call to untyped function "register_blueprints" in
typed context  [no-untyped-call]
        register_blueprints(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:70:5: error: Call to untyped function "configure_logging" in
typed context  [no-untyped-call]
        configure_logging(app)
        ^~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:75:5: error: Call to untyped function "register_error_handlers"
in typed context  [no-untyped-call]
        register_error_handlers(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:83:5: error: "Flask" has no attribute "advanced_error_handler" 
[attr-defined]
        app.advanced_error_handler = advanced_error_handler
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:88:5: error: Call to untyped function
"register_error_logging_middleware" in typed context  [no-untyped-call]
        register_error_logging_middleware(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:92:5: error: Function is missing a type annotation 
[no-untyped-def]
        def handle_advanced_exception(error):
        ^
app/__init__.py:110:5: error: Call to untyped function
"configure_template_filters" in typed context  [no-untyped-call]
        configure_template_filters(app)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py: note: In function "configure_app":
app/__init__.py:115:1: error: Function is missing a type annotation 
[no-untyped-def]
    def configure_app(app, config_name):
    ^
app/__init__.py: note: In function "configure_session_security":
app/__init__.py:223:1: error: Function is missing a type annotation 
[no-untyped-def]
    def configure_session_security(app):
    ^
app/__init__.py: note: In function "initialize_extensions":
app/__init__.py:243:1: error: Function is missing a type annotation 
[no-untyped-def]
    def initialize_extensions(app):
    ^
app/__init__.py:285:5: error: Function is missing a type annotation 
[no-untyped-def]
        def load_user(user_id):
        ^
app/__init__.py:312:24: error: Call to untyped function "from_url" in typed
context  [no-untyped-call]
            redis_client = redis.from_url(redis_url)
                           ^~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py:317:9: error: Call to untyped function "init_rate_limiter" in
typed context  [no-untyped-call]
            init_rate_limiter(redis_client)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/__init__.py: note: In function "register_blueprints":
app/__init__.py:328:1: error: Function is missing a type annotation 
[no-untyped-def]
    def register_blueprints(app):
    ^
app/__init__.py:386:5: error: Call to untyped function "init_scheduler" in
typed context  [no-untyped-call]
        init_scheduler(app)
        ^~~~~~~~~~~~~~~~~~~
app/__init__.py: note: In function "configure_logging":
app/__init__.py:389:1: error: Function is missing a type annotation 
[no-untyped-def]
    def configure_logging(app):
    ^
app/__init__.py: note: In function "configure_error_handlers":
app/__init__.py:418:1: error: Function is missing a type annotation 
[no-untyped-def]
    def configure_error_handlers(app):
    ^
app/__init__.py: note: In function "configure_template_filters":
app/__init__.py:424:1: error: Function is missing a type annotation 
[no-untyped-def]
    def configure_template_filters(app):
    ^
app/__init__.py:434:5: error: Function is missing a type annotation 
[no-untyped-def]
        def china_time_filter(dt, format_str="%Y-%m-%d %H:%M:%S"):
        ^
app/__init__.py:439:5: error: Function is missing a type annotation 
[no-untyped-def]
        def china_date_filter(dt):
        ^
app/__init__.py:444:5: error: Function is missing a type annotation 
[no-untyped-def]
        def china_datetime_filter(dt):
        ^
app/__init__.py: note: At top level:
app/__init__.py:450:7: error: Call to untyped function "create_app" in typed
context  [no-untyped-call]
    app = create_app()
          ^~~~~~~~~~~~
app/models/user.py:7:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import UserMixin
    ^
app/models/user.py: note: In class "User":
app/models/user.py:13:12: error: Class cannot subclass "UserMixin" (has type
"Any")  [misc]
    class User(UserMixin, db.Model):
               ^~~~~~~~~
app/models/user.py: note: At top level:
app/models/user.py:13:23: error: Name "db.Model" is not defined  [name-defined]
    class User(UserMixin, db.Model):
                          ^
app/models/user.py: note: In class "User":
app/models/user.py:13:23: error: Class cannot subclass "Model" (has type "Any")
 [misc]
    class User(UserMixin, db.Model):
                          ^~~~~~~~
app/models/user.py: note: In member "__init__" of class "User":
app/models/user.py:29:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(self, username, password, role="user"):
        ^
app/models/user.py:39:9: error: Call to untyped function "set_password" in
typed context  [no-untyped-call]
            self.set_password(password)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/user.py: note: In member "set_password" of class "User":
app/models/user.py:42:5: error: Function is missing a type annotation 
[no-untyped-def]
        def set_password(self, password):
        ^
app/models/user.py: note: In member "check_password" of class "User":
app/models/user.py:65:5: error: Function is missing a type annotation 
[no-untyped-def]
        def check_password(self, password):
        ^
app/models/user.py: note: In member "is_admin" of class "User":
app/models/user.py:77:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def is_admin(self):
        ^
app/models/user.py: note: In member "update_last_login" of class "User":
app/models/user.py:86:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def update_last_login(self):
        ^
app/models/user.py:86:5: note: Use "-> None" if function does not return a value
app/models/user.py: note: In member "to_dict" of class "User":
app/models/user.py:91:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def to_dict(self):
        ^
app/models/user.py: note: In member "create_admin" of class "User":
app/models/user.py:108:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def create_admin():
        ^
app/models/user.py:112:21: error: Call to untyped function "User" in typed
context  [no-untyped-call]
                admin = User(username="admin", password="Admin123", role="...
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/user.py: note: In member "__repr__" of class "User":
app/models/user.py:118:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/task.py:10:12: error: Name "db.Model" is not defined  [name-defined]
    class Task(db.Model):
               ^
app/models/task.py: note: In class "Task":
app/models/task.py:10:12: error: Class cannot subclass "Model" (has type "Any")
 [misc]
    class Task(db.Model):
               ^~~~~~~~
app/models/task.py: note: In member "__init__" of class "Task":
app/models/task.py:36:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(
        ^
app/models/task.py: note: In member "to_dict" of class "Task":
app/models/task.py:72:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def to_dict(self):
        ^
app/models/task.py: note: In member "get_active_tasks" of class "Task":
app/models/task.py:104:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def get_active_tasks():
        ^
app/models/task.py: note: In member "get_by_type" of class "Task":
app/models/task.py:109:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_type(task_type):
        ^
app/models/task.py: note: In member "get_by_db_type" of class "Task":
app/models/task.py:114:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_db_type(db_type):
        ^
app/models/task.py: note: In member "get_builtin_tasks" of class "Task":
app/models/task.py:119:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def get_builtin_tasks():
        ^
app/models/task.py: note: In member "success_rate" of class "Task":
app/models/task.py:124:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def success_rate(self):
        ^
app/models/task.py: note: In member "get_matching_instances" of class "Task":
app/models/task.py:130:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def get_matching_instances(self):
        ^
app/models/task.py: note: In member "__repr__" of class "Task":
app/models/task.py:136:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/log.py:10:11: error: Name "db.Model" is not defined  [name-defined]
    class Log(db.Model):
              ^
app/models/log.py: note: In class "Log":
app/models/log.py:10:11: error: Class cannot subclass "Model" (has type "Any") 
[misc]
    class Log(db.Model):
              ^~~~~~~~
app/models/log.py: note: In member "__init__" of class "Log":
app/models/log.py:30:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(
        ^
app/models/log.py: note: In member "to_dict" of class "Log":
app/models/log.py:66:5: error: Function is missing a return type annotation 
[no-untyped-def]
        def to_dict(self):
        ^
app/models/log.py: note: In member "log_operation" of class "Log":
app/models/log.py:89:5: error: Function is missing a type annotation 
[no-untyped-def]
        def log_operation(
        ^
app/models/log.py:115:19: error: Call to untyped function "Log" in typed
context  [no-untyped-call]
                log = Log(
                      ^
app/models/log.py: note: In member "log_info" of class "Log":
app/models/log.py:136:5: error: Function is missing a type annotation 
[no-untyped-def]
        def log_info(
        ^
app/models/log.py:146:9: error: Call to untyped function "log_operation" of
"Log" in typed context  [no-untyped-call]
            Log.log_operation(
            ^
app/models/log.py: note: In member "log_warning" of class "Log":
app/models/log.py:159:5: error: Function is missing a type annotation 
[no-untyped-def]
        def log_warning(
        ^
app/models/log.py:169:9: error: Call to untyped function "log_operation" of
"Log" in typed context  [no-untyped-call]
            Log.log_operation(
            ^
app/models/log.py: note: In member "log_error" of class "Log":
app/models/log.py:182:5: error: Function is missing a type annotation 
[no-untyped-def]
        def log_error(
        ^
app/models/log.py:192:9: error: Call to untyped function "log_operation" of
"Log" in typed context  [no-untyped-call]
            Log.log_operation("ERROR", "error", message, module, details, ...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/log.py: note: In member "log_security" of class "Log":
app/models/log.py:195:5: error: Function is missing a type annotation 
[no-untyped-def]
        def log_security(
        ^
app/models/log.py:205:9: error: Call to untyped function "log_operation" of
"Log" in typed context  [no-untyped-call]
            Log.log_operation(
            ^
app/models/log.py: note: In member "get_by_level" of class "Log":
app/models/log.py:218:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_level(level):
        ^
app/models/log.py: note: In member "get_by_type" of class "Log":
app/models/log.py:223:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_type(log_type):
        ^
app/models/log.py: note: In member "get_by_user" of class "Log":
app/models/log.py:228:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_user(user_id):
        ^
app/models/log.py: note: In member "get_recent_logs" of class "Log":
app/models/log.py:233:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_recent_logs(limit=100):
        ^
app/models/log.py: note: In member "get_error_logs" of class "Log":
app/models/log.py:238:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_error_logs(limit=50):
        ^
app/models/log.py: note: In member "__repr__" of class "Log":
app/models/log.py:242:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/instance.py:12:16: error: Name "db.Model" is not defined 
[name-defined]
    class Instance(db.Model):
                   ^
app/models/instance.py: note: In class "Instance":
app/models/instance.py:12:16: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Instance(db.Model):
                   ^~~~~~~~
app/models/instance.py: note: In member "__init__" of class "Instance":
app/models/instance.py:43:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(
        ^
app/models/instance.py: note: In member "test_connection" of class "Instance":
app/models/instance.py:79:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def test_connection(self):
        ^
app/models/instance.py:88:24: error: Call to untyped function
"_test_sql_server_connection" in typed context  [no-untyped-call]
                    return self._test_sql_server_connection()
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/instance.py:90:24: error: Call to untyped function
"_test_mysql_connection" in typed context  [no-untyped-call]
                    return self._test_mysql_connection()
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/instance.py:92:24: error: Call to untyped function
"_test_oracle_connection" in typed context  [no-untyped-call]
                    return self._test_oracle_connection()
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/instance.py: note: In member "_test_sql_server_connection" of class "Instance":
app/models/instance.py:100:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _test_sql_server_connection(self):
        ^
app/models/instance.py: note: In member "_test_mysql_connection" of class "Instance":
app/models/instance.py:117:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _test_mysql_connection(self):
        ^
app/models/instance.py: note: In member "_test_oracle_connection" of class "Instance":
app/models/instance.py:134:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def _test_oracle_connection(self):
        ^
app/models/instance.py: note: In member "to_dict" of class "Instance":
app/models/instance.py:175:5: error: Function is missing a type annotation 
[no-untyped-def]
        def to_dict(self, include_password=False):
        ^
app/models/instance.py: note: In member "soft_delete" of class "Instance":
app/models/instance.py:222:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def soft_delete(self):
        ^
app/models/instance.py:222:5: note: Use "-> None" if function does not return a value
app/models/instance.py: note: In member "restore" of class "Instance":
app/models/instance.py:229:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def restore(self):
        ^
app/models/instance.py:229:5: note: Use "-> None" if function does not return a value
app/models/instance.py: note: In member "get_active_instances" of class "Instance":
app/models/instance.py:237:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_active_instances():
        ^
app/models/instance.py: note: In member "get_by_db_type" of class "Instance":
app/models/instance.py:242:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_db_type(db_type):
        ^
app/models/instance.py: note: In member "get_by_environment" of class "Instance":
app/models/instance.py:247:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_environment(environment):
        ^
app/models/instance.py: note: In member "get_by_db_type_and_environment" of class "Instance":
app/models/instance.py:252:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_db_type_and_environment(db_type, environment):
        ^
app/models/instance.py: note: In member "get_environment_choices" of class "Instance":
app/models/instance.py:257:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_environment_choices():
        ^
app/models/instance.py: note: In member "__repr__" of class "Instance":
app/models/instance.py:265:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/database_type_config.py:13:26: error: Name "db.Model" is not defined
 [name-defined]
    class DatabaseTypeConfig(db.Model):
                             ^
app/models/database_type_config.py: note: In class "DatabaseTypeConfig":
app/models/database_type_config.py:13:26: error: Class cannot subclass "Model"
(has type "Any")  [misc]
    class DatabaseTypeConfig(db.Model):
                             ^~~~~~~~
app/models/database_type_config.py: note: In member "__repr__" of class "DatabaseTypeConfig":
app/models/database_type_config.py:35:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __repr__(self):
        ^
app/models/database_type_config.py: note: In function "features_list":
app/models/database_type_config.py:43:17: error: Returning Any from function
declared to return "list[str]"  [no-any-return]
                    return json.loads(self.features)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/database_type_config.py:49:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def features_list(self, value: list[str]):
        ^
app/models/database_type_config.py: note: In member "get_active_types" of class "DatabaseTypeConfig":
app/models/database_type_config.py:77:9: error: Returning Any from function
declared to return "list[DatabaseTypeConfig]"  [no-any-return]
            return cls.query.filter_by(is_active=True).order_by(cls.sort_o...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/models/database_type_config.py: note: In member "get_by_name" of class "DatabaseTypeConfig":
app/models/database_type_config.py:82:9: error: Returning Any from function
declared to return "DatabaseTypeConfig"  [no-any-return]
            return cls.query.filter_by(name=name).first()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py:13:18: error: Name "db.Model" is not defined 
[name-defined]
    class Credential(db.Model):
                     ^
app/models/credential.py: note: In class "Credential":
app/models/credential.py:13:18: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Credential(db.Model):
                     ^~~~~~~~
app/models/credential.py: note: In member "__init__" of class "Credential":
app/models/credential.py:32:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(
        ^
app/models/credential.py:59:9: error: Call to untyped function "set_password"
in typed context  [no-untyped-call]
            self.set_password(password)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "set_password" of class "Credential":
app/models/credential.py:65:5: error: Function is missing a type annotation 
[no-untyped-def]
        def set_password(self, password):
        ^
app/models/credential.py: note: In member "check_password" of class "Credential":
app/models/credential.py:75:5: error: Function is missing a type annotation 
[no-untyped-def]
        def check_password(self, password):
        ^
app/models/credential.py: note: In member "get_password_masked" of class "Credential":
app/models/credential.py:97:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_password_masked(self):
        ^
app/models/credential.py: note: In member "get_plain_password" of class "Credential":
app/models/credential.py:108:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_plain_password(self):
        ^
app/models/credential.py: note: In member "to_dict" of class "Credential":
app/models/credential.py:131:5: error: Function is missing a type annotation 
[no-untyped-def]
        def to_dict(self, include_password=False):
        ^
app/models/credential.py:156:32: error: Call to untyped function
"get_password_masked" in typed context  [no-untyped-call]
                data["password"] = self.get_password_masked()
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/models/credential.py: note: In member "soft_delete" of class "Credential":
app/models/credential.py:160:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def soft_delete(self):
        ^
app/models/credential.py:160:5: note: Use "-> None" if function does not return a value
app/models/credential.py: note: In member "restore" of class "Credential":
app/models/credential.py:166:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def restore(self):
        ^
app/models/credential.py:166:5: note: Use "-> None" if function does not return a value
app/models/credential.py: note: In member "get_active_credentials" of class "Credential":
app/models/credential.py:173:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_active_credentials():
        ^
app/models/credential.py: note: In member "get_by_type" of class "Credential":
app/models/credential.py:178:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_type(credential_type):
        ^
app/models/credential.py: note: In member "get_by_db_type" of class "Credential":
app/models/credential.py:183:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_by_db_type(db_type):
        ^
app/models/credential.py: note: In class "Credential":
app/models/credential.py:187:5: error: Name "to_dict" already defined on line
131  [no-redef]
        def to_dict(self):
        ^
app/models/credential.py: note: In member "to_dict" of class "Credential":
app/models/credential.py:187:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/credential.py: note: In member "__repr__" of class "Credential":
app/models/credential.py:208:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/account.py:10:15: error: Name "db.Model" is not defined 
[name-defined]
    class Account(db.Model):
                  ^
app/models/account.py: note: In class "Account":
app/models/account.py:10:15: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class Account(db.Model):
                  ^~~~~~~~
app/models/account.py: note: In member "__repr__" of class "Account":
app/models/account.py:47:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/account.py: note: In member "to_dict" of class "Account":
app/models/account.py:50:5: error: Function is missing a return type annotation
 [no-untyped-def]
        def to_dict(self):
        ^
app/utils/advanced_error_handler.py: note: In member "__init__" of class "ErrorContext":
app/utils/advanced_error_handler.py:51:73: error: Incompatible default for
argument "request_data" (default has type "None", argument has type
"dict[str, Any]")  [assignment]
    ...__init__(self, error: Exception, request_data: dict[str, Any] = None):
                                                                       ^~~~
app/utils/advanced_error_handler.py:51:73: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/advanced_error_handler.py:51:73: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/advanced_error_handler.py: note: In member "__init__" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:69:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/advanced_error_handler.py:69:5: note: Use "-> None" if function does not return a value
app/utils/advanced_error_handler.py:73:9: error: Call to untyped function
"_register_default_handlers" in typed context  [no-untyped-call]
            self._register_default_handlers()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "register_error_handler" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:75:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def register_error_handler(self, error_type: type, handler: Callab...
        ^
app/utils/advanced_error_handler.py:75:65: error: Missing type parameters for
generic type "Callable"  [type-arg]
    ...def register_error_handler(self, error_type: type, handler: Callable):
                                                                   ^
app/utils/advanced_error_handler.py: note: In member "register_recovery_strategy" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:79:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def register_recovery_strategy(self, error_category: str, strategy...
        ^
app/utils/advanced_error_handler.py:79:73: error: Missing type parameters for
generic type "Callable"  [type-arg]
    ...ster_recovery_strategy(self, error_category: str, strategy: Callable):
                                                                   ^
app/utils/advanced_error_handler.py: note: In member "handle_error" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:83:70: error: Incompatible default for
argument "context" (default has type "None", argument has type "ErrorContext") 
[assignment]
    ...(self, error: Exception, context: ErrorContext = None) -> dict[str, An...
                                                        ^~~~
app/utils/advanced_error_handler.py:83:70: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/advanced_error_handler.py:83:70: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/advanced_error_handler.py:86:13: error: Statement is unreachable 
[unreachable]
                context = ErrorContext(error)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_register_default_handlers" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:100:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _register_default_handlers(self):
        ^
app/utils/advanced_error_handler.py:100:5: note: Use "-> None" if function does not return a value
app/utils/advanced_error_handler.py: note: In member "_log_error" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:246:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _log_error(self, error: Exception, context: ErrorContext):
        ^
app/utils/advanced_error_handler.py:263:12: error: Non-overlapping equality
check (left operand type: "str", right operand type:
"Literal[LogLevel.CRITICAL]")  [comparison-overlap]
            if log_level == LogLevel.CRITICAL:
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:264:13: error: Statement is unreachable 
[unreachable]
                logger.critical(f"严重错误: {context.error_id}", extra=log_dat...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:265:14: error: Non-overlapping equality
check (left operand type: "str", right operand type: "Literal[LogLevel.ERROR]") 
[comparison-overlap]
            elif log_level == LogLevel.ERROR:
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:266:13: error: Statement is unreachable 
[unreachable]
                logger.error(f"错误: {context.error_id}", extra=log_data)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:267:14: error: Non-overlapping equality
check (left operand type: "str", right operand type:
"Literal[LogLevel.WARNING]")  [comparison-overlap]
            elif log_level == LogLevel.WARNING:
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:268:13: error: Statement is unreachable 
[unreachable]
                logger.warning(f"警告: {context.error_id}", extra=log_data)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_get_log_level" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:277:20: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
                return LogLevel.ERROR
                       ^~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:279:20: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
                return LogLevel.WARNING
                       ^~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py:280:16: error: Incompatible return value
type (got "LogLevel", expected "str")  [return-value]
            return LogLevel.ERROR
                   ^~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "_update_error_metrics" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:282:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _update_error_metrics(self, error: Exception, context: ErrorCo...
        ^
app/utils/advanced_error_handler.py: note: In member "_get_error_info" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:330:13: error: Returning Any from function
declared to return "dict[str, Any]"  [no-any-return]
                return handler(error, context)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In member "clear_error_metrics" of class "AdvancedErrorHandler":
app/utils/advanced_error_handler.py:368:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def clear_error_metrics(self):
        ^
app/utils/advanced_error_handler.py:368:5: note: Use "-> None" if function does not return a value
app/utils/advanced_error_handler.py: note: At top level:
app/utils/advanced_error_handler.py:374:26: error: Call to untyped function
"AdvancedErrorHandler" in typed context  [no-untyped-call]
    advanced_error_handler = AdvancedErrorHandler()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/utils/advanced_error_handler.py: note: In function "handle_advanced_errors":
app/utils/advanced_error_handler.py:378:1: error: Function is missing a type
annotation  [no-untyped-def]
    def handle_advanced_errors(func):
    ^
app/utils/advanced_error_handler.py:382:5: error: Function is missing a type
annotation  [no-untyped-def]
        def wrapper(*args, **kwargs):
        ^
app/utils/advanced_error_handler.py: note: In function "monitor_errors":
app/utils/advanced_error_handler.py:429:1: error: Function is missing a type
annotation  [no-untyped-def]
    def monitor_errors(func):
    ^
app/utils/advanced_error_handler.py:433:5: error: Function is missing a type
annotation  [no-untyped-def]
        def wrapper(*args, **kwargs):
        ^
app/services/database_type_service.py: note: In member "get_all_types" of class "DatabaseTypeService":
app/services/database_type_service.py:21:9: error: Returning Any from function
declared to return "list[DatabaseTypeConfig]"  [no-any-return]
            return DatabaseTypeConfig.query.order_by(DatabaseTypeConfig.so...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_type_service.py: note: In member "get_type_by_id" of class "DatabaseTypeService":
app/services/database_type_service.py:36:9: error: Returning Any from function
declared to return "DatabaseTypeConfig | None"  [no-any-return]
            return DatabaseTypeConfig.query.get(type_id)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "create_type" of class "DatabaseTypeService":
app/services/database_type_service.py:81:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"数据库类型创建失败 - 完整性错误: {e}")
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py:85:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"数据库类型创建失败: {e}")
                          ^~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "update_type" of class "DatabaseTypeService":
app/services/database_type_service.py:118:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"数据库类型更新失败: {e}")
                          ^~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "delete_type" of class "DatabaseTypeService":
app/services/database_type_service.py:149:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"数据库类型删除失败: {e}")
                          ^~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "toggle_status" of class "DatabaseTypeService":
app/services/database_type_service.py:176:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"数据库类型状态切换失败: {e}")
                          ^~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py: note: In member "init_default_types" of class "DatabaseTypeService":
app/services/database_type_service.py:180:5: error: Function is missing a
return type annotation  [no-untyped-def]
        def init_default_types():
        ^
app/services/database_type_service.py:180:5: note: Use "-> None" if function does not return a value
app/services/database_type_service.py:238:51: error: Argument 1 to
"get_by_name" of "DatabaseTypeConfig" has incompatible type "object"; expected
"str"  [arg-type]
                if not DatabaseTypeConfig.get_by_name(type_data["name"]):
                                                      ^~~~~~~~~~~~~~~~~
app/services/database_type_service.py:254:40: error: Incompatible types in
assignment (expression has type "object", variable has type "list[str]") 
[assignment]
                    config.features_list = type_data.get("features", [])
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_type_service.py:262:23: error: Argument 1 to "log_error"
has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"初始化默认数据库类型失败: {e}")
                          ^~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:8:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/user_management.py: note: In function "index":
app/routes/user_management.py:22:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def index():
    ^
app/routes/user_management.py: note: In function "api_get_users":
app/routes/user_management.py:42:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_get_users():
    ^
app/routes/user_management.py:80:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success(
                   ^
app/routes/user_management.py:95:16: error: Call to untyped function "error" of
"APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"获取用户列表失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_create_user":
app/routes/user_management.py:101:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_create_user():
    ^
app/routes/user_management.py:110:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error(f"缺少必填字段: {field}")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:119:20: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                return APIResponse.error("用户名只能包含字母、数字和下划线，长度3-20位")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:123:20: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                return APIResponse.error("用户名已存在")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:127:20: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                return APIResponse.error("角色只能是admin或user")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:130:16: error: Call to untyped function "User" in
typed context  [no-untyped-call]
            user = User(username=username, password=password, role=role)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:135:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success({"message": "用户创建成功", "user": user....
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/user_management.py:135:78: error: Call to untyped function "to_dict"
in typed context  [no-untyped-call]
    ...urn APIResponse.success({"message": "用户创建成功", "user": user.to_dict()})
                                                                         ^~~~
app/routes/user_management.py:138:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"密码不符合要求: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:141:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"创建用户失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_update_user":
app/routes/user_management.py:147:1: error: Function is missing a type
annotation  [no-untyped-def]
    def api_update_user(user_id):
    ^
app/routes/user_management.py:157:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error("用户名只能包含字母、数字和下划线，长度3-20位")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:162:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error("用户名已存在")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:173:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error("角色只能是admin或user")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:182:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success({"message": "用户更新成功", "user": user....
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/user_management.py:185:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"密码不符合要求: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:188:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"更新用户失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_delete_user":
app/routes/user_management.py:194:1: error: Function is missing a type
annotation  [no-untyped-def]
    def api_delete_user(user_id):
    ^
app/routes/user_management.py:201:20: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                return APIResponse.error("不能删除自己的账户")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:207:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error("不能删除最后一个管理员账户")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:212:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success({"message": "用户删除成功"})
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:216:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"删除用户失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_toggle_user_status":
app/routes/user_management.py:222:1: error: Function is missing a type
annotation  [no-untyped-def]
    def api_toggle_user_status(user_id):
    ^
app/routes/user_management.py:229:20: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                return APIResponse.error("不能禁用自己的账户")
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:235:24: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
                    return APIResponse.error("不能禁用最后一个管理员账户")
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py:241:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success({"message": f"用户{status_text}成功", "...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/user_management.py:245:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"切换用户状态失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/user_management.py: note: In function "api_get_stats":
app/routes/user_management.py:251:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_get_stats():
    ^
app/routes/user_management.py:259:16: error: Call to untyped function "success"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success(
                   ^
app/routes/user_management.py:270:16: error: Call to untyped function "error"
of "APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(f"获取统计信息失败: {str(e)}")
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "health_check":
app/routes/health.py:21:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def health_check():
    ^
app/routes/health.py:24:16: error: Call to untyped function "success" of
"APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success(
                   ^
app/routes/health.py:30:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("健康检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "detailed_health_check":
app/routes/health.py:34:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def detailed_health_check():
    ^
app/routes/health.py:38:21: error: Call to untyped function
"check_database_health" in typed context  [no-untyped-call]
            db_status = check_database_health()
                        ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py:41:24: error: Call to untyped function
"check_cache_health" in typed context  [no-untyped-call]
            cache_status = check_cache_health()
                           ^~~~~~~~~~~~~~~~~~~~
app/routes/health.py:44:25: error: Call to untyped function
"check_system_health" in typed context  [no-untyped-call]
            system_status = check_system_health()
                            ^~~~~~~~~~~~~~~~~~~~~
app/routes/health.py:59:16: error: Call to untyped function "success" of
"APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success(
                   ^
app/routes/health.py:75:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("详细健康检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "check_database_health":
app/routes/health.py:78:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def check_database_health():
    ^
app/routes/health.py: note: In function "check_cache_health":
app/routes/health.py:95:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def check_cache_health():
    ^
app/routes/health.py: note: In function "check_system_health":
app/routes/health.py:113:1: error: Function is missing a return type annotation
 [no-untyped-def]
    def check_system_health():
    ^
app/routes/health.py: note: In function "readiness_check":
app/routes/health.py:149:1: error: Function is missing a return type annotation
 [no-untyped-def]
    def readiness_check():
    ^
app/routes/health.py:153:20: error: Call to untyped function
"check_database_health" in typed context  [no-untyped-call]
            db_ready = check_database_health()["healthy"]
                       ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py:154:23: error: Call to untyped function
"check_cache_health" in typed context  [no-untyped-call]
            cache_ready = check_cache_health()["healthy"]
                          ^~~~~~~~~~~~~~~~~~~~
app/routes/health.py:157:20: error: Call to untyped function "success" of
"APIResponse" in typed context  [no-untyped-call]
                return APIResponse.success(data={"status": "ready"}, messa...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/health.py:158:16: error: Call to untyped function "error" of
"APIResponse" in typed context  [no-untyped-call]
            return APIResponse.error(message="服务未就绪", code=503)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py:161:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("就绪检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/health.py: note: In function "liveness_check":
app/routes/health.py:165:1: error: Function is missing a return type annotation
 [no-untyped-def]
    def liveness_check():
    ^
app/routes/health.py:169:16: error: Call to untyped function "success" of
"APIResponse" in typed context  [no-untyped-call]
            return APIResponse.success(data={"status": "alive"}, message="...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/health.py:172:16: error: "type[APIResponse]" has no attribute
"server_error"  [attr-defined]
            return APIResponse.server_error("存活检查失败")
                   ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:8:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/credentials.py: note: In function "index":
app/routes/credentials.py:31:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def index():
    ^
app/routes/credentials.py: note: In function "create":
app/routes/credentials.py:111:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def create():
    ^
app/routes/credentials.py:129:44: error: Argument 1 to "validate_username" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            username_error = validate_username(data.get("username"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:137:44: error: Argument 1 to "validate_password" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            password_error = validate_password(data.get("password"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:146:46: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                db_type_error = validate_db_type(data.get("db_type"))
                                                 ^~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:154:58: error: Argument 1 to
"validate_credential_type" has incompatible type "Any | str | None"; expected
"str"  [arg-type]
    ...credential_type_error = validate_credential_type(data.get("credential_...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/routes/credentials.py:172:26: error: Call to untyped function "Credential"
in typed context  [no-untyped-call]
                credential = Credential(
                             ^
app/routes/credentials.py:173:22: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    name=data.get("name").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:175:26: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    username=data.get("username").strip(),
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:198:77: error: Call to untyped function "to_dict" in
typed context  [no-untyped-call]
    ...   jsonify({"message": "凭据创建成功", "credential": credential.to_dict()}),
                                                                  ^~~~~~~~~~~
app/routes/credentials.py: note: In function "detail":
app/routes/credentials.py:232:1: error: Function is missing a type annotation 
[no-untyped-def]
    def detail(credential_id):
    ^
app/routes/credentials.py: note: In function "edit":
app/routes/credentials.py:245:1: error: Function is missing a type annotation 
[no-untyped-def]
    def edit(credential_id):
    ^
app/routes/credentials.py:265:44: error: Argument 1 to "validate_username" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            username_error = validate_username(data.get("username"))
                                               ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:274:48: error: Argument 1 to "validate_password" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                password_error = validate_password(data.get("password"))
                                                   ^~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:283:46: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
                db_type_error = validate_db_type(data.get("db_type"))
                                                 ^~~~~~~~~~~~~~~~~~~
app/routes/credentials.py:291:58: error: Argument 1 to
"validate_credential_type" has incompatible type "Any | str | None"; expected
"str"  [arg-type]
    ...credential_type_error = validate_credential_type(data.get("credential_...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/routes/credentials.py:317:42: error: Item "None" of "Any | str | None" has
no attribute "strip"  [union-attr]
                    credential.description = data.get("description").strip...
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/credentials.py: note: In function "toggle":
app/routes/credentials.py:365:1: error: Function is missing a type annotation 
[no-untyped-def]
    def toggle(credential_id):
    ^
app/routes/credentials.py: note: In function "delete":
app/routes/credentials.py:411:1: error: Function is missing a type annotation 
[no-untyped-def]
    def delete(credential_id):
    ^
app/routes/credentials.py: note: In function "test_credential":
app/routes/credentials.py:439:1: error: Function is missing a type annotation 
[no-untyped-def]
    def test_credential(credential_id):
    ^
app/routes/credentials.py: note: In function "api_list":
app/routes/credentials.py:471:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_list():
    ^
app/routes/credentials.py: note: In function "api_detail":
app/routes/credentials.py:480:1: error: Function is missing a type annotation 
[no-untyped-def]
    def api_detail(credential_id):
    ^
app/routes/auth.py:12:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required, login_user, logo...
    ^
app/routes/auth.py: note: In function "login":
app/routes/auth.py:26:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def login():
    ^
app/routes/auth.py: note: In function "logout":
app/routes/auth.py:97:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def logout():
    ^
app/routes/auth.py: note: In function "profile":
app/routes/auth.py:124:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def profile():
    ^
app/routes/auth.py: note: In function "change_password":
app/routes/auth.py:145:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def change_password():
    ^
app/routes/auth.py: note: In function "refresh":
app/routes/auth.py:200:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def refresh():
    ^
app/routes/auth.py: note: In function "me":
app/routes/auth.py:209:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def me():
    ^
app/models/sync_data.py:10:16: error: Name "db.Model" is not defined 
[name-defined]
    class SyncData(db.Model):
                   ^
app/models/sync_data.py: note: In class "SyncData":
app/models/sync_data.py:10:16: error: Class cannot subclass "Model" (has type
"Any")  [misc]
    class SyncData(db.Model):
                   ^~~~~~~~
app/models/sync_data.py: note: In member "__init__" of class "SyncData":
app/models/sync_data.py:30:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __init__(
        ^
app/models/sync_data.py: note: In member "get_record_ids" of class "SyncData":
app/models/sync_data.py:75:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def get_record_ids(self):
        ^
app/models/sync_data.py: note: In member "to_dict" of class "SyncData":
app/models/sync_data.py:84:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/sync_data.py: note: In member "get_latest_sync" of class "SyncData":
app/models/sync_data.py:110:5: error: Function is missing a type annotation 
[no-untyped-def]
        def get_latest_sync(instance_id, sync_type=None):
        ^
app/models/sync_data.py: note: In member "__repr__" of class "SyncData":
app/models/sync_data.py:126:5: error: Function is missing a type annotation 
[no-untyped-def]
        def __repr__(self):
        ^
app/models/permission_config.py:10:24: error: Name "db.Model" is not defined 
[name-defined]
    class PermissionConfig(db.Model):
                           ^
app/models/permission_config.py: note: In class "PermissionConfig":
app/models/permission_config.py:10:24: error: Class cannot subclass "Model"
(has type "Any")  [misc]
    class PermissionConfig(db.Model):
                           ^~~~~~~~
app/models/permission_config.py: note: In member "__repr__" of class "PermissionConfig":
app/models/permission_config.py:34:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __repr__(self):
        ^
app/models/permission_config.py: note: In member "to_dict" of class "PermissionConfig":
app/models/permission_config.py:37:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/permission_config.py: note: In member "get_permissions_by_db_type" of class "PermissionConfig":
app/models/permission_config.py:52:5: error: Function is missing a type
annotation  [no-untyped-def]
        def get_permissions_by_db_type(cls, db_type):
        ^
app/models/permission_config.py:61:9: error: Need type annotation for "result"
(hint: "result: dict[<type>, <type>] = ...")  [var-annotated]
            result = {}
            ^~~~~~
app/models/permission_config.py: note: In member "init_default_permissions" of class "PermissionConfig":
app/models/permission_config.py:70:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def init_default_permissions(cls):
        ^
app/models/permission_config.py:70:5: note: Use "-> None" if function does not return a value
app/models/account_classification.py:11:29: error: Name "db.Model" is not
defined  [name-defined]
    class AccountClassification(db.Model):
                                ^
app/models/account_classification.py: note: In class "AccountClassification":
app/models/account_classification.py:11:29: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class AccountClassification(db.Model):
                                ^~~~~~~~
app/models/account_classification.py: note: In member "__repr__" of class "AccountClassification":
app/models/account_classification.py:41:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __repr__(self):
        ^
app/models/account_classification.py: note: In member "to_dict" of class "AccountClassification":
app/models/account_classification.py:44:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/account_classification.py: note: At top level:
app/models/account_classification.py:62:26: error: Name "db.Model" is not
defined  [name-defined]
    class ClassificationRule(db.Model):
                             ^
app/models/account_classification.py: note: In class "ClassificationRule":
app/models/account_classification.py:62:26: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class ClassificationRule(db.Model):
                             ^~~~~~~~
app/models/account_classification.py: note: In member "__repr__" of class "ClassificationRule":
app/models/account_classification.py:76:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __repr__(self):
        ^
app/models/account_classification.py: note: In member "to_dict" of class "ClassificationRule":
app/models/account_classification.py:79:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/account_classification.py: note: In member "get_rule_expression" of class "ClassificationRule":
app/models/account_classification.py:92:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def get_rule_expression(self):
        ^
app/models/account_classification.py: note: In member "set_rule_expression" of class "ClassificationRule":
app/models/account_classification.py:99:5: error: Function is missing a type
annotation  [no-untyped-def]
        def set_rule_expression(self, expression):
        ^
app/models/account_classification.py: note: At top level:
app/models/account_classification.py:104:39: error: Name "db.Model" is not
defined  [name-defined]
    class AccountClassificationAssignment(db.Model):
                                          ^
app/models/account_classification.py: note: In class "AccountClassificationAssignment":
app/models/account_classification.py:104:39: error: Class cannot subclass
"Model" (has type "Any")  [misc]
    class AccountClassificationAssignment(db.Model):
                                          ^~~~~~~~
app/models/account_classification.py: note: In member "__repr__" of class "AccountClassificationAssignment":
app/models/account_classification.py:123:5: error: Function is missing a type
annotation  [no-untyped-def]
        def __repr__(self):
        ^
app/models/account_classification.py: note: In member "to_dict" of class "AccountClassificationAssignment":
app/models/account_classification.py:126:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/account_change.py:10:21: error: Name "db.Model" is not defined 
[name-defined]
    class AccountChange(db.Model):
                        ^
app/models/account_change.py: note: In class "AccountChange":
app/models/account_change.py:10:21: error: Class cannot subclass "Model" (has
type "Any")  [misc]
    class AccountChange(db.Model):
                        ^~~~~~~~
app/models/account_change.py: note: In member "__init__" of class "AccountChange":
app/models/account_change.py:26:5: error: Function is missing a type annotation
 [no-untyped-def]
        def __init__(self, sync_data_id, instance_id, change_type, account...
        ^
app/models/account_change.py: note: In member "to_dict" of class "AccountChange":
app/models/account_change.py:41:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def to_dict(self):
        ^
app/models/account_change.py: note: In member "get_changes_by_sync" of class "AccountChange":
app/models/account_change.py:59:5: error: Function is missing a type annotation
 [no-untyped-def]
        def get_changes_by_sync(sync_data_id):
        ^
app/models/account_change.py: note: In member "get_changes_by_instance" of class "AccountChange":
app/models/account_change.py:72:5: error: Function is missing a type annotation
 [no-untyped-def]
        def get_changes_by_instance(instance_id, limit=100):
        ^
app/models/account_change.py: note: In member "__repr__" of class "AccountChange":
app/models/account_change.py:90:5: error: Function is missing a type annotation
 [no-untyped-def]
        def __repr__(self):
        ^
app/middleware/error_logging_middleware.py:10:1: error: Skipping analyzing
"flask_login": module is installed, but missing library stubs or py.typed marker
 [import-untyped]
    from flask_login import current_user
    ^
app/middleware/error_logging_middleware.py: note: In function "determine_log_source":
app/middleware/error_logging_middleware.py:17:1: error: Function is missing a
return type annotation  [no-untyped-def]
    def determine_log_source():
    ^
app/middleware/error_logging_middleware.py: note: In function "register_error_logging_middleware":
app/middleware/error_logging_middleware.py:34:1: error: Function is missing a
type annotation  [no-untyped-def]
    def register_error_logging_middleware(app):
    ^
app/middleware/error_logging_middleware.py:39:5: error: Function is missing a
return type annotation  [no-untyped-def]
        def log_request_start():
        ^
app/middleware/error_logging_middleware.py:39:5: note: Use "-> None" if function does not return a value
app/middleware/error_logging_middleware.py:49:30: error: Call to untyped
function "determine_log_source" in typed context  [no-untyped-call]
                    log_source = determine_log_source()
                                 ^~~~~~~~~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py:64:5: error: Function is missing a
type annotation  [no-untyped-def]
        def log_request_end(response):
        ^
app/middleware/error_logging_middleware.py:107:37: error: Call to untyped
function "_find_related_sync_logs" in typed context  [no-untyped-call]
                            sync_logs = _find_related_sync_logs(start_log....
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:111:38: error: Call to untyped
function "_merge_batch_sync_logs" in typed context  [no-untyped-call]
                            merged_log = _merge_batch_sync_logs(
                                         ^
app/middleware/error_logging_middleware.py:126:38: error: Call to untyped
function "_merge_regular_request_logs" in typed context  [no-untyped-call]
                            merged_log = _merge_regular_request_logs(start...
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/middleware/error_logging_middleware.py:156:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_bad_request(error):
        ^
app/middleware/error_logging_middleware.py:162:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_unauthorized(error):
        ^
app/middleware/error_logging_middleware.py:168:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_forbidden(error):
        ^
app/middleware/error_logging_middleware.py:174:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_not_found(error):
        ^
app/middleware/error_logging_middleware.py:184:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_internal_server_error(error):
        ^
app/middleware/error_logging_middleware.py:190:5: error: Function is missing a
type annotation  [no-untyped-def]
        def handle_unhandled_exception(error):
        ^
app/middleware/error_logging_middleware.py:197:13: error: Call to untyped
function "log_error" of "Log" in typed context  [no-untyped-call]
                Log.log_error(
                ^
app/middleware/error_logging_middleware.py: note: In function "log_database_operation_error":
app/middleware/error_logging_middleware.py:215:1: error: Function is missing a
return type annotation  [no-untyped-def]
    def log_database_operation_error(operation: str, error: Exception, mod...
    ^
app/middleware/error_logging_middleware.py:215:82: error: Incompatible default
for argument "module" (default has type "None", argument has type "str") 
[assignment]
    ...(operation: str, error: Exception, module: str = None, details: str = ...
                                                        ^~~~
app/middleware/error_logging_middleware.py:215:82: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/middleware/error_logging_middleware.py:215:82: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/middleware/error_logging_middleware.py:215:103: error: Incompatible default
for argument "details" (default has type "None", argument has type "str") 
[assignment]
    ...tion: str, error: Exception, module: str = None, details: str = None):
                                                                       ^~~~
app/middleware/error_logging_middleware.py:218:9: error: Call to untyped
function "log_error" of "Log" in typed context  [no-untyped-call]
            Log.log_error(
            ^
app/middleware/error_logging_middleware.py: note: In function "log_api_operation_error":
app/middleware/error_logging_middleware.py:230:1: error: Function is missing a
return type annotation  [no-untyped-def]
    def log_api_operation_error(endpoint: str, error: Exception, module: s...
    ^
app/middleware/error_logging_middleware.py:230:76: error: Incompatible default
for argument "module" (default has type "None", argument has type "str") 
[assignment]
    ...r(endpoint: str, error: Exception, module: str = None, details: str = ...
                                                        ^~~~
app/middleware/error_logging_middleware.py:230:76: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/middleware/error_logging_middleware.py:230:76: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/middleware/error_logging_middleware.py:230:97: error: Incompatible default
for argument "details" (default has type "None", argument has type "str") 
[assignment]
    ...oint: str, error: Exception, module: str = None, details: str = None):
                                                                       ^~~~
app/middleware/error_logging_middleware.py:233:9: error: Call to untyped
function "log_error" of "Log" in typed context  [no-untyped-call]
            Log.log_error(
            ^
app/middleware/error_logging_middleware.py: note: In function "log_sync_operation_error":
app/middleware/error_logging_middleware.py:245:1: error: Function is missing a
return type annotation  [no-untyped-def]
    def log_sync_operation_error(operation: str, error: Exception, module:...
    ^
app/middleware/error_logging_middleware.py:245:78: error: Incompatible default
for argument "module" (default has type "None", argument has type "str") 
[assignment]
    ...(operation: str, error: Exception, module: str = None, details: str = ...
                                                        ^~~~
app/middleware/error_logging_middleware.py:245:78: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/middleware/error_logging_middleware.py:245:78: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/middleware/error_logging_middleware.py:245:99: error: Incompatible default
for argument "details" (default has type "None", argument has type "str") 
[assignment]
    ...tion: str, error: Exception, module: str = None, details: str = None):
                                                                       ^~~~
app/middleware/error_logging_middleware.py:248:9: error: Call to untyped
function "log_error" of "Log" in typed context  [no-untyped-call]
            Log.log_error(
            ^
app/middleware/error_logging_middleware.py: note: In function "_find_related_sync_logs":
app/middleware/error_logging_middleware.py:260:1: error: Function is missing a
type annotation  [no-untyped-def]
    def _find_related_sync_logs(start_time, end_time):
    ^
app/middleware/error_logging_middleware.py: note: In function "_merge_batch_sync_logs":
app/middleware/error_logging_middleware.py:281:1: error: Function is missing a
type annotation  [no-untyped-def]
    def _merge_batch_sync_logs(start_log, sync_logs, end_time, duration, s...
    ^
app/middleware/error_logging_middleware.py:344:22: error: Call to untyped
function "determine_log_source" in typed context  [no-untyped-call]
            log_source = determine_log_source()
                         ^~~~~~~~~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py:347:22: error: Call to untyped
function "Log" in typed context  [no-untyped-call]
            merged_log = Log(
                         ^
app/middleware/error_logging_middleware.py: note: In function "_merge_regular_request_logs":
app/middleware/error_logging_middleware.py:375:1: error: Function is missing a
type annotation  [no-untyped-def]
    def _merge_regular_request_logs(start_log, end_time, duration, status_...
    ^
app/middleware/error_logging_middleware.py:418:22: error: Call to untyped
function "determine_log_source" in typed context  [no-untyped-call]
            log_source = determine_log_source()
                         ^~~~~~~~~~~~~~~~~~~~~~
app/middleware/error_logging_middleware.py:421:22: error: Call to untyped
function "Log" in typed context  [no-untyped-call]
            merged_log = Log(
                         ^
app/services/account_classification_service.py: note: In member "__init__" of class "AccountClassificationService":
app/services/account_classification_service.py:23:5: error: Function is missing
a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/account_classification_service.py:23:5: note: Use "-> None" if function does not return a value
app/services/account_classification_service.py: note: In member "create_classification" of class "AccountClassificationService":
app/services/account_classification_service.py:29:28: error: Incompatible
default for argument "description" (default has type "None", argument has type
"str")  [assignment]
            description: str = None,
                               ^~~~
app/services/account_classification_service.py:29:28: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:29:28: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:31:22: error: Incompatible
default for argument "color" (default has type "None", argument has type "str") 
[assignment]
            color: str = None,
                         ^~~~
app/services/account_classification_service.py:31:22: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:31:22: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:64:35: error: Call to untyped
function "to_dict" in typed context  [no-untyped-call]
                    "classification": classification.to_dict(),
                                      ^~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_classification_service.py: note: In member "update_classification" of class "AccountClassificationService":
app/services/account_classification_service.py:72:5: error: Function is missing
a type annotation for one or more arguments  [no-untyped-def]
        def update_classification(self, classification_id: int, **kwargs) ...
        ^
app/services/account_classification_service.py: note: In member "create_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:195:25: error: Call to untyped
function "to_dict" in typed context  [no-untyped-call]
                    "rule": rule.to_dict(),
                            ^~~~~~~~~~~~~~
app/services/account_classification_service.py: note: In member "update_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:203:5: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def update_rule(self, rule_id: int, **kwargs) -> dict[str, Any]:
        ^
app/services/account_classification_service.py: note: In member "get_classification_rules" of class "AccountClassificationService":
app/services/account_classification_service.py:275:65: error: Incompatible
default for argument "classification_id" (default has type "None", argument has
type "int")  [assignment]
    ...ssification_rules(self, classification_id: int = None, db_type: str = ...
                                                        ^~~~
app/services/account_classification_service.py:275:65: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:275:65: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:275:86: error: Incompatible
default for argument "db_type" (default has type "None", argument has type
"str")  [assignment]
    ...f, classification_id: int = None, db_type: str = None) -> list[dict[st...
                                                        ^~~~
app/services/account_classification_service.py: note: In member "classify_account" of class "AccountClassificationService":
app/services/account_classification_service.py:318:28: error: Incompatible
default for argument "assigned_by" (default has type "None", argument has type
"int")  [assignment]
            assigned_by: int = None,
                               ^~~~
app/services/account_classification_service.py:318:28: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:318:28: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:319:22: error: Incompatible
default for argument "notes" (default has type "None", argument has type "str") 
[assignment]
            notes: str = None,
                         ^~~~
app/services/account_classification_service.py:319:22: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:319:22: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py: note: In member "auto_classify_accounts" of class "AccountClassificationService":
app/services/account_classification_service.py:382:57: error: Incompatible
default for argument "instance_id" (default has type "None", argument has type
"int")  [assignment]
    ... auto_classify_accounts(self, instance_id: int = None) -> dict[str, An...
                                                        ^~~~
app/services/account_classification_service.py:382:57: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:382:57: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py:427:33: error: Argument 4 to
"classify_account" of "AccountClassificationService" has incompatible type
"None"; expected "int"  [arg-type]
                                    None,  # assigned_by
                                    ^~~~
app/services/account_classification_service.py: note: In member "_evaluate_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:472:31: error: Call to untyped
function "get_rule_expression" in typed context  [no-untyped-call]
                rule_expression = rule.get_rule_expression()
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_classification_service.py: note: In member "_evaluate_mysql_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:567:71: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...ate_mysql_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: In member "_evaluate_sqlserver_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:612:75: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...sqlserver_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: In member "get_account_classifications" of class "AccountClassificationService":
app/services/account_classification_service.py:780:61: error: Incompatible
default for argument "account_id" (default has type "None", argument has type
"int")  [assignment]
    ..._account_classifications(self, account_id: int = None) -> list[dict[st...
                                                        ^~~~
app/services/account_classification_service.py:780:61: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/account_classification_service.py:780:61: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/account_classification_service.py: note: In member "get_rule_matched_accounts_count" of class "AccountClassificationService":
app/services/account_classification_service.py:823:5: error: Function is
missing a type annotation  [no-untyped-def]
        def get_rule_matched_accounts_count(self, rule_id):
        ^
app/services/account_classification_service.py: note: In member "_evaluate_postgresql_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:855:76: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...ostgresql_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: In member "_evaluate_oracle_rule" of class "AccountClassificationService":
app/services/account_classification_service.py:895:72: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...te_oracle_rule(self, account: Account, rule_expression: dict) -> bool:
                                                               ^
app/services/account_classification_service.py: note: At top level:
app/services/account_classification_service.py:964:34: error: Call to untyped
function "AccountClassificationService" in typed context  [no-untyped-call]
    account_classification_service = AccountClassificationService()
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/database_types.py:7:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import login_required
    ^
app/routes/database_types.py: note: In function "index":
app/routes/database_types.py:16:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def index():
    ^
app/routes/database_types.py: note: In function "create":
app/routes/database_types.py:24:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def create():
    ^
app/routes/database_types.py: note: In function "edit":
app/routes/database_types.py:34:1: error: Function is missing a type annotation
 [no-untyped-def]
    def edit(type_id):
    ^
app/routes/database_types.py: note: In function "delete":
app/routes/database_types.py:44:1: error: Function is missing a type annotation
 [no-untyped-def]
    def delete(type_id):
    ^
app/routes/database_types.py: note: In function "toggle_status":
app/routes/database_types.py:54:1: error: Function is missing a type annotation
 [no-untyped-def]
    def toggle_status(type_id):
    ^
app/routes/database_types.py: note: In function "api_list":
app/routes/database_types.py:61:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_list():
    ^
app/routes/database_types.py: note: In function "api_active":
app/routes/database_types.py:69:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_active():
    ^
app/routes/database_types.py: note: In function "api_form_options":
app/routes/database_types.py:77:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_form_options():
    ^
app/routes/database_types.py: note: In function "init_defaults":
app/routes/database_types.py:85:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def init_defaults():
    ^
app/routes/dashboard.py:10:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/dashboard.py: note: In function "index":
app/routes/dashboard.py:38:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def index():
    ^
app/routes/dashboard.py:48:18: error: Call to untyped function "get_chart_data"
in typed context  [no-untyped-call]
        chart_data = get_chart_data()
                     ^~~~~~~~~~~~~~~~
app/routes/dashboard.py:51:21: error: Call to untyped function
"get_system_status" in typed context  [no-untyped-call]
        system_status = get_system_status()
                        ^~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_overview":
app/routes/dashboard.py:84:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_overview():
    ^
app/routes/dashboard.py: note: In function "api_charts":
app/routes/dashboard.py:108:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_charts():
    ^
app/routes/dashboard.py:115:14: error: Call to untyped function
"get_chart_data" in typed context  [no-untyped-call]
        charts = get_chart_data(chart_type)
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "api_activities":
app/routes/dashboard.py:133:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_activities():
    ^
app/routes/dashboard.py: note: In function "api_status":
app/routes/dashboard.py:140:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_status():
    ^
app/routes/dashboard.py:146:14: error: Call to untyped function
"get_system_status" in typed context  [no-untyped-call]
        status = get_system_status()
                 ^~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "get_system_overview":
app/routes/dashboard.py:163:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_system_overview():
    ^
app/routes/dashboard.py: note: In function "get_chart_data":
app/routes/dashboard.py:212:1: error: Function is missing a type annotation 
[no-untyped-def]
    def get_chart_data(chart_type="all"):
    ^
app/routes/dashboard.py:219:35: error: Call to untyped function
"get_log_trend_data" in typed context  [no-untyped-call]
                charts["log_trend"] = get_log_trend_data()
                                      ^~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py:222:36: error: Call to untyped function
"get_log_level_distribution" in typed context  [no-untyped-call]
                charts["log_levels"] = get_log_level_distribution()
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py:226:40: error: Call to untyped function
"get_instance_type_distribution" in typed context  [no-untyped-call]
                charts["instance_types"] = get_instance_type_distribution(...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py:230:37: error: Call to untyped function
"get_task_status_distribution" in typed context  [no-untyped-call]
                charts["task_status"] = get_task_status_distribution()
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py:234:36: error: Call to untyped function
"get_sync_trend_data" in typed context  [no-untyped-call]
                charts["sync_trend"] = get_sync_trend_data()
                                       ^~~~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "get_log_trend_data":
app/routes/dashboard.py:242:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_log_trend_data():
    ^
app/routes/dashboard.py: note: In function "get_log_level_distribution":
app/routes/dashboard.py:276:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_log_level_distribution():
    ^
app/routes/dashboard.py: note: In function "get_instance_type_distribution":
app/routes/dashboard.py:292:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_instance_type_distribution():
    ^
app/routes/dashboard.py: note: In function "get_task_status_distribution":
app/routes/dashboard.py:307:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_task_status_distribution():
    ^
app/routes/dashboard.py: note: In function "get_sync_trend_data":
app/routes/dashboard.py:320:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_sync_trend_data():
    ^
app/routes/dashboard.py: note: In function "get_system_status":
app/routes/dashboard.py:339:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_system_status():
    ^
app/routes/dashboard.py:390:23: error: Call to untyped function
"get_system_uptime" in typed context  [no-untyped-call]
                "uptime": get_system_uptime(),
                          ^~~~~~~~~~~~~~~~~~~
app/routes/dashboard.py: note: In function "get_system_uptime":
app/routes/dashboard.py:409:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_system_uptime():
    ^
app/routes/account_static.py:10:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import login_required
    ^
app/routes/account_static.py: note: In function "index":
app/routes/account_static.py:24:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def index():
    ^
app/routes/account_static.py:27:13: error: Call to untyped function
"get_account_statistics" in typed context  [no-untyped-call]
        stats = get_account_statistics()
                ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "account_statistics":
app/routes/account_static.py:54:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def account_statistics():
    ^
app/routes/account_static.py:57:17: error: Call to untyped function
"get_account_statistics" in typed context  [no-untyped-call]
            stats = get_account_statistics()
                    ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "api_statistics":
app/routes/account_static.py:70:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def api_statistics():
    ^
app/routes/account_static.py:73:17: error: Call to untyped function
"get_account_statistics" in typed context  [no-untyped-call]
            stats = get_account_statistics()
                    ^~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_static.py: note: In function "get_account_statistics":
app/routes/account_static.py:79:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def get_account_statistics():
    ^
app/routes/account_static.py:115:29: error: Need type annotation for
"environment_stats"  [var-annotated]
            environment_stats = defaultdict(lambda: {"total": 0, "active":...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/account_static.py:177:9: error: Need type annotation for
"permission_stats"  [var-annotated]
            permission_stats = defaultdict(int)
            ^~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "execute_query" of class "DatabaseConnection":
app/services/connection_factory.py:37:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py: note: In member "connect" of class "MySQLConnection":
app/services/connection_factory.py:60:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("mysql")...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py: note: In member "disconnect" of class "MySQLConnection":
app/services/connection_factory.py:81:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "MySQLConnection":
app/services/connection_factory.py:106:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:113:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: At top level:
app/services/connection_factory.py:135:1: error: Cannot find implementation or
library stub for module named "psycopg"  [import-not-found]
                import psycopg
    ^
app/services/connection_factory.py: note: In member "connect" of class "PostgreSQLConnection":
app/services/connection_factory.py:144:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("postgre...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py: note: In member "disconnect" of class "PostgreSQLConnection":
app/services/connection_factory.py:160:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "PostgreSQLConnection":
app/services/connection_factory.py:185:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:192:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "connect" of class "SQLServerConnection":
app/services/connection_factory.py:221:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("sqlserv...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py:225:31: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                self.connection = pymssql.connect(
                                  ^
app/services/connection_factory.py: note: In member "disconnect" of class "SQLServerConnection":
app/services/connection_factory.py:243:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "SQLServerConnection":
app/services/connection_factory.py:268:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:275:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "connect" of class "OracleConnection":
app/services/connection_factory.py:305:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("oracle"...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/connection_factory.py:325:35: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                    self.connection = oracledb.connect(
                                      ^
app/services/connection_factory.py:335:43: error: Incompatible types in
assignment (expression has type "Connection", variable has type "None") 
[assignment]
                            self.connection = oracledb.connect(
                                              ^
app/services/connection_factory.py: note: In member "disconnect" of class "OracleConnection":
app/services/connection_factory.py:356:13: error: Statement is unreachable 
[unreachable]
                try:
                ^
app/services/connection_factory.py: note: In member "execute_query" of class "OracleConnection":
app/services/connection_factory.py:381:49: error: Missing type parameters for
generic type "tuple"  [type-arg]
        def execute_query(self, query: str, params: tuple | None = None) -...
                                                    ^
app/services/connection_factory.py:388:18: error: "None" has no attribute
"cursor"  [attr-defined]
            cursor = self.connection.cursor()
                     ^~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "create_connection" of class "ConnectionFactory":
app/services/connection_factory.py:429:23: error: Argument 1 to "log_error" has
incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"不支持的数据库类型: {db_type}", context={"instance_id":...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py:433:16: error: Cannot instantiate abstract
class "DatabaseConnection" with abstract attributes "connect", "disconnect",
"execute_query", "get_version" and "test_connection"  [abstract]
            return connection_class(instance)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/connection_factory.py: note: In member "get_supported_types" of class "ConnectionFactory":
app/services/connection_factory.py:453:34: error: Missing type parameters for
generic type "list"  [type-arg]
        def get_supported_types() -> list:
                                     ^
app/services/account_sync_service.py:10:1: error: Cannot find implementation or
library stub for module named "psycopg"  [import-not-found]
        import psycopg
    ^
app/services/account_sync_service.py:22:16: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        oracledb = None
                   ^~~~
app/services/account_sync_service.py: note: In member "__init__" of class "AccountSyncService":
app/services/account_sync_service.py:36:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/account_sync_service.py:36:5: note: Use "-> None" if function does not return a value
app/services/account_sync_service.py: note: In member "sync_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:107:31: error: Call to untyped function
"SyncData" in typed context  [no-untyped-call]
                    sync_record = SyncData(
                                  ^
app/services/account_sync_service.py:153:31: error: Call to untyped function
"SyncData" in typed context  [no-untyped-call]
                    sync_record = SyncData(
                                  ^
app/services/account_sync_service.py: note: In member "_get_connection" of class "AccountSyncService":
app/services/account_sync_service.py:180:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _get_connection(self, instance: Instance):
        ^
app/services/account_sync_service.py: note: In member "_get_sqlserver_pyodbc_connection" of class "AccountSyncService":
app/services/account_sync_service.py:202:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _get_sqlserver_pyodbc_connection(self, instance: Instance):
        ^
app/services/account_sync_service.py: note: In member "_get_sqlserver_pymssql_connection" of class "AccountSyncService":
app/services/account_sync_service.py:231:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _get_sqlserver_pymssql_connection(self, instance: Instance):
        ^
app/services/account_sync_service.py: note: In member "_get_account_snapshot" of class "AccountSyncService":
app/services/account_sync_service.py:246:70: error: Missing type parameters for
generic type "dict"  [type-arg]
    ...ef _get_account_snapshot(self, instance: Instance) -> dict[str, dict]:
                                                                       ^
app/services/account_sync_service.py: note: In member "_sync_mysql_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:269:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_mysql_accounts(self, instance: Instance, conn) -> dict[s...
        ^
app/services/account_sync_service.py:467:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_sync_postgresql_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:470:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_postgresql_accounts(self, instance: Instance, conn) -> d...
        ^
app/services/account_sync_service.py: note: In member "_get_postgresql_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:630:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_postgresql_account_permissions(self, instance: Instance, ...
        ^
app/services/account_sync_service.py:634:23: error: Need type annotation for
"permissions"  [var-annotated]
            permissions = {
                          ^
app/services/account_sync_service.py:782:43: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["is_superuser"] = is_superuser
                                              ^~~~~~~~~~~~
app/services/account_sync_service.py:783:40: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["can_grant"] = can_grant
                                           ^~~~~~~~~
app/services/account_sync_service.py:790:43: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["is_superuser"] = False
                                              ^~~~~
app/services/account_sync_service.py:791:40: error: Incompatible types in
assignment (expression has type "bool", target has type "list[Any]") 
[assignment]
                permissions["can_grant"] = False
                                           ^~~~~
app/services/account_sync_service.py: note: In member "_sync_sqlserver_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:797:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_sqlserver_accounts(self, instance: Instance, conn) -> di...
        ^
app/services/account_sync_service.py:944:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_sync_oracle_accounts" of class "AccountSyncService":
app/services/account_sync_service.py:947:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_oracle_accounts(self, instance: Instance, conn) -> dict[...
        ^
app/services/account_sync_service.py:1087:13: error: Dict entry 4 has
incompatible type "str": "list[dict[str, Any]]"; expected "str": "int" 
[dict-item]
                "removed_accounts": removed_accounts,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_mysql_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1090:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_mysql_account_permissions(self, conn, username: str, host...
        ^
app/services/account_sync_service.py:1174:13: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_sqlserver_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1207:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_sqlserver_account_permissions(self, conn, username: str) ...
        ^
app/services/account_sync_service.py:1298:17: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                    db_permissions = {}
                    ^~~~~~~~~~~~~~
app/services/account_sync_service.py: note: In member "_get_oracle_account_permissions" of class "AccountSyncService":
app/services/account_sync_service.py:1386:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_oracle_account_permissions(self, conn, username: str) -> ...
        ^
app/services/account_sync_service.py:1401:27: error: Need type annotation for
"permissions"  [var-annotated]
                permissions = {
                              ^
app/services/account_sync_service.py: note: At top level:
app/services/account_sync_service.py:1495:24: error: Call to untyped function
"AccountSyncService" in typed context  [no-untyped-call]
    account_sync_service = AccountSyncService()
                           ^~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py:8:1: error: Skipping analyzing
"flask_login": module is installed, but missing library stubs or py.typed marker
 [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_classification.py: note: In function "index":
app/routes/account_classification.py:25:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def index():
    ^
app/routes/account_classification.py: note: In function "rules":
app/routes/account_classification.py:33:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def rules():
    ^
app/routes/account_classification.py: note: In function "get_classifications":
app/routes/account_classification.py:41:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def get_classifications():
    ^
app/routes/account_classification.py: note: In function "create_classification":
app/routes/account_classification.py:85:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def create_classification():
    ^
app/routes/account_classification.py: note: In function "get_classification":
app/routes/account_classification.py:126:1: error: Function is missing a type
annotation  [no-untyped-def]
    def get_classification(classification_id):
    ^
app/routes/account_classification.py: note: In function "update_classification":
app/routes/account_classification.py:156:1: error: Function is missing a type
annotation  [no-untyped-def]
    def update_classification(classification_id):
    ^
app/routes/account_classification.py: note: In function "delete_classification":
app/routes/account_classification.py:181:1: error: Function is missing a type
annotation  [no-untyped-def]
    def delete_classification(classification_id):
    ^
app/routes/account_classification.py: note: In function "get_rules":
app/routes/account_classification.py:204:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def get_rules():
    ^
app/routes/account_classification.py: note: In function "list_rules":
app/routes/account_classification.py:246:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def list_rules():
    ^
app/routes/account_classification.py:253:19: error: Call to untyped function
"AccountClassificationService" in typed context  [no-untyped-call]
            service = AccountClassificationService()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py:256:29: error: Call to untyped function
"get_rule_matched_accounts_count" in typed context  [no-untyped-call]
                matched_count = service.get_rule_matched_accounts_count(ru...
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/account_classification.py:273:9: error: Need type annotation for
"rules_by_db_type" (hint: "rules_by_db_type: dict[<type>, <type>] = ...") 
[var-annotated]
            rules_by_db_type = {}
            ^~~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "create_rule":
app/routes/account_classification.py:290:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def create_rule():
    ^
app/routes/account_classification.py: note: In function "get_rule":
app/routes/account_classification.py:320:1: error: Function is missing a type
annotation  [no-untyped-def]
    def get_rule(rule_id):
    ^
app/routes/account_classification.py: note: In function "update_rule":
app/routes/account_classification.py:353:1: error: Function is missing a type
annotation  [no-untyped-def]
    def update_rule(rule_id):
    ^
app/routes/account_classification.py: note: In function "get_matched_accounts":
app/routes/account_classification.py:380:1: error: Function is missing a type
annotation  [no-untyped-def]
    def get_matched_accounts(rule_id):
    ^
app/routes/account_classification.py:390:34: error: Call to untyped function
"AccountClassificationService" in typed context  [no-untyped-call]
            classification_service = AccountClassificationService()
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "delete_rule":
app/routes/account_classification.py:454:1: error: Function is missing a type
annotation  [no-untyped-def]
    def delete_rule(rule_id):
    ^
app/routes/account_classification.py: note: In function "assign_classification":
app/routes/account_classification.py:473:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def assign_classification():
    ^
app/routes/account_classification.py:478:19: error: Call to untyped function
"AccountClassificationService" in typed context  [no-untyped-call]
            service = AccountClassificationService()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "auto_classify":
app/routes/account_classification.py:491:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def auto_classify():
    ^
app/routes/account_classification.py:497:19: error: Call to untyped function
"AccountClassificationService" in typed context  [no-untyped-call]
            service = AccountClassificationService()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py: note: In function "get_assignments":
app/routes/account_classification.py:511:1: error: Function is missing a return
type annotation  [no-untyped-def]
    def get_assignments():
    ^
app/routes/account_classification.py: note: In function "remove_assignment":
app/routes/account_classification.py:546:1: error: Function is missing a type
annotation  [no-untyped-def]
    def remove_assignment(assignment_id):
    ^
app/routes/account_classification.py: note: In function "get_permissions":
app/routes/account_classification.py:564:1: error: Function is missing a type
annotation  [no-untyped-def]
    def get_permissions(db_type):
    ^
app/routes/account_classification.py: note: In function "_get_db_permissions":
app/routes/account_classification.py:575:42: error: Missing type parameters for
generic type "dict"  [type-arg]
    def _get_db_permissions(db_type: str) -> dict:
                                             ^
app/routes/account_classification.py:580:19: error: Call to untyped function
"get_permissions_by_db_type" of "PermissionConfig" in typed context 
[no-untyped-call]
        permissions = PermissionConfig.get_permissions_by_db_type(db_type)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/account_classification.py:582:5: error: Returning Any from function
declared to return "dict[Any, Any]"  [no-any-return]
        return permissions
        ^~~~~~~~~~~~~~~~~~
app/tasks.py: note: In function "cleanup_old_logs":
app/tasks.py:18:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def cleanup_old_logs():
    ^
app/tasks.py:22:11: error: Call to untyped function "create_app" in typed
context  [no-untyped-call]
        app = create_app()
              ^~~~~~~~~~~~
app/tasks.py:30:29: error: Call to untyped function "_cleanup_temp_files" in
typed context  [no-untyped-call]
                cleaned_files = _cleanup_temp_files()
                                ^~~~~~~~~~~~~~~~~~~~~
app/tasks.py: note: In function "_cleanup_temp_files":
app/tasks.py:65:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def _cleanup_temp_files():
    ^
app/tasks.py: note: In function "sync_accounts":
app/tasks.py:92:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def sync_accounts():
    ^
app/tasks.py:99:11: error: Call to untyped function "create_app" in typed
context  [no-untyped-call]
        app = create_app()
              ^~~~~~~~~~~~
app/tasks.py:206:27: error: Call to untyped function "SyncData" in typed
context  [no-untyped-call]
                sync_record = SyncData(
                              ^
app/tasks.py:238:27: error: Call to untyped function "SyncData" in typed
context  [no-untyped-call]
                sync_record = SyncData(
                              ^
app/tasks.py: note: In function "health_check":
app/tasks.py:253:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def health_check():
    ^
app/tasks.py:255:11: error: Call to untyped function "create_app" in typed
context  [no-untyped-call]
        app = create_app()
              ^~~~~~~~~~~~
app/tasks.py: note: In function "cleanup_temp_files":
app/tasks.py:283:1: error: Function is missing a return type annotation 
[no-untyped-def]
    def cleanup_temp_files():
    ^
app/tasks.py:285:11: error: Call to untyped function "create_app" in typed
context  [no-untyped-call]
        app = create_app()
              ^~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "_get_connection" of class "PermissionQuery":
app/services/permission_query_factory.py:40:5: error: Function is missing a
return type annotation  [no-untyped-def]
        def _get_connection(self):
        ^
app/services/permission_query_factory.py:43:31: error: Incompatible types in
assignment (expression has type "DatabaseConnection | None", variable has type
"None")  [assignment]
                self.connection = ConnectionFactory.create_connection(self...
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/permission_query_factory.py: note: In member "get_account_permissions" of class "MySQLPermissionQuery":
app/services/permission_query_factory.py:53:26: error: Call to untyped function
"_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_global_permissions" of class "MySQLPermissionQuery":
app/services/permission_query_factory.py:80:26: error: Call to untyped function
"_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_database_permissions" of class "MySQLPermissionQuery":
app/services/permission_query_factory.py:110:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "MySQLPermissionQuery":
app/services/permission_query_factory.py:141:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_account_permissions" of class "PostgreSQLPermissionQuery":
app/services/permission_query_factory.py:176:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_global_permissions" of class "PostgreSQLPermissionQuery":
app/services/permission_query_factory.py:213:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_database_permissions" of class "PostgreSQLPermissionQuery":
app/services/permission_query_factory.py:274:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "PostgreSQLPermissionQuery":
app/services/permission_query_factory.py:314:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_account_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:367:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:376:13: error: Need type annotation
for "database_roles" (hint: "database_roles: dict[<type>, <type>] = ...") 
[var-annotated]
                database_roles = {}
                ^~~~~~~~~~~~~~
app/services/permission_query_factory.py:378:13: error: Need type annotation
for "database_privileges" (hint:
"database_privileges: dict[<type>, <type>] = ...")  [var-annotated]
                database_privileges = {}
                ^~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_global_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:431:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_database_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:462:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:471:13: error: Need type annotation
for "db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "SQLServerPermissionQuery":
app/services/permission_query_factory.py:514:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:534:13: error: Need type annotation
for "table_permissions" (hint: "table_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                table_permissions = {}
                ^~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_account_permissions" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:561:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_global_permissions" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:612:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_database_permissions" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:665:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:693:46: error: Call to untyped
function "_format_bytes" in typed context  [no-untyped-call]
                            f"{tablespace_name}: {self._format_bytes(curre...
                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/permission_query_factory.py:696:55: error: Call to untyped
function "_format_bytes" in typed context  [no-untyped-call]
    ...               quota_info = f"{tablespace_name}: {self._format_bytes(c...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/services/permission_query_factory.py: note: In member "_format_bytes" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:709:5: error: Function is missing a
type annotation  [no-untyped-def]
        def _format_bytes(self, bytes_value):
        ^
app/services/permission_query_factory.py: note: In member "get_table_permissions" of class "OraclePermissionQuery":
app/services/permission_query_factory.py:723:26: error: Call to untyped
function "_get_connection" in typed context  [no-untyped-call]
                connection = self._get_connection()
                             ^~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:742:13: error: Need type annotation
for "table_permissions" (hint: "table_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                table_permissions = {}
                ^~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "create_query" of class "PermissionQueryFactory":
app/services/permission_query_factory.py:788:23: error: Argument 1 to
"log_error" has incompatible type "str"; expected "Exception"  [arg-type]
                log_error(f"不支持的数据库类型: {db_type}", context={"instance_id":...
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py:792:16: error: Cannot instantiate
abstract class "PermissionQuery" with abstract attributes
"get_account_permissions", "get_database_permissions", "get_global_permissions"
and "get_table_permissions"  [abstract]
            return query_class(instance)
                   ^~~~~~~~~~~~~~~~~~~~~
app/services/permission_query_factory.py: note: In member "get_supported_types" of class "PermissionQueryFactory":
app/services/permission_query_factory.py:813:34: error: Missing type parameters
for generic type "list"  [type-arg]
        def get_supported_types() -> list:
                                     ^
app/routes/account_sync.py:10:1: error: Skipping analyzing "flask_login":
module is installed, but missing library stubs or py.typed marker 
[import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_sync.py:23:2: error: Untyped decorator makes function
"sync_records" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:247:2: error: Untyped decorator makes function
"sync_all_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:366:2: error: Untyped decorator makes function
"sync_details_batch" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py:442:2: error: Untyped decorator makes function
"sync_details" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/account_sync.py: note: In function "sync_details":
app/routes/account_sync.py:469:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("account_sync.sync_records"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "__init__" of class "DatabaseService":
app/services/database_service.py:21:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/database_service.py:21:5: note: Use "-> None" if function does not return a value
app/services/database_service.py: note: In member "sync_accounts" of class "DatabaseService":
app/services/database_service.py:153:27: error: Call to untyped function
"SyncData" in typed context  [no-untyped-call]
                sync_record = SyncData(
                              ^
app/services/database_service.py:195:27: error: Call to untyped function
"SyncData" in typed context  [no-untyped-call]
                sync_record = SyncData(
                              ^
app/services/database_service.py: note: In member "_sync_mysql_accounts" of class "DatabaseService":
app/services/database_service.py:218:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_mysql_accounts(self, instance: Instance, conn) -> dict[s...
        ^
app/services/database_service.py: note: In member "_sync_postgresql_accounts" of class "DatabaseService":
app/services/database_service.py:355:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_postgresql_accounts(self, instance: Instance, conn) -> d...
        ^
app/services/database_service.py: note: In function "_sync_postgresql_accounts":
app/services/database_service.py:358:9: error: Function is missing a type
annotation  [no-untyped-def]
            def is_password_expired(valid_until):
            ^
app/services/database_service.py: note: In member "_sync_postgresql_accounts" of class "DatabaseService":
app/services/database_service.py:430:32: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
                password_expired = is_password_expired(valid_until)
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py:442:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("postgre...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:469:35: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        database_name=DatabaseTypeUtils.get_database_type_...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:473:38: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
                        password_expired=is_password_expired(valid_until),
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py:476:49: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
                        is_active=can_login and not is_password_expired(va...
                                                    ^~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:485:53: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
    ...                 or existing.password_expired != is_password_expired(v...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:487:65: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
    ...     or existing.is_active != (can_login and not is_password_expired(v...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:493:49: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
                        existing.password_expired = is_password_expired(va...
                                                    ^~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:495:60: error: Call to untyped function
"is_password_expired" in typed context  [no-untyped-call]
    ...          existing.is_active = can_login and not is_password_expired(v...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py: note: In member "_sync_sqlserver_accounts" of class "DatabaseService":
app/services/database_service.py:545:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_sqlserver_accounts(self, instance: Instance, conn) -> di...
        ^
app/services/database_service.py:583:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("sqlserv...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:607:24: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        or DatabaseTypeUtils.get_database_type_config("sql...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py: note: In member "_sync_oracle_accounts" of class "DatabaseService":
app/services/database_service.py:687:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _sync_oracle_accounts(self, instance: Instance, conn) -> dict[...
        ^
app/services/database_service.py:735:20: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                    or DatabaseTypeUtils.get_database_type_config("oracle"...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py:762:24: error: Item "None" of
"DatabaseTypeConfig | None" has no attribute "default_schema"  [union-attr]
                        or DatabaseTypeUtils.get_database_type_config("ora...
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/database_service.py: note: In member "get_connection" of class "DatabaseService":
app/services/database_service.py:877:27: error: Argument 1 to "log_error" has
incompatible type "str"; expected "Exception"  [arg-type]
                    log_error(f"不支持的数据库类型: {instance.db_type}")
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py:884:27: error: Argument 1 to "log_error" has
incompatible type "str"; expected "Exception"  [arg-type]
                    log_error(f"无法建立{instance.db_type}连接")
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py:889:17: error: Statement is unreachable 
[unreachable]
                    self.connections[instance.id] = conn
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "get_database_version" of class "DatabaseService":
app/services/database_service.py:905:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def get_database_version(self, instance: Instance, conn) -> str | ...
        ^
app/services/database_service.py: note: In member "_test_connection_validity" of class "DatabaseService":
app/services/database_service.py:930:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _test_connection_validity(self, conn, db_type: str) -> bool:
        ^
app/services/database_service.py: note: In member "close_connection" of class "DatabaseService":
app/services/database_service.py:943:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def close_connection(self, instance: Instance):
        ^
app/services/database_service.py: note: In member "close_all_connections" of class "DatabaseService":
app/services/database_service.py:971:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def close_all_connections(self):
        ^
app/services/database_service.py:971:5: note: Use "-> None" if function does not return a value
app/services/database_service.py: note: In member "get_connection_count" of class "DatabaseService":
app/services/database_service.py:987:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def get_connection_count(self):
        ^
app/services/database_service.py: note: In member "cleanup_stale_connections" of class "DatabaseService":
app/services/database_service.py:996:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def cleanup_stale_connections(self):
        ^
app/services/database_service.py:996:5: note: Use "-> None" if function does not return a value
app/services/database_service.py: note: In member "execute_query" of class "DatabaseService":
app/services/database_service.py:1051:69: error: Missing type parameters for
generic type "tuple"  [type-arg]
    ...ry(self, instance: Instance, query: str, params: tuple = None) -> dict...
                                                        ^
app/services/database_service.py:1051:77: error: Incompatible default for
argument "params" (default has type "None", argument has type "tuple[Any, ...]")
 [assignment]
    ... instance: Instance, query: str, params: tuple = None) -> dict[str, An...
                                                        ^~~~
app/services/database_service.py:1051:77: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/services/database_service.py:1051:77: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/services/database_service.py: note: In member "_get_mysql_permissions" of class "DatabaseService":
app/services/database_service.py:1255:17: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                    db_permissions = {}
                    ^~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_postgresql_permissions" of class "DatabaseService":
app/services/database_service.py:1313:28: error: Call to untyped function
"AccountSyncService" in typed context  [no-untyped-call]
                sync_service = AccountSyncService()
                               ^~~~~~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_sqlserver_permissions" of class "DatabaseService":
app/services/database_service.py:1423:13: error: Need type annotation for
"db_permissions" (hint: "db_permissions: dict[<type>, <type>] = ...") 
[var-annotated]
                db_permissions = {}
                ^~~~~~~~~~~~~~
app/services/database_service.py:1450:13: error: Need type annotation for
"database_roles" (hint: "database_roles: dict[<type>, <type>] = ...") 
[var-annotated]
                database_roles = {}
                ^~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_oracle_permissions" of class "DatabaseService":
app/services/database_service.py:1512:28: error: Call to untyped function
"AccountSyncService" in typed context  [no-untyped-call]
                sync_service = AccountSyncService()
                               ^~~~~~~~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_mysql_version" of class "DatabaseService":
app/services/database_service.py:1549:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_mysql_version(self, conn) -> str | None:
        ^
app/services/database_service.py:1556:13: error: Returning Any from function
declared to return "str | None"  [no-any-return]
                return version
                ^~~~~~~~~~~~~~
app/services/database_service.py: note: In member "_get_postgresql_version" of class "DatabaseService":
app/services/database_service.py:1561:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_postgresql_version(self, conn) -> str | None:
        ^
app/services/database_service.py: note: In member "_get_sqlserver_version" of class "DatabaseService":
app/services/database_service.py:1577:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_sqlserver_version(self, conn) -> str | None:
        ^
app/services/database_service.py: note: In member "_get_oracle_version" of class "DatabaseService":
app/services/database_service.py:1593:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_oracle_version(self, conn) -> str | None:
        ^
app/routes/instances.py:9:1: error: Skipping analyzing "flask_login": module is
installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/instances.py:29:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:30:2: error: Untyped decorator makes function "index"
untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "index":
app/routes/instances.py:69:16: error: Incompatible return value type (got
"Response", expected "str")  [return-value]
            return jsonify(
                   ^
app/routes/instances.py: note: At top level:
app/routes/instances.py:97:2: error: Untyped decorator makes function "create"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:98:2: error: Untyped decorator makes function "create"
untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "create":
app/routes/instances.py:120:42: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            db_type_error = validate_db_type(data.get("db_type"))
                                             ^~~~~~~~~~~~~~~~~~~
app/routes/instances.py:138:24: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                port = int(data.get("port"))
                           ^~~~~~~~~~~~~~~~
app/routes/instances.py:152:37: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id = int(data.get("credential_id"))
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:175:24: error: Call to untyped function "Instance" in
typed context  [no-untyped-call]
                instance = Instance(
                           ^
app/routes/instances.py:176:22: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    name=data.get("name").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:178:22: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    host=data.get("host").strip(),
                         ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:179:26: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    port=int(data.get("port")),
                             ^~~~~~~~~~~~~~~~
app/routes/instances.py:181:36: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id=(int(data.get("credential_id")) if data....
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:206:75: error: Call to untyped function "to_dict" in
typed context  [no-untyped-call]
    ...       jsonify({"message": "实例创建成功", "instance": instance.to_dict()}),
                                                                    ^~~~~~~~~
app/routes/instances.py:211:20: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
                return redirect(url_for("instances.index"))
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:252:2: error: Untyped decorator makes function
"test_instance_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:253:2: error: Untyped decorator makes function
"test_instance_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "test_instance_connection":
app/routes/instances.py:259:38: error: If x = b'abc' then f"{x}" or
"{}".format(x) produces "b'abc'", not "abc". If this is desired behavior, use
f"{x!r}" or "{!r}".format(x). Otherwise, decode the bytes  [str-bytes-safe]
            logging.info(f"请求数据: {request.get_data()}")
                                         ^~~~~~~~~~~~~~
app/routes/instances.py:321:25: error: Call to untyped function "Instance" in
typed context  [no-untyped-call]
            temp_instance = Instance(
                            ^
app/routes/instances.py:350:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:361:2: error: Untyped decorator makes function "detail"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:362:2: error: Untyped decorator makes function "detail"
untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:374:2: error: Untyped decorator makes function
"statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:375:2: error: Untyped decorator makes function
"statistics" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:387:2: error: Untyped decorator makes function
"api_statistics" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:388:2: error: Untyped decorator makes function
"api_statistics" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:396:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:397:2: error: Untyped decorator makes function "edit"
untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "edit":
app/routes/instances.py:418:42: error: Argument 1 to "validate_db_type" has
incompatible type "Any | str | None"; expected "str"  [arg-type]
            db_type_error = validate_db_type(data.get("db_type"))
                                             ^~~~~~~~~~~~~~~~~~~
app/routes/instances.py:436:24: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                port = int(data.get("port"))
                           ^~~~~~~~~~~~~~~~
app/routes/instances.py:450:37: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                    credential_id = int(data.get("credential_id"))
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:481:42: error: Argument 1 to "int" has incompatible
type "Any | str | None"; expected
"str | Buffer | SupportsInt | SupportsIndex | SupportsTrunc"  [arg-type]
                instance.credential_id = int(data.get("credential_id")) if...
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:484:40: error: Item "None" of "Any | str | None" has no
attribute "strip"  [union-attr]
                    instance.description = data.get("description").strip()
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:520:20: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
                return redirect(url_for("instances.detail", instance_id=in...
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/routes/instances.py: note: At top level:
app/routes/instances.py:564:2: error: Untyped decorator makes function "delete"
untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:565:2: error: Untyped decorator makes function "delete"
untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "delete":
app/routes/instances.py:615:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("instances.index"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:625:16: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
            return redirect(url_for("instances.index"))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:629:2: error: Untyped decorator makes function
"batch_delete" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:630:2: error: Untyped decorator makes function
"batch_delete" untyped  [misc]
    @delete_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py:712:2: error: Untyped decorator makes function
"batch_create" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:713:2: error: Untyped decorator makes function
"batch_create" untyped  [misc]
    @create_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "batch_create":
app/routes/instances.py:720:25: error: Item "None" of "str | None" has no
attribute "endswith"  [union-attr]
                if file and file.filename.endswith(".csv"):
                            ^~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:721:24: error: Incompatible return value type (got
"dict[str, Any] | Response | tuple[Response, int]", expected
"str | Response | tuple[Response, int]")  [return-value]
                    return _process_csv_file(file)
                           ^~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py:731:16: error: Incompatible return value type (got
"dict[str, Any] | Response | tuple[Response, int]", expected
"str | Response | tuple[Response, int]")  [return-value]
            return _process_instances_data(instances_data)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "_process_instances_data":
app/routes/instances.py:809:24: error: Call to untyped function "Instance" in
typed context  [no-untyped-call]
                instance = Instance(
                           ^
app/routes/instances.py: note: At top level:
app/routes/instances.py:862:2: error: Untyped decorator makes function
"export_instances" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:863:2: error: Untyped decorator makes function
"export_instances" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:958:2: error: Untyped decorator makes function
"download_template" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:959:2: error: Untyped decorator makes function
"download_template" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1035:2: error: Untyped decorator makes function
"test_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1036:2: error: Untyped decorator makes function
"test_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "test_connection":
app/routes/instances.py:1043:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/instances.py:1069:12: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
        return redirect(url_for("instances.detail", instance_id=instance_i...
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1073:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1074:2: error: Untyped decorator makes function
"sync_accounts" untyped  [misc]
    @update_required
     ^~~~~~~~~~~~~~~
app/routes/instances.py: note: In function "sync_accounts":
app/routes/instances.py:1093:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/instances.py:1159:12: error: Incompatible return value type (got
"werkzeug.wrappers.response.Response", expected
"str | flask.wrappers.Response | tuple[flask.wrappers.Response, int]") 
[return-value]
        return redirect(url_for("instances.detail", instance_id=instance_i...
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1164:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1165:2: error: Untyped decorator makes function
"api_list" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1173:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1174:2: error: Untyped decorator makes function
"api_detail" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py:1182:2: error: Untyped decorator makes function
"api_test_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1183:2: error: Untyped decorator makes function
"api_test_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "api_test_connection":
app/routes/instances.py:1189:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1197:2: error: Untyped decorator makes function
"api_test_instance_connection" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1198:2: error: Untyped decorator makes function
"api_test_instance_connection" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "api_test_instance_connection":
app/routes/instances.py:1206:38: error: If x = b'abc' then f"{x}" or
"{}".format(x) produces "b'abc'", not "abc". If this is desired behavior, use
f"{x!r}" or "{!r}".format(x). Otherwise, decode the bytes  [str-bytes-safe]
            logging.info(f"请求数据: {request.get_data()}")
                                         ^~~~~~~~~~~~~~
app/routes/instances.py:1266:25: error: Call to untyped function "Instance" in
typed context  [no-untyped-call]
            temp_instance = Instance(
                            ^
app/routes/instances.py:1293:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/instances.py: note: At top level:
app/routes/instances.py:1392:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @login_required
     ^~~~~~~~~~~~~~
app/routes/instances.py:1393:2: error: Untyped decorator makes function
"get_account_permissions" untyped  [misc]
    @view_required
     ^~~~~~~~~~~~~
app/routes/instances.py: note: In function "get_account_permissions":
app/routes/instances.py:1402:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/account_list.py:8:1: error: Skipping analyzing "flask_login": module
is installed, but missing library stubs or py.typed marker  [import-untyped]
    from flask_login import current_user, login_required
    ^
app/routes/account_list.py: note: In function "list_accounts":
app/routes/account_list.py:26:1: error: Function is missing a type annotation 
[no-untyped-def]
    def list_accounts(db_type=None):
    ^
app/routes/account_list.py:103:5: error: Need type annotation for
"classifications" (hint: "classifications: dict[<type>, <type>] = ...") 
[var-annotated]
        classifications = {}
        ^~~~~~~~~~~~~~~
app/routes/account_list.py: note: In function "export_accounts":
app/routes/account_list.py:160:1: error: Function is missing a return type
annotation  [no-untyped-def]
    def export_accounts():
    ^
app/routes/account_list.py:209:5: error: Need type annotation for
"classifications" (hint: "classifications: dict[<type>, <type>] = ...") 
[var-annotated]
        classifications = {}
        ^~~~~~~~~~~~~~~
app/routes/account_list.py: note: In function "sync_accounts":
app/routes/account_list.py:293:1: error: Function is missing a type annotation 
[no-untyped-def]
    def sync_accounts(instance_id):
    ^
app/routes/account_list.py:299:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/routes/account_list.py:304:27: error: Call to untyped function "SyncData"
in typed context  [no-untyped-call]
                sync_record = SyncData(
                              ^
app/routes/account_list.py:325:23: error: Call to untyped function "SyncData"
in typed context  [no-untyped-call]
            sync_record = SyncData(
                          ^
app/routes/account_list.py:355:23: error: Call to untyped function "SyncData"
in typed context  [no-untyped-call]
            sync_record = SyncData(
                          ^
app/routes/account_list.py: note: In function "get_account_permissions":
app/routes/account_list.py:379:1: error: Function is missing a type annotation 
[no-untyped-def]
    def get_account_permissions(account_id):
    ^
app/routes/account_list.py: note: In function "api_sync_accounts":
app/routes/account_list.py:412:1: error: Function is missing a type annotation 
[no-untyped-def]
    def api_sync_accounts(instance_id):
    ^
app/routes/account_list.py:418:22: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            db_service = DatabaseService()
                         ^~~~~~~~~~~~~~~~~
app/utils/validation.py: note: In member "sanitize_html" of class "InputValidator":
app/utils/validation.py:267:9: error: Need type annotation for
"allowed_attributes" (hint: "allowed_attributes: dict[<type>, <type>] = ...") 
[var-annotated]
            allowed_attributes = {}
            ^~~~~~~~~~~~~~~~~~
app/utils/validation.py:272:9: error: Returning Any from function declared to
return "str"  [no-any-return]
            return cleaned
            ^~~~~~~~~~~~~~
app/utils/validation.py: note: In member "validate_json" of class "InputValidator":
app/utils/validation.py:315:40: error: Missing type parameters for generic type
"dict"  [type-arg]
        def validate_json(json_data: str | dict) -> dict | None:
                                           ^
app/utils/validation.py:332:17: error: Returning Any from function declared to
return "dict[Any, Any] | None"  [no-any-return]
                    return json.loads(json_data)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/validation.py:336:9: error: Statement is unreachable  [unreachable]
            return None
            ^~~~~~~~~~~
app/utils/validation.py: note: In member "validate_request_data" of class "InputValidator":
app/utils/validation.py:373:48: error: Item "None" of "Any | None" has no
attribute "get"  [union-attr]
                value = request.form.get(field) or request.json.get(field)...
                                                   ^~~~~~~~~~~~~~~~
app/utils/validation.py:383:48: error: Item "None" of "Any | None" has no
attribute "get"  [union-attr]
                        request.form.get(field) or request.json.get(field)...
                                                   ^~~~~~~~~~~~~~~~
app/utils/validation.py: note: In function "validate_instance_data":
app/utils/validation.py:414:47: error: Argument 1 to "validate_db_type" of
"InputValidator" has incompatible type "Any | None"; expected "str"  [arg-type]
        db_type = InputValidator.validate_db_type(data.get("db_type"))
                                                  ^~~~~~~~~~~~~~~~~~~
app/utils/validation.py:438:25: error: Incompatible types in assignment
(expression has type "int", target has type "str")  [assignment]
        validated["port"] = port
                            ^~~~
app/utils/validation.py:459:30: error: Incompatible types in assignment
(expression has type "bool", target has type "str")  [assignment]
        validated["is_active"] = is_active if is_active is not None else T...
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/validation.py: note: In function "validate_credential_data":
app/utils/validation.py:509:30: error: Incompatible types in assignment
(expression has type "bool", target has type "str")  [assignment]
        validated["is_active"] = is_active if is_active is not None else T...
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/utils/db_context.py: note: In member "__init__" of class "DatabaseContextManager":
app/utils/db_context.py:19:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/utils/db_context.py:19:5: note: Use "-> None" if function does not return a value
app/utils/db_context.py:20:27: error: Call to untyped function
"DatabaseService" in typed context  [no-untyped-call]
            self.db_service = DatabaseService()
                              ^~~~~~~~~~~~~~~~~
app/utils/db_context.py: note: In member "execute_query" of class "DatabaseContextManager":
app/utils/db_context.py:56:69: error: Missing type parameters for generic type
"tuple"  [type-arg]
    ...ry(self, instance: Instance, query: str, params: tuple = None) -> Gene...
                                                        ^
app/utils/db_context.py:56:77: error: Incompatible default for argument
"params" (default has type "None", argument has type "tuple[Any, ...]") 
[assignment]
    ... instance: Instance, query: str, params: tuple = None) -> Generator[di...
                                                        ^~~~
app/utils/db_context.py:56:77: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/db_context.py:56:77: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/db_context.py:56:96: error: Missing type parameters for generic type
"dict"  [type-arg]
    ...tance: Instance, query: str, params: tuple = None) -> Generator[dict]:
                                                                       ^
app/utils/db_context.py: note: At top level:
app/utils/db_context.py:132:14: error: Call to untyped function
"DatabaseContextManager" in typed context  [no-untyped-call]
    db_context = DatabaseContextManager()
                 ^~~~~~~~~~~~~~~~~~~~~~~~
app/utils/db_context.py: note: In function "execute_db_query":
app/utils/db_context.py:144:62: error: Missing type parameters for generic type
"tuple"  [type-arg]
    ...db_query(instance: Instance, query: str, params: tuple = None) -> Gene...
                                                        ^
app/utils/db_context.py:144:70: error: Incompatible default for argument
"params" (default has type "None", argument has type "tuple[Any, ...]") 
[assignment]
    ...(instance: Instance, query: str, params: tuple = None) -> Generator[di...
                                                        ^~~~
app/utils/db_context.py:144:70: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
app/utils/db_context.py:144:70: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
app/utils/db_context.py:144:89: error: Missing type parameters for generic type
"dict"  [type-arg]
    ...tance: Instance, query: str, params: tuple = None) -> Generator[dict]:
                                                                       ^
app/services/database_size_service.py:13:1: error: Cannot find implementation
or library stub for module named "psycopg"  [import-not-found]
        import psycopg
    ^
app/services/database_size_service.py:25:16: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        oracledb = None
                   ^~~~
app/services/database_size_service.py: note: In member "__init__" of class "DatabaseSizeService":
app/services/database_size_service.py:35:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/database_size_service.py:35:5: note: Use "-> None" if function does not return a value
app/services/database_size_service.py: note: In member "_get_connection" of class "DatabaseSizeService":
app/services/database_size_service.py:86:5: error: Function is missing a return
type annotation  [no-untyped-def]
        def _get_connection(self, instance: Instance):
        ^
app/services/database_size_service.py:121:21: error: Statement is unreachable 
[unreachable]
                        error_msg = "oracledb模块未安装，无法连接Oracle"
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/database_size_service.py: note: In member "_get_mysql_size" of class "DatabaseSizeService":
app/services/database_size_service.py:154:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_mysql_size(self, instance: Instance, conn) -> dict[str, A...
        ^
app/services/database_size_service.py: note: In member "_get_postgresql_size" of class "DatabaseSizeService":
app/services/database_size_service.py:187:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_postgresql_size(self, instance: Instance, conn) -> dict[s...
        ^
app/services/database_size_service.py: note: In member "_get_sqlserver_size" of class "DatabaseSizeService":
app/services/database_size_service.py:218:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_sqlserver_size(self, instance: Instance, conn) -> dict[st...
        ^
app/services/database_size_service.py: note: In member "_get_oracle_size" of class "DatabaseSizeService":
app/services/database_size_service.py:251:5: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _get_oracle_size(self, instance: Instance, conn) -> dict[str, ...
        ^
app/services/database_size_service.py: note: At top level:
app/services/database_size_service.py:292:25: error: Call to untyped function
"DatabaseSizeService" in typed context  [no-untyped-call]
    database_size_service = DatabaseSizeService()
                            ^~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "__init__" of class "TaskExecutor":
app/services/task_executor.py:18:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
app/services/task_executor.py:18:5: note: Use "-> None" if function does not return a value
app/services/task_executor.py: note: In member "execute_task" of class "TaskExecutor":
app/services/task_executor.py:21:5: error: Function is missing a type
annotation  [no-untyped-def]
        def execute_task(self, task_id, timeout=300):
        ^
app/services/task_executor.py:35:15: error: Call to untyped function
"create_app" in typed context  [no-untyped-call]
            app = create_app()
                  ^~~~~~~~~~~~
app/services/task_executor.py: note: In function "execute_task":
app/services/task_executor.py:59:13: error: Function is missing a return type
annotation  [no-untyped-def]
                def run_task():
                ^
app/services/task_executor.py:59:13: note: Use "-> None" if function does not return a value
app/services/task_executor.py:69:47: error: Call to untyped function
"_execute_task_for_instance" in typed context  [no-untyped-call]
                                instance_result = self._execute_task_for_i...
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~...
app/services/task_executor.py:83:29: error: "TaskExecutor" has no attribute
"_record_sync_data"  [attr-defined]
                                self._record_sync_data(task, instance, ins...
                                ^~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "execute_task" of class "TaskExecutor":
app/services/task_executor.py:120:17: error: Call to untyped function
"_update_task_status" in typed context  [no-untyped-call]
                    self._update_task_status(
                    ^
app/services/task_executor.py:127:17: error: Call to untyped function
"_record_task_execution_summary" in typed context  [no-untyped-call]
                    self._record_task_execution_summary(
                    ^
app/services/task_executor.py:134:17: error: Call to untyped function
"_update_task_status" in typed context  [no-untyped-call]
                    self._update_task_status(task, 0, 1, [{"instance_name"...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
app/services/task_executor.py:136:17: error: Call to untyped function
"_record_task_execution_summary" in typed context  [no-untyped-call]
                    self._record_task_execution_summary(
                    ^
app/services/task_executor.py: note: In member "_execute_task_for_instance" of class "TaskExecutor":
app/services/task_executor.py:145:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _execute_task_for_instance(self, task, instance):
        ^
app/services/task_executor.py:159:15: error: Call to untyped function
"create_app" in typed context  [no-untyped-call]
            app = create_app()
                  ^~~~~~~~~~~~
app/services/task_executor.py: note: In member "_record_task_execution_summary" of class "TaskExecutor":
app/services/task_executor.py:210:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _record_task_execution_summary(self, task, success_count, fail...
        ^
app/services/task_executor.py:223:15: error: Call to untyped function
"create_app" in typed context  [no-untyped-call]
            app = create_app()
                  ^~~~~~~~~~~~
app/services/task_executor.py:241:31: error: Call to untyped function
"SyncData" in typed context  [no-untyped-call]
                    sync_record = SyncData(
                                  ^
app/services/task_executor.py: note: In member "_update_task_status" of class "TaskExecutor":
app/services/task_executor.py:259:5: error: Function is missing a type
annotation  [no-untyped-def]
        def _update_task_status(self, task, success_count, failed_count, r...
        ^
app/services/task_executor.py: note: In member "execute_all_active_tasks" of class "TaskExecutor":
app/services/task_executor.py:290:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def execute_all_active_tasks(self):
        ^
app/services/task_executor.py:297:17: error: Call to untyped function
"get_active_tasks" of "Task" in typed context  [no-untyped-call]
            tasks = Task.get_active_tasks()
                    ^~~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py:310:26: error: Call to untyped function
"execute_task" in typed context  [no-untyped-call]
                    result = self.execute_task(task.id)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
app/services/task_executor.py: note: In member "create_builtin_tasks" of class "TaskExecutor":
app/services/task_executor.py:329:5: error: Function is missing a return type
annotation  [no-untyped-def]
        def create_builtin_tasks(self):
        ^
app/services/task_executor.py: note: At top level:
app/services/task_executor.py:336:1: error: Skipping analyzing
"app.templates.tasks.builtin_tasks": module is installed, but missing library
stubs or py.typed marker  [import-untyped]
            from app.templates.tasks.builtin_tasks import BUILTIN_TASKS
    ^
app/services/task_executor.py: note: In member "create_builtin_tasks" of class "TaskExecutor":
app/services/task_executor.py:351:24: error: Call to untyped function "Task" in
typed context  [no-untyped-call]
                    task = Task(
                           ^
Found 916 errors in 47 files (checked 60 source files)
